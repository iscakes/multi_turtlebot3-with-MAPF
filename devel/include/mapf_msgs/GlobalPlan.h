// Generated by gencpp from file mapf_msgs/GlobalPlan.msg
// DO NOT EDIT!


#ifndef MAPF_MSGS_MESSAGE_GLOBALPLAN_H
#define MAPF_MSGS_MESSAGE_GLOBALPLAN_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mapf_msgs/SinglePlan.h>

namespace mapf_msgs
{
template <class ContainerAllocator>
struct GlobalPlan_
{
  typedef GlobalPlan_<ContainerAllocator> Type;

  GlobalPlan_()
    : makespan(0)
    , global_plan()  {
    }
  GlobalPlan_(const ContainerAllocator& _alloc)
    : makespan(0)
    , global_plan(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _makespan_type;
  _makespan_type makespan;

   typedef std::vector< ::mapf_msgs::SinglePlan_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::mapf_msgs::SinglePlan_<ContainerAllocator> >> _global_plan_type;
  _global_plan_type global_plan;





  typedef boost::shared_ptr< ::mapf_msgs::GlobalPlan_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mapf_msgs::GlobalPlan_<ContainerAllocator> const> ConstPtr;

}; // struct GlobalPlan_

typedef ::mapf_msgs::GlobalPlan_<std::allocator<void> > GlobalPlan;

typedef boost::shared_ptr< ::mapf_msgs::GlobalPlan > GlobalPlanPtr;
typedef boost::shared_ptr< ::mapf_msgs::GlobalPlan const> GlobalPlanConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mapf_msgs::GlobalPlan_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mapf_msgs::GlobalPlan_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mapf_msgs::GlobalPlan_<ContainerAllocator1> & lhs, const ::mapf_msgs::GlobalPlan_<ContainerAllocator2> & rhs)
{
  return lhs.makespan == rhs.makespan &&
    lhs.global_plan == rhs.global_plan;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mapf_msgs::GlobalPlan_<ContainerAllocator1> & lhs, const ::mapf_msgs::GlobalPlan_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mapf_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mapf_msgs::GlobalPlan_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mapf_msgs::GlobalPlan_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mapf_msgs::GlobalPlan_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mapf_msgs::GlobalPlan_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mapf_msgs::GlobalPlan_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mapf_msgs::GlobalPlan_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mapf_msgs::GlobalPlan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c88ab17b5e8e0853d09dd659498bc3eb";
  }

  static const char* value(const ::mapf_msgs::GlobalPlan_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc88ab17b5e8e0853ULL;
  static const uint64_t static_value2 = 0xd09dd659498bc3ebULL;
};

template<class ContainerAllocator>
struct DataType< ::mapf_msgs::GlobalPlan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mapf_msgs/GlobalPlan";
  }

  static const char* value(const ::mapf_msgs::GlobalPlan_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mapf_msgs::GlobalPlan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 makespan\n"
"mapf_msgs/SinglePlan[] global_plan\n"
"================================================================================\n"
"MSG: mapf_msgs/SinglePlan\n"
"int32[] time_step\n"
"nav_msgs/Path plan\n"
"================================================================================\n"
"MSG: nav_msgs/Path\n"
"#An array of poses that represents a Path for a robot to follow\n"
"Header header\n"
"geometry_msgs/PoseStamped[] poses\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::mapf_msgs::GlobalPlan_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mapf_msgs::GlobalPlan_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.makespan);
      stream.next(m.global_plan);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GlobalPlan_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mapf_msgs::GlobalPlan_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mapf_msgs::GlobalPlan_<ContainerAllocator>& v)
  {
    s << indent << "makespan: ";
    Printer<int32_t>::stream(s, indent + "  ", v.makespan);
    s << indent << "global_plan[]" << std::endl;
    for (size_t i = 0; i < v.global_plan.size(); ++i)
    {
      s << indent << "  global_plan[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::mapf_msgs::SinglePlan_<ContainerAllocator> >::stream(s, indent + "    ", v.global_plan[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAPF_MSGS_MESSAGE_GLOBALPLAN_H
