// Generated by gencpp from file robint_msgs/IsolatedZoneList.msg
// DO NOT EDIT!


#ifndef ROBINT_MSGS_MESSAGE_ISOLATEDZONELIST_H
#define ROBINT_MSGS_MESSAGE_ISOLATEDZONELIST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robint_msgs/IsolatedZone.h>

namespace robint_msgs
{
template <class ContainerAllocator>
struct IsolatedZoneList_
{
  typedef IsolatedZoneList_<ContainerAllocator> Type;

  IsolatedZoneList_()
    : zone_list()  {
    }
  IsolatedZoneList_(const ContainerAllocator& _alloc)
    : zone_list(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::robint_msgs::IsolatedZone_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::robint_msgs::IsolatedZone_<ContainerAllocator> >> _zone_list_type;
  _zone_list_type zone_list;





  typedef boost::shared_ptr< ::robint_msgs::IsolatedZoneList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robint_msgs::IsolatedZoneList_<ContainerAllocator> const> ConstPtr;

}; // struct IsolatedZoneList_

typedef ::robint_msgs::IsolatedZoneList_<std::allocator<void> > IsolatedZoneList;

typedef boost::shared_ptr< ::robint_msgs::IsolatedZoneList > IsolatedZoneListPtr;
typedef boost::shared_ptr< ::robint_msgs::IsolatedZoneList const> IsolatedZoneListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robint_msgs::IsolatedZoneList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robint_msgs::IsolatedZoneList_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robint_msgs::IsolatedZoneList_<ContainerAllocator1> & lhs, const ::robint_msgs::IsolatedZoneList_<ContainerAllocator2> & rhs)
{
  return lhs.zone_list == rhs.zone_list;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robint_msgs::IsolatedZoneList_<ContainerAllocator1> & lhs, const ::robint_msgs::IsolatedZoneList_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robint_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::IsolatedZoneList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::IsolatedZoneList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::IsolatedZoneList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::IsolatedZoneList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::IsolatedZoneList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::IsolatedZoneList_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robint_msgs::IsolatedZoneList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2be48a82e856075e1d4177e40252d0e1";
  }

  static const char* value(const ::robint_msgs::IsolatedZoneList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2be48a82e856075eULL;
  static const uint64_t static_value2 = 0x1d4177e40252d0e1ULL;
};

template<class ContainerAllocator>
struct DataType< ::robint_msgs::IsolatedZoneList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robint_msgs/IsolatedZoneList";
  }

  static const char* value(const ::robint_msgs::IsolatedZoneList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robint_msgs::IsolatedZoneList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "IsolatedZone[] zone_list\n"
"\n"
"================================================================================\n"
"MSG: robint_msgs/IsolatedZone\n"
"Zone zone\n"
"IsolatedWait[] wait_points\n"
"string next_task\n"
"================================================================================\n"
"MSG: robint_msgs/Zone\n"
"string uuid\n"
"string name\n"
"string map_uuid\n"
"string group_uuid\n"
"string type\n"
"geometry_msgs/Point[] points\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: robint_msgs/IsolatedWait\n"
"geometry_msgs/Pose pose\n"
"string uuid\n"
"bool direct\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::robint_msgs::IsolatedZoneList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robint_msgs::IsolatedZoneList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.zone_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IsolatedZoneList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robint_msgs::IsolatedZoneList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robint_msgs::IsolatedZoneList_<ContainerAllocator>& v)
  {
    s << indent << "zone_list[]" << std::endl;
    for (size_t i = 0; i < v.zone_list.size(); ++i)
    {
      s << indent << "  zone_list[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::robint_msgs::IsolatedZone_<ContainerAllocator> >::stream(s, indent + "    ", v.zone_list[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBINT_MSGS_MESSAGE_ISOLATEDZONELIST_H
