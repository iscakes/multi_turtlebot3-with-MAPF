// Generated by gencpp from file robint_msgs/GetLocationListRequest.msg
// DO NOT EDIT!


#ifndef ROBINT_MSGS_MESSAGE_GETLOCATIONLISTREQUEST_H
#define ROBINT_MSGS_MESSAGE_GETLOCATIONLISTREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robint_msgs
{
template <class ContainerAllocator>
struct GetLocationListRequest_
{
  typedef GetLocationListRequest_<ContainerAllocator> Type;

  GetLocationListRequest_()
    : map_name()
    , type_name()
    , map_uuid()
    , uuid_list()  {
    }
  GetLocationListRequest_(const ContainerAllocator& _alloc)
    : map_name(_alloc)
    , type_name(_alloc)
    , map_uuid(_alloc)
    , uuid_list(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _map_name_type;
  _map_name_type map_name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _type_name_type;
  _type_name_type type_name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _map_uuid_type;
  _map_uuid_type map_uuid;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _uuid_list_type;
  _uuid_list_type uuid_list;





  typedef boost::shared_ptr< ::robint_msgs::GetLocationListRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robint_msgs::GetLocationListRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetLocationListRequest_

typedef ::robint_msgs::GetLocationListRequest_<std::allocator<void> > GetLocationListRequest;

typedef boost::shared_ptr< ::robint_msgs::GetLocationListRequest > GetLocationListRequestPtr;
typedef boost::shared_ptr< ::robint_msgs::GetLocationListRequest const> GetLocationListRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robint_msgs::GetLocationListRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robint_msgs::GetLocationListRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robint_msgs::GetLocationListRequest_<ContainerAllocator1> & lhs, const ::robint_msgs::GetLocationListRequest_<ContainerAllocator2> & rhs)
{
  return lhs.map_name == rhs.map_name &&
    lhs.type_name == rhs.type_name &&
    lhs.map_uuid == rhs.map_uuid &&
    lhs.uuid_list == rhs.uuid_list;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robint_msgs::GetLocationListRequest_<ContainerAllocator1> & lhs, const ::robint_msgs::GetLocationListRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robint_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::GetLocationListRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::GetLocationListRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::GetLocationListRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::GetLocationListRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::GetLocationListRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::GetLocationListRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robint_msgs::GetLocationListRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e7765f041aca9fd133e667e221b59df4";
  }

  static const char* value(const ::robint_msgs::GetLocationListRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe7765f041aca9fd1ULL;
  static const uint64_t static_value2 = 0x33e667e221b59df4ULL;
};

template<class ContainerAllocator>
struct DataType< ::robint_msgs::GetLocationListRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robint_msgs/GetLocationListRequest";
  }

  static const char* value(const ::robint_msgs::GetLocationListRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robint_msgs::GetLocationListRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string map_name\n"
"string type_name\n"
"string map_uuid\n"
"string[] uuid_list\n"
;
  }

  static const char* value(const ::robint_msgs::GetLocationListRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robint_msgs::GetLocationListRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.map_name);
      stream.next(m.type_name);
      stream.next(m.map_uuid);
      stream.next(m.uuid_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetLocationListRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robint_msgs::GetLocationListRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robint_msgs::GetLocationListRequest_<ContainerAllocator>& v)
  {
    s << indent << "map_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.map_name);
    s << indent << "type_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.type_name);
    s << indent << "map_uuid: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.map_uuid);
    s << indent << "uuid_list[]" << std::endl;
    for (size_t i = 0; i < v.uuid_list.size(); ++i)
    {
      s << indent << "  uuid_list[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.uuid_list[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBINT_MSGS_MESSAGE_GETLOCATIONLISTREQUEST_H
