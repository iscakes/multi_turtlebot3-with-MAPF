// Generated by gencpp from file robint_msgs/RecordImageRequest.msg
// DO NOT EDIT!


#ifndef ROBINT_MSGS_MESSAGE_RECORDIMAGEREQUEST_H
#define ROBINT_MSGS_MESSAGE_RECORDIMAGEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robint_msgs
{
template <class ContainerAllocator>
struct RecordImageRequest_
{
  typedef RecordImageRequest_<ContainerAllocator> Type;

  RecordImageRequest_()
    : enable(false)
    , compression_level(0)  {
    }
  RecordImageRequest_(const ContainerAllocator& _alloc)
    : enable(false)
    , compression_level(0)  {
  (void)_alloc;
    }



   typedef uint8_t _enable_type;
  _enable_type enable;

   typedef int32_t _compression_level_type;
  _compression_level_type compression_level;





  typedef boost::shared_ptr< ::robint_msgs::RecordImageRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robint_msgs::RecordImageRequest_<ContainerAllocator> const> ConstPtr;

}; // struct RecordImageRequest_

typedef ::robint_msgs::RecordImageRequest_<std::allocator<void> > RecordImageRequest;

typedef boost::shared_ptr< ::robint_msgs::RecordImageRequest > RecordImageRequestPtr;
typedef boost::shared_ptr< ::robint_msgs::RecordImageRequest const> RecordImageRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robint_msgs::RecordImageRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robint_msgs::RecordImageRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robint_msgs::RecordImageRequest_<ContainerAllocator1> & lhs, const ::robint_msgs::RecordImageRequest_<ContainerAllocator2> & rhs)
{
  return lhs.enable == rhs.enable &&
    lhs.compression_level == rhs.compression_level;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robint_msgs::RecordImageRequest_<ContainerAllocator1> & lhs, const ::robint_msgs::RecordImageRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robint_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::RecordImageRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::RecordImageRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::RecordImageRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::RecordImageRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::RecordImageRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::RecordImageRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robint_msgs::RecordImageRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8186d4e4c4d0031ee510dcd8c48201f0";
  }

  static const char* value(const ::robint_msgs::RecordImageRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8186d4e4c4d0031eULL;
  static const uint64_t static_value2 = 0xe510dcd8c48201f0ULL;
};

template<class ContainerAllocator>
struct DataType< ::robint_msgs::RecordImageRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robint_msgs/RecordImageRequest";
  }

  static const char* value(const ::robint_msgs::RecordImageRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robint_msgs::RecordImageRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool enable\n"
"int32 compression_level\n"
;
  }

  static const char* value(const ::robint_msgs::RecordImageRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robint_msgs::RecordImageRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.enable);
      stream.next(m.compression_level);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RecordImageRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robint_msgs::RecordImageRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robint_msgs::RecordImageRequest_<ContainerAllocator>& v)
  {
    s << indent << "enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enable);
    s << indent << "compression_level: ";
    Printer<int32_t>::stream(s, indent + "  ", v.compression_level);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBINT_MSGS_MESSAGE_RECORDIMAGEREQUEST_H
