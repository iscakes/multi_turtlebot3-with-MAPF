// Generated by gencpp from file robint_msgs/GetTrajectoryPointResponse.msg
// DO NOT EDIT!


#ifndef ROBINT_MSGS_MESSAGE_GETTRAJECTORYPOINTRESPONSE_H
#define ROBINT_MSGS_MESSAGE_GETTRAJECTORYPOINTRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace robint_msgs
{
template <class ContainerAllocator>
struct GetTrajectoryPointResponse_
{
  typedef GetTrajectoryPointResponse_<ContainerAllocator> Type;

  GetTrajectoryPointResponse_()
    : pt()
    , current_id(0)
    , total_points_number(0)
    , success(false)
    , error_code(0)
    , message()  {
    }
  GetTrajectoryPointResponse_(const ContainerAllocator& _alloc)
    : pt(_alloc)
    , current_id(0)
    , total_points_number(0)
    , success(false)
    , error_code(0)
    , message(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _pt_type;
  _pt_type pt;

   typedef uint32_t _current_id_type;
  _current_id_type current_id;

   typedef uint32_t _total_points_number_type;
  _total_points_number_type total_points_number;

   typedef uint8_t _success_type;
  _success_type success;

   typedef uint8_t _error_code_type;
  _error_code_type error_code;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _message_type;
  _message_type message;





  typedef boost::shared_ptr< ::robint_msgs::GetTrajectoryPointResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robint_msgs::GetTrajectoryPointResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetTrajectoryPointResponse_

typedef ::robint_msgs::GetTrajectoryPointResponse_<std::allocator<void> > GetTrajectoryPointResponse;

typedef boost::shared_ptr< ::robint_msgs::GetTrajectoryPointResponse > GetTrajectoryPointResponsePtr;
typedef boost::shared_ptr< ::robint_msgs::GetTrajectoryPointResponse const> GetTrajectoryPointResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robint_msgs::GetTrajectoryPointResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robint_msgs::GetTrajectoryPointResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robint_msgs::GetTrajectoryPointResponse_<ContainerAllocator1> & lhs, const ::robint_msgs::GetTrajectoryPointResponse_<ContainerAllocator2> & rhs)
{
  return lhs.pt == rhs.pt &&
    lhs.current_id == rhs.current_id &&
    lhs.total_points_number == rhs.total_points_number &&
    lhs.success == rhs.success &&
    lhs.error_code == rhs.error_code &&
    lhs.message == rhs.message;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robint_msgs::GetTrajectoryPointResponse_<ContainerAllocator1> & lhs, const ::robint_msgs::GetTrajectoryPointResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robint_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::GetTrajectoryPointResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::GetTrajectoryPointResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::GetTrajectoryPointResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::GetTrajectoryPointResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::GetTrajectoryPointResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::GetTrajectoryPointResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robint_msgs::GetTrajectoryPointResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4ae0ddada152bda8cfe12a13e584f90d";
  }

  static const char* value(const ::robint_msgs::GetTrajectoryPointResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4ae0ddada152bda8ULL;
  static const uint64_t static_value2 = 0xcfe12a13e584f90dULL;
};

template<class ContainerAllocator>
struct DataType< ::robint_msgs::GetTrajectoryPointResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robint_msgs/GetTrajectoryPointResponse";
  }

  static const char* value(const ::robint_msgs::GetTrajectoryPointResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robint_msgs::GetTrajectoryPointResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point pt\n"
"uint32 current_id\n"
"uint32 total_points_number\n"
"bool success\n"
"uint8 error_code\n"
"string message\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::robint_msgs::GetTrajectoryPointResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robint_msgs::GetTrajectoryPointResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pt);
      stream.next(m.current_id);
      stream.next(m.total_points_number);
      stream.next(m.success);
      stream.next(m.error_code);
      stream.next(m.message);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetTrajectoryPointResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robint_msgs::GetTrajectoryPointResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robint_msgs::GetTrajectoryPointResponse_<ContainerAllocator>& v)
  {
    s << indent << "pt: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.pt);
    s << indent << "current_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.current_id);
    s << indent << "total_points_number: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.total_points_number);
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "error_code: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.error_code);
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.message);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBINT_MSGS_MESSAGE_GETTRAJECTORYPOINTRESPONSE_H
