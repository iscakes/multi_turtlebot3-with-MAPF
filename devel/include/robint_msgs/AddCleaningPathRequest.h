// Generated by gencpp from file robint_msgs/AddCleaningPathRequest.msg
// DO NOT EDIT!


#ifndef ROBINT_MSGS_MESSAGE_ADDCLEANINGPATHREQUEST_H
#define ROBINT_MSGS_MESSAGE_ADDCLEANINGPATHREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robint_msgs/PathWithPoint.h>

namespace robint_msgs
{
template <class ContainerAllocator>
struct AddCleaningPathRequest_
{
  typedef AddCleaningPathRequest_<ContainerAllocator> Type;

  AddCleaningPathRequest_()
    : map_uuid()
    , path_mode(0)
    , method(0)
    , coordinate_mode(0)
    , cleaning_area_uuid()
    , paths()  {
    }
  AddCleaningPathRequest_(const ContainerAllocator& _alloc)
    : map_uuid(_alloc)
    , path_mode(0)
    , method(0)
    , coordinate_mode(0)
    , cleaning_area_uuid(_alloc)
    , paths(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _map_uuid_type;
  _map_uuid_type map_uuid;

   typedef uint8_t _path_mode_type;
  _path_mode_type path_mode;

   typedef uint8_t _method_type;
  _method_type method;

   typedef uint8_t _coordinate_mode_type;
  _coordinate_mode_type coordinate_mode;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _cleaning_area_uuid_type;
  _cleaning_area_uuid_type cleaning_area_uuid;

   typedef std::vector< ::robint_msgs::PathWithPoint_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::robint_msgs::PathWithPoint_<ContainerAllocator> >> _paths_type;
  _paths_type paths;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(AUTO)
  #undef AUTO
#endif
#if defined(_WIN32) && defined(MANUAL)
  #undef MANUAL
#endif
#if defined(_WIN32) && defined(BOUSTROPHEDON)
  #undef BOUSTROPHEDON
#endif
#if defined(_WIN32) && defined(CONTOUR_LINE)
  #undef CONTOUR_LINE
#endif
#if defined(_WIN32) && defined(STRIP_LINE)
  #undef STRIP_LINE
#endif
#if defined(_WIN32) && defined(RECTANGLE_ZIGZAG)
  #undef RECTANGLE_ZIGZAG
#endif
#if defined(_WIN32) && defined(CONTOUR_PARALLEL)
  #undef CONTOUR_PARALLEL
#endif
#if defined(_WIN32) && defined(METHOD_TEST)
  #undef METHOD_TEST
#endif
#if defined(_WIN32) && defined(WORLD)
  #undef WORLD
#endif
#if defined(_WIN32) && defined(IMAGE)
  #undef IMAGE
#endif

  enum {
    AUTO = 11u,
    MANUAL = 12u,
    BOUSTROPHEDON = 21u,
    CONTOUR_LINE = 22u,
    STRIP_LINE = 23u,
    RECTANGLE_ZIGZAG = 24u,
    CONTOUR_PARALLEL = 25u,
    METHOD_TEST = 26u,
    WORLD = 0u,
    IMAGE = 1u,
  };


  typedef boost::shared_ptr< ::robint_msgs::AddCleaningPathRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robint_msgs::AddCleaningPathRequest_<ContainerAllocator> const> ConstPtr;

}; // struct AddCleaningPathRequest_

typedef ::robint_msgs::AddCleaningPathRequest_<std::allocator<void> > AddCleaningPathRequest;

typedef boost::shared_ptr< ::robint_msgs::AddCleaningPathRequest > AddCleaningPathRequestPtr;
typedef boost::shared_ptr< ::robint_msgs::AddCleaningPathRequest const> AddCleaningPathRequestConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robint_msgs::AddCleaningPathRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robint_msgs::AddCleaningPathRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robint_msgs::AddCleaningPathRequest_<ContainerAllocator1> & lhs, const ::robint_msgs::AddCleaningPathRequest_<ContainerAllocator2> & rhs)
{
  return lhs.map_uuid == rhs.map_uuid &&
    lhs.path_mode == rhs.path_mode &&
    lhs.method == rhs.method &&
    lhs.coordinate_mode == rhs.coordinate_mode &&
    lhs.cleaning_area_uuid == rhs.cleaning_area_uuid &&
    lhs.paths == rhs.paths;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robint_msgs::AddCleaningPathRequest_<ContainerAllocator1> & lhs, const ::robint_msgs::AddCleaningPathRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robint_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::AddCleaningPathRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::AddCleaningPathRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::AddCleaningPathRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::AddCleaningPathRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::AddCleaningPathRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::AddCleaningPathRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robint_msgs::AddCleaningPathRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b59a7383d75f240e2aa1c97ba4eb3fd5";
  }

  static const char* value(const ::robint_msgs::AddCleaningPathRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb59a7383d75f240eULL;
  static const uint64_t static_value2 = 0x2aa1c97ba4eb3fd5ULL;
};

template<class ContainerAllocator>
struct DataType< ::robint_msgs::AddCleaningPathRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robint_msgs/AddCleaningPathRequest";
  }

  static const char* value(const ::robint_msgs::AddCleaningPathRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robint_msgs::AddCleaningPathRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string map_uuid\n"
"uint8 path_mode\n"
"uint8 AUTO=11          # generate cleaning path automaticly\n"
"uint8 MANUAL=12        # use requested path as cleaning path\n"
"uint8 method\n"
"uint8 BOUSTROPHEDON=21\n"
"uint8 CONTOUR_LINE=22\n"
"uint8 STRIP_LINE=23\n"
"uint8 RECTANGLE_ZIGZAG=24\n"
"uint8 CONTOUR_PARALLEL=25\n"
"uint8 METHOD_TEST=26\n"
"uint8 coordinate_mode\n"
"uint8 WORLD=0\n"
"uint8 IMAGE=1\n"
"string cleaning_area_uuid\n"
"PathWithPoint[] paths\n"
"\n"
"================================================================================\n"
"MSG: robint_msgs/PathWithPoint\n"
"uint32 id\n"
"string type\n"
"geometry_msgs/Point[] points\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::robint_msgs::AddCleaningPathRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robint_msgs::AddCleaningPathRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.map_uuid);
      stream.next(m.path_mode);
      stream.next(m.method);
      stream.next(m.coordinate_mode);
      stream.next(m.cleaning_area_uuid);
      stream.next(m.paths);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AddCleaningPathRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robint_msgs::AddCleaningPathRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robint_msgs::AddCleaningPathRequest_<ContainerAllocator>& v)
  {
    s << indent << "map_uuid: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.map_uuid);
    s << indent << "path_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.path_mode);
    s << indent << "method: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.method);
    s << indent << "coordinate_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.coordinate_mode);
    s << indent << "cleaning_area_uuid: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.cleaning_area_uuid);
    s << indent << "paths[]" << std::endl;
    for (size_t i = 0; i < v.paths.size(); ++i)
    {
      s << indent << "  paths[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::robint_msgs::PathWithPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.paths[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBINT_MSGS_MESSAGE_ADDCLEANINGPATHREQUEST_H
