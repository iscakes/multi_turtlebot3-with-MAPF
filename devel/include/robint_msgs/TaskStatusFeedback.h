// Generated by gencpp from file robint_msgs/TaskStatusFeedback.msg
// DO NOT EDIT!


#ifndef ROBINT_MSGS_MESSAGE_TASKSTATUSFEEDBACK_H
#define ROBINT_MSGS_MESSAGE_TASKSTATUSFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robint_msgs
{
template <class ContainerAllocator>
struct TaskStatusFeedback_
{
  typedef TaskStatusFeedback_<ContainerAllocator> Type;

  TaskStatusFeedback_()
    {
    }
  TaskStatusFeedback_(const ContainerAllocator& _alloc)
    {
  (void)_alloc;
    }





// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(NONE)
  #undef NONE
#endif
#if defined(_WIN32) && defined(RUNNING)
  #undef RUNNING
#endif
#if defined(_WIN32) && defined(PAUSE)
  #undef PAUSE
#endif
#if defined(_WIN32) && defined(STOP)
  #undef STOP
#endif
#if defined(_WIN32) && defined(GET_ROBOT_POSE_ERROR)
  #undef GET_ROBOT_POSE_ERROR
#endif
#if defined(_WIN32) && defined(NAV_FAILURE)
  #undef NAV_FAILURE
#endif
#if defined(_WIN32) && defined(GLOBAL_PLAN_FAILURE)
  #undef GLOBAL_PLAN_FAILURE
#endif
#if defined(_WIN32) && defined(LOCAL_PLAN_FAILURE)
  #undef LOCAL_PLAN_FAILURE
#endif
#if defined(_WIN32) && defined(WAIT_AT_GOAL_CANDIDATE)
  #undef WAIT_AT_GOAL_CANDIDATE
#endif
#if defined(_WIN32) && defined(NAV_CANCEL)
  #undef NAV_CANCEL
#endif
#if defined(_WIN32) && defined(PLAN_EXCEPTION)
  #undef PLAN_EXCEPTION
#endif
#if defined(_WIN32) && defined(OPEN_GATE_TIMEOUT)
  #undef OPEN_GATE_TIMEOUT
#endif
#if defined(_WIN32) && defined(FAIL_TO_DETECT_DOCK)
  #undef FAIL_TO_DETECT_DOCK
#endif
#if defined(_WIN32) && defined(DOCK_OBSTACLE_WARN)
  #undef DOCK_OBSTACLE_WARN
#endif
#if defined(_WIN32) && defined(DOCK_TIMEOUT)
  #undef DOCK_TIMEOUT
#endif
#if defined(_WIN32) && defined(RETRY_TIMEOUT)
  #undef RETRY_TIMEOUT
#endif
#if defined(_WIN32) && defined(GO_TO_ANCHOR)
  #undef GO_TO_ANCHOR
#endif
#if defined(_WIN32) && defined(APPROACH_DOCK)
  #undef APPROACH_DOCK
#endif
#if defined(_WIN32) && defined(UNDOCK_OBSTACLE_WARN)
  #undef UNDOCK_OBSTACLE_WARN
#endif
#if defined(_WIN32) && defined(UNDOCK_TIMEOUT)
  #undef UNDOCK_TIMEOUT
#endif
#if defined(_WIN32) && defined(MOVE_INTO_ELEVATOR_PLAN_FAILURE)
  #undef MOVE_INTO_ELEVATOR_PLAN_FAILURE
#endif
#if defined(_WIN32) && defined(MOVE_INTO_GOAL_IS_OCCUPIED)
  #undef MOVE_INTO_GOAL_IS_OCCUPIED
#endif
#if defined(_WIN32) && defined(MOVE_INTO_OBSTACLE_WARN)
  #undef MOVE_INTO_OBSTACLE_WARN
#endif
#if defined(_WIN32) && defined(MOVE_INTO_ELEVATOR_TIMEOUT)
  #undef MOVE_INTO_ELEVATOR_TIMEOUT
#endif
#if defined(_WIN32) && defined(MOVE_INTO_ELEVATOR_FAILURE)
  #undef MOVE_INTO_ELEVATOR_FAILURE
#endif
#if defined(_WIN32) && defined(MOVE_OFF_ELEVATOR_FAILURE)
  #undef MOVE_OFF_ELEVATOR_FAILURE
#endif
#if defined(_WIN32) && defined(MOVE_OFF_GOAL_IS_OCCUPIED)
  #undef MOVE_OFF_GOAL_IS_OCCUPIED
#endif
#if defined(_WIN32) && defined(MOVE_OFF_OBSTACLE_WARN)
  #undef MOVE_OFF_OBSTACLE_WARN
#endif
#if defined(_WIN32) && defined(MOTION_OBSTACLE_WARNING)
  #undef MOTION_OBSTACLE_WARNING
#endif
#if defined(_WIN32) && defined(TRACK_BACK)
  #undef TRACK_BACK
#endif
#if defined(_WIN32) && defined(ROS_ERROR)
  #undef ROS_ERROR
#endif

  enum {
    NONE = 0u,
    RUNNING = 1u,
    PAUSE = 2u,
    STOP = 3u,
    GET_ROBOT_POSE_ERROR = 4u,
    NAV_FAILURE = 21u,
    GLOBAL_PLAN_FAILURE = 22u,
    LOCAL_PLAN_FAILURE = 23u,
    WAIT_AT_GOAL_CANDIDATE = 24u,
    NAV_CANCEL = 25u,
    PLAN_EXCEPTION = 26u,
    OPEN_GATE_TIMEOUT = 41u,
    FAIL_TO_DETECT_DOCK = 51u,
    DOCK_OBSTACLE_WARN = 52u,
    DOCK_TIMEOUT = 53u,
    RETRY_TIMEOUT = 54u,
    GO_TO_ANCHOR = 55u,
    APPROACH_DOCK = 56u,
    UNDOCK_OBSTACLE_WARN = 71u,
    UNDOCK_TIMEOUT = 72u,
    MOVE_INTO_ELEVATOR_PLAN_FAILURE = 81u,
    MOVE_INTO_GOAL_IS_OCCUPIED = 82u,
    MOVE_INTO_OBSTACLE_WARN = 83u,
    MOVE_INTO_ELEVATOR_TIMEOUT = 84u,
    MOVE_INTO_ELEVATOR_FAILURE = 85u,
    MOVE_OFF_ELEVATOR_FAILURE = 91u,
    MOVE_OFF_GOAL_IS_OCCUPIED = 92u,
    MOVE_OFF_OBSTACLE_WARN = 93u,
    MOTION_OBSTACLE_WARNING = 101u,
    TRACK_BACK = 102u,
    ROS_ERROR = 255u,
  };


  typedef boost::shared_ptr< ::robint_msgs::TaskStatusFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robint_msgs::TaskStatusFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct TaskStatusFeedback_

typedef ::robint_msgs::TaskStatusFeedback_<std::allocator<void> > TaskStatusFeedback;

typedef boost::shared_ptr< ::robint_msgs::TaskStatusFeedback > TaskStatusFeedbackPtr;
typedef boost::shared_ptr< ::robint_msgs::TaskStatusFeedback const> TaskStatusFeedbackConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robint_msgs::TaskStatusFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robint_msgs::TaskStatusFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


} // namespace robint_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::TaskStatusFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::TaskStatusFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::TaskStatusFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::TaskStatusFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::TaskStatusFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::TaskStatusFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robint_msgs::TaskStatusFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f4c55101ab12bccd187ce627a0586984";
  }

  static const char* value(const ::robint_msgs::TaskStatusFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf4c55101ab12bccdULL;
  static const uint64_t static_value2 = 0x187ce627a0586984ULL;
};

template<class ContainerAllocator>
struct DataType< ::robint_msgs::TaskStatusFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robint_msgs/TaskStatusFeedback";
  }

  static const char* value(const ::robint_msgs::TaskStatusFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robint_msgs::TaskStatusFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 NONE = 0\n"
"uint8 RUNNING = 1\n"
"uint8 PAUSE = 2\n"
"uint8 STOP = 3\n"
"\n"
"\n"
"# Mapping\n"
"uint8 GET_ROBOT_POSE_ERROR = 4\n"
"\n"
"# Navigation\n"
"uint8 NAV_FAILURE = 21\n"
"uint8 GLOBAL_PLAN_FAILURE = 22\n"
"uint8 LOCAL_PLAN_FAILURE = 23\n"
"uint8 WAIT_AT_GOAL_CANDIDATE = 24\n"
"uint8 NAV_CANCEL = 25\n"
"uint8 PLAN_EXCEPTION = 26\n"
"\n"
"# OpenGate\n"
"uint8 OPEN_GATE_TIMEOUT = 41\n"
"\n"
"# AutoCharge\n"
"uint8 FAIL_TO_DETECT_DOCK=51\n"
"uint8 DOCK_OBSTACLE_WARN=52\n"
"uint8 DOCK_TIMEOUT=53\n"
"uint8 RETRY_TIMEOUT=54\n"
"uint8 GO_TO_ANCHOR=55\n"
"uint8 APPROACH_DOCK=56\n"
"\n"
"# Undock\n"
"uint8 UNDOCK_OBSTACLE_WARN=71\n"
"uint8 UNDOCK_TIMEOUT=72\n"
"\n"
"# MoveIntoElevator\n"
"uint8 MOVE_INTO_ELEVATOR_PLAN_FAILURE=81\n"
"uint8 MOVE_INTO_GOAL_IS_OCCUPIED=82\n"
"uint8 MOVE_INTO_OBSTACLE_WARN=83\n"
"uint8 MOVE_INTO_ELEVATOR_TIMEOUT=84\n"
"uint8 MOVE_INTO_ELEVATOR_FAILURE=85\n"
"\n"
"# MoveOffElevator\n"
"uint8 MOVE_OFF_ELEVATOR_FAILURE=91\n"
"uint8 MOVE_OFF_GOAL_IS_OCCUPIED=92\n"
"uint8 MOVE_OFF_OBSTACLE_WARN=93\n"
"\n"
"# Motion\n"
"uint8 MOTION_OBSTACLE_WARNING=101\n"
"\n"
"# TrackPath\n"
"uint8 TRACK_BACK=102\n"
"\n"
"uint8 ROS_ERROR = 255\n"
;
  }

  static const char* value(const ::robint_msgs::TaskStatusFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robint_msgs::TaskStatusFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TaskStatusFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robint_msgs::TaskStatusFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::robint_msgs::TaskStatusFeedback_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // ROBINT_MSGS_MESSAGE_TASKSTATUSFEEDBACK_H
