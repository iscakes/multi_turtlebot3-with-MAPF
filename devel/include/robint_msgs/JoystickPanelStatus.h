// Generated by gencpp from file robint_msgs/JoystickPanelStatus.msg
// DO NOT EDIT!


#ifndef ROBINT_MSGS_MESSAGE_JOYSTICKPANELSTATUS_H
#define ROBINT_MSGS_MESSAGE_JOYSTICKPANELSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robint_msgs
{
template <class ContainerAllocator>
struct JoystickPanelStatus_
{
  typedef JoystickPanelStatus_<ContainerAllocator> Type;

  JoystickPanelStatus_()
    : stamp()
    , joystick_trigger(false)
    , key_return_home(false)
    , key_speed_increase(false)
    , key_speed_reduction(false)
    , key_park_brake(false)
    , key_whistle(false)
    , mode(0)
    , level(0)
    , error_code(0)  {
    }
  JoystickPanelStatus_(const ContainerAllocator& _alloc)
    : stamp()
    , joystick_trigger(false)
    , key_return_home(false)
    , key_speed_increase(false)
    , key_speed_reduction(false)
    , key_park_brake(false)
    , key_whistle(false)
    , mode(0)
    , level(0)
    , error_code(0)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef uint8_t _joystick_trigger_type;
  _joystick_trigger_type joystick_trigger;

   typedef uint8_t _key_return_home_type;
  _key_return_home_type key_return_home;

   typedef uint8_t _key_speed_increase_type;
  _key_speed_increase_type key_speed_increase;

   typedef uint8_t _key_speed_reduction_type;
  _key_speed_reduction_type key_speed_reduction;

   typedef uint8_t _key_park_brake_type;
  _key_park_brake_type key_park_brake;

   typedef uint8_t _key_whistle_type;
  _key_whistle_type key_whistle;

   typedef uint8_t _mode_type;
  _mode_type mode;

   typedef uint8_t _level_type;
  _level_type level;

   typedef uint8_t _error_code_type;
  _error_code_type error_code;





  typedef boost::shared_ptr< ::robint_msgs::JoystickPanelStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robint_msgs::JoystickPanelStatus_<ContainerAllocator> const> ConstPtr;

}; // struct JoystickPanelStatus_

typedef ::robint_msgs::JoystickPanelStatus_<std::allocator<void> > JoystickPanelStatus;

typedef boost::shared_ptr< ::robint_msgs::JoystickPanelStatus > JoystickPanelStatusPtr;
typedef boost::shared_ptr< ::robint_msgs::JoystickPanelStatus const> JoystickPanelStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robint_msgs::JoystickPanelStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robint_msgs::JoystickPanelStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robint_msgs::JoystickPanelStatus_<ContainerAllocator1> & lhs, const ::robint_msgs::JoystickPanelStatus_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.joystick_trigger == rhs.joystick_trigger &&
    lhs.key_return_home == rhs.key_return_home &&
    lhs.key_speed_increase == rhs.key_speed_increase &&
    lhs.key_speed_reduction == rhs.key_speed_reduction &&
    lhs.key_park_brake == rhs.key_park_brake &&
    lhs.key_whistle == rhs.key_whistle &&
    lhs.mode == rhs.mode &&
    lhs.level == rhs.level &&
    lhs.error_code == rhs.error_code;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robint_msgs::JoystickPanelStatus_<ContainerAllocator1> & lhs, const ::robint_msgs::JoystickPanelStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robint_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::JoystickPanelStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::JoystickPanelStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::JoystickPanelStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::JoystickPanelStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::JoystickPanelStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::JoystickPanelStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robint_msgs::JoystickPanelStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b7f32ae109c05e77fb5790ce1aa37191";
  }

  static const char* value(const ::robint_msgs::JoystickPanelStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb7f32ae109c05e77ULL;
  static const uint64_t static_value2 = 0xfb5790ce1aa37191ULL;
};

template<class ContainerAllocator>
struct DataType< ::robint_msgs::JoystickPanelStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robint_msgs/JoystickPanelStatus";
  }

  static const char* value(const ::robint_msgs::JoystickPanelStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robint_msgs::JoystickPanelStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n"
"bool joystick_trigger\n"
"bool key_return_home\n"
"bool key_speed_increase\n"
"bool key_speed_reduction\n"
"bool key_park_brake\n"
"bool key_whistle\n"
"uint8 mode # 0: P档; 1: 手动; 2: 自动\n"
"uint8 level\n"
"uint8 error_code\n"
;
  }

  static const char* value(const ::robint_msgs::JoystickPanelStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robint_msgs::JoystickPanelStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.joystick_trigger);
      stream.next(m.key_return_home);
      stream.next(m.key_speed_increase);
      stream.next(m.key_speed_reduction);
      stream.next(m.key_park_brake);
      stream.next(m.key_whistle);
      stream.next(m.mode);
      stream.next(m.level);
      stream.next(m.error_code);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JoystickPanelStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robint_msgs::JoystickPanelStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robint_msgs::JoystickPanelStatus_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "joystick_trigger: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.joystick_trigger);
    s << indent << "key_return_home: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.key_return_home);
    s << indent << "key_speed_increase: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.key_speed_increase);
    s << indent << "key_speed_reduction: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.key_speed_reduction);
    s << indent << "key_park_brake: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.key_park_brake);
    s << indent << "key_whistle: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.key_whistle);
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
    s << indent << "level: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.level);
    s << indent << "error_code: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.error_code);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBINT_MSGS_MESSAGE_JOYSTICKPANELSTATUS_H
