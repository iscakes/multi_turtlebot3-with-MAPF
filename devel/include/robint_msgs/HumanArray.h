// Generated by gencpp from file robint_msgs/HumanArray.msg
// DO NOT EDIT!


#ifndef ROBINT_MSGS_MESSAGE_HUMANARRAY_H
#define ROBINT_MSGS_MESSAGE_HUMANARRAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <robint_msgs/HumanMsg.h>

namespace robint_msgs
{
template <class ContainerAllocator>
struct HumanArray_
{
  typedef HumanArray_<ContainerAllocator> Type;

  HumanArray_()
    : header()
    , count(0)
    , data()  {
    }
  HumanArray_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , count(0)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _count_type;
  _count_type count;

   typedef std::vector< ::robint_msgs::HumanMsg_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::robint_msgs::HumanMsg_<ContainerAllocator> >> _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::robint_msgs::HumanArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robint_msgs::HumanArray_<ContainerAllocator> const> ConstPtr;

}; // struct HumanArray_

typedef ::robint_msgs::HumanArray_<std::allocator<void> > HumanArray;

typedef boost::shared_ptr< ::robint_msgs::HumanArray > HumanArrayPtr;
typedef boost::shared_ptr< ::robint_msgs::HumanArray const> HumanArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robint_msgs::HumanArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robint_msgs::HumanArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robint_msgs::HumanArray_<ContainerAllocator1> & lhs, const ::robint_msgs::HumanArray_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.count == rhs.count &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robint_msgs::HumanArray_<ContainerAllocator1> & lhs, const ::robint_msgs::HumanArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robint_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::HumanArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::HumanArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::HumanArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::HumanArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::HumanArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::HumanArray_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robint_msgs::HumanArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4ecbd4b1f17e43e2dd75758b2bc5517d";
  }

  static const char* value(const ::robint_msgs::HumanArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4ecbd4b1f17e43e2ULL;
  static const uint64_t static_value2 = 0xdd75758b2bc5517dULL;
};

template<class ContainerAllocator>
struct DataType< ::robint_msgs::HumanArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robint_msgs/HumanArray";
  }

  static const char* value(const ::robint_msgs::HumanArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robint_msgs::HumanArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"int32 count\n"
"HumanMsg[] data\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: robint_msgs/HumanMsg\n"
"std_msgs/Header header\n"
"string id\n"
"string name\n"
"geometry_msgs/Point32 center_of_world\n"
"RectWithConfidence body_rect\n"
"RectWithConfidence face_rect\n"
"bool is_within_security_line\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point32\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"================================================================================\n"
"MSG: robint_msgs/RectWithConfidence\n"
"int32 x\n"
"int32 y\n"
"int32 width\n"
"int32 height\n"
"float32 confidence\n"
;
  }

  static const char* value(const ::robint_msgs::HumanArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robint_msgs::HumanArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.count);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HumanArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robint_msgs::HumanArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robint_msgs::HumanArray_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "count: ";
    Printer<int32_t>::stream(s, indent + "  ", v.count);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::robint_msgs::HumanMsg_<ContainerAllocator> >::stream(s, indent + "    ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBINT_MSGS_MESSAGE_HUMANARRAY_H
