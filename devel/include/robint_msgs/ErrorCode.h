// Generated by gencpp from file robint_msgs/ErrorCode.msg
// DO NOT EDIT!


#ifndef ROBINT_MSGS_MESSAGE_ERRORCODE_H
#define ROBINT_MSGS_MESSAGE_ERRORCODE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robint_msgs
{
template <class ContainerAllocator>
struct ErrorCode_
{
  typedef ErrorCode_<ContainerAllocator> Type;

  ErrorCode_()
    {
    }
  ErrorCode_(const ContainerAllocator& _alloc)
    {
  (void)_alloc;
    }





// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(NONE)
  #undef NONE
#endif
#if defined(_WIN32) && defined(ANOTHER_TASK_IS_RUNNING)
  #undef ANOTHER_TASK_IS_RUNNING
#endif
#if defined(_WIN32) && defined(CURRENT_TASK_IS_RUNNING)
  #undef CURRENT_TASK_IS_RUNNING
#endif
#if defined(_WIN32) && defined(NO_TASK_IS_RUNNING)
  #undef NO_TASK_IS_RUNNING
#endif
#if defined(_WIN32) && defined(GLOBAL_PLAN_FAILURE)
  #undef GLOBAL_PLAN_FAILURE
#endif
#if defined(_WIN32) && defined(SET_MAP_FAILURE)
  #undef SET_MAP_FAILURE
#endif
#if defined(_WIN32) && defined(RESET_ODOM_FAILURE)
  #undef RESET_ODOM_FAILURE
#endif
#if defined(_WIN32) && defined(RESET_IMU_FAILURE)
  #undef RESET_IMU_FAILURE
#endif
#if defined(_WIN32) && defined(RESET_EKF_FAILURE)
  #undef RESET_EKF_FAILURE
#endif
#if defined(_WIN32) && defined(LOCALIZATION_ERROR)
  #undef LOCALIZATION_ERROR
#endif
#if defined(_WIN32) && defined(LOCATION_UUID_NOT_CHARGE_BASE)
  #undef LOCATION_UUID_NOT_CHARGE_BASE
#endif
#if defined(_WIN32) && defined(CHARGE_BASE_EMPTY)
  #undef CHARGE_BASE_EMPTY
#endif
#if defined(_WIN32) && defined(DEFAULT_CHARGE_BASE_NOT_SET)
  #undef DEFAULT_CHARGE_BASE_NOT_SET
#endif
#if defined(_WIN32) && defined(CHARGE_DETECTION_FAILURE)
  #undef CHARGE_DETECTION_FAILURE
#endif
#if defined(_WIN32) && defined(MAP_IMAGE_FILE_NON_EXISTENT)
  #undef MAP_IMAGE_FILE_NON_EXISTENT
#endif
#if defined(_WIN32) && defined(MAP_UUID_NON_EXISTENT)
  #undef MAP_UUID_NON_EXISTENT
#endif
#if defined(_WIN32) && defined(MAP_UUID_NOT_CURRENT)
  #undef MAP_UUID_NOT_CURRENT
#endif
#if defined(_WIN32) && defined(GET_MAP_OCCUPANCY_GRID_FAILURE)
  #undef GET_MAP_OCCUPANCY_GRID_FAILURE
#endif
#if defined(_WIN32) && defined(LOAD_MAP_FAILURE)
  #undef LOAD_MAP_FAILURE
#endif
#if defined(_WIN32) && defined(CURRENT_MAP_UUID_EMPTY)
  #undef CURRENT_MAP_UUID_EMPTY
#endif
#if defined(_WIN32) && defined(UUID_NON_EXISTENT)
  #undef UUID_NON_EXISTENT
#endif
#if defined(_WIN32) && defined(RECORDED_TRAJECTORY_CHECK_FAILURE)
  #undef RECORDED_TRAJECTORY_CHECK_FAILURE
#endif
#if defined(_WIN32) && defined(TRAJECTORY_TOO_SHORT)
  #undef TRAJECTORY_TOO_SHORT
#endif
#if defined(_WIN32) && defined(AREA_TOO_SMALL)
  #undef AREA_TOO_SMALL
#endif
#if defined(_WIN32) && defined(POLYGON_NON_SIMPLE)
  #undef POLYGON_NON_SIMPLE
#endif
#if defined(_WIN32) && defined(POLYGON_NON_CLOSED)
  #undef POLYGON_NON_CLOSED
#endif
#if defined(_WIN32) && defined(REQUESTED_INDEX_OUT_OF_RANGE)
  #undef REQUESTED_INDEX_OUT_OF_RANGE
#endif
#if defined(_WIN32) && defined(LOCATION_UUID_NON_EXISTENT)
  #undef LOCATION_UUID_NON_EXISTENT
#endif
#if defined(_WIN32) && defined(VIRTUALWALL_UUID_NON_EXISTENT)
  #undef VIRTUALWALL_UUID_NON_EXISTENT
#endif
#if defined(_WIN32) && defined(ZONE_UUID_NON_EXISTENT)
  #undef ZONE_UUID_NON_EXISTENT
#endif
#if defined(_WIN32) && defined(CLEANING_PATH_NON_EXISTENT)
  #undef CLEANING_PATH_NON_EXISTENT
#endif
#if defined(_WIN32) && defined(ARGUMENT_ERROR)
  #undef ARGUMENT_ERROR
#endif
#if defined(_WIN32) && defined(DATA_ERROR)
  #undef DATA_ERROR
#endif
#if defined(_WIN32) && defined(ROS_ERROR)
  #undef ROS_ERROR
#endif

  enum {
    NONE = 0u,
    ANOTHER_TASK_IS_RUNNING = 1u,
    CURRENT_TASK_IS_RUNNING = 2u,
    NO_TASK_IS_RUNNING = 3u,
    GLOBAL_PLAN_FAILURE = 11u,
    SET_MAP_FAILURE = 41u,
    RESET_ODOM_FAILURE = 42u,
    RESET_IMU_FAILURE = 43u,
    RESET_EKF_FAILURE = 44u,
    LOCALIZATION_ERROR = 50u,
    LOCATION_UUID_NOT_CHARGE_BASE = 61u,
    CHARGE_BASE_EMPTY = 62u,
    DEFAULT_CHARGE_BASE_NOT_SET = 63u,
    CHARGE_DETECTION_FAILURE = 70u,
    MAP_IMAGE_FILE_NON_EXISTENT = 100u,
    MAP_UUID_NON_EXISTENT = 101u,
    MAP_UUID_NOT_CURRENT = 102u,
    GET_MAP_OCCUPANCY_GRID_FAILURE = 103u,
    LOAD_MAP_FAILURE = 104u,
    CURRENT_MAP_UUID_EMPTY = 105u,
    UUID_NON_EXISTENT = 106u,
    RECORDED_TRAJECTORY_CHECK_FAILURE = 107u,
    TRAJECTORY_TOO_SHORT = 108u,
    AREA_TOO_SMALL = 109u,
    POLYGON_NON_SIMPLE = 110u,
    POLYGON_NON_CLOSED = 111u,
    REQUESTED_INDEX_OUT_OF_RANGE = 112u,
    LOCATION_UUID_NON_EXISTENT = 121u,
    VIRTUALWALL_UUID_NON_EXISTENT = 141u,
    ZONE_UUID_NON_EXISTENT = 151u,
    CLEANING_PATH_NON_EXISTENT = 152u,
    ARGUMENT_ERROR = 253u,
    DATA_ERROR = 254u,
    ROS_ERROR = 255u,
  };


  typedef boost::shared_ptr< ::robint_msgs::ErrorCode_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robint_msgs::ErrorCode_<ContainerAllocator> const> ConstPtr;

}; // struct ErrorCode_

typedef ::robint_msgs::ErrorCode_<std::allocator<void> > ErrorCode;

typedef boost::shared_ptr< ::robint_msgs::ErrorCode > ErrorCodePtr;
typedef boost::shared_ptr< ::robint_msgs::ErrorCode const> ErrorCodeConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robint_msgs::ErrorCode_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robint_msgs::ErrorCode_<ContainerAllocator> >::stream(s, "", v);
return s;
}


} // namespace robint_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::ErrorCode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::ErrorCode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::ErrorCode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::ErrorCode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::ErrorCode_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::ErrorCode_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robint_msgs::ErrorCode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "45cd9bc105f86c67f47b4756c85f449a";
  }

  static const char* value(const ::robint_msgs::ErrorCode_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x45cd9bc105f86c67ULL;
  static const uint64_t static_value2 = 0xf47b4756c85f449aULL;
};

template<class ContainerAllocator>
struct DataType< ::robint_msgs::ErrorCode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robint_msgs/ErrorCode";
  }

  static const char* value(const ::robint_msgs::ErrorCode_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robint_msgs::ErrorCode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Task Command Error Code\n"
"uint8 NONE = 0\n"
"uint8 ANOTHER_TASK_IS_RUNNING = 1\n"
"uint8 CURRENT_TASK_IS_RUNNING = 2\n"
"uint8 NO_TASK_IS_RUNNING = 3\n"
"\n"
"uint8 GLOBAL_PLAN_FAILURE = 11\n"
"\n"
"uint8 SET_MAP_FAILURE = 41\n"
"uint8 RESET_ODOM_FAILURE = 42\n"
"uint8 RESET_IMU_FAILURE = 43\n"
"uint8 RESET_EKF_FAILURE = 44\n"
"\n"
"uint8 LOCALIZATION_ERROR = 50\n"
"\n"
"# AutoCharge Error Code\n"
"uint8 LOCATION_UUID_NOT_CHARGE_BASE = 61\n"
"uint8 CHARGE_BASE_EMPTY = 62\n"
"uint8 DEFAULT_CHARGE_BASE_NOT_SET = 63\n"
"\n"
"# AutoExplore Error Code\n"
"uint8 CHARGE_DETECTION_FAILURE = 70\n"
"\n"
"# Map Widget Operation Error Code\n"
"uint8 MAP_IMAGE_FILE_NON_EXISTENT = 100\n"
"uint8 MAP_UUID_NON_EXISTENT = 101\n"
"uint8 MAP_UUID_NOT_CURRENT = 102\n"
"uint8 GET_MAP_OCCUPANCY_GRID_FAILURE = 103\n"
"uint8 LOAD_MAP_FAILURE = 104\n"
"uint8 CURRENT_MAP_UUID_EMPTY = 105\n"
"uint8 UUID_NON_EXISTENT = 106\n"
"\n"
"uint8 RECORDED_TRAJECTORY_CHECK_FAILURE = 107\n"
"uint8 TRAJECTORY_TOO_SHORT = 108\n"
"uint8 AREA_TOO_SMALL = 109\n"
"uint8 POLYGON_NON_SIMPLE = 110\n"
"uint8 POLYGON_NON_CLOSED = 111\n"
"uint8 REQUESTED_INDEX_OUT_OF_RANGE = 112\n"
"\n"
"uint8 LOCATION_UUID_NON_EXISTENT = 121\n"
"\n"
"uint8 VIRTUALWALL_UUID_NON_EXISTENT = 141\n"
"\n"
"uint8 ZONE_UUID_NON_EXISTENT = 151\n"
"uint8 CLEANING_PATH_NON_EXISTENT = 152\n"
"\n"
"\n"
"uint8 ARGUMENT_ERROR = 253\n"
"uint8 DATA_ERROR = 254\n"
"uint8 ROS_ERROR = 255\n"
"\n"
"\n"
"\n"
"\n"
"\n"
;
  }

  static const char* value(const ::robint_msgs::ErrorCode_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robint_msgs::ErrorCode_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ErrorCode_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robint_msgs::ErrorCode_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::robint_msgs::ErrorCode_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // ROBINT_MSGS_MESSAGE_ERRORCODE_H
