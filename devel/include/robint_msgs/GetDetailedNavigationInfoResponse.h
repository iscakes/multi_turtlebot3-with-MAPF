// Generated by gencpp from file robint_msgs/GetDetailedNavigationInfoResponse.msg
// DO NOT EDIT!


#ifndef ROBINT_MSGS_MESSAGE_GETDETAILEDNAVIGATIONINFORESPONSE_H
#define ROBINT_MSGS_MESSAGE_GETDETAILEDNAVIGATIONINFORESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robint_msgs
{
template <class ContainerAllocator>
struct GetDetailedNavigationInfoResponse_
{
  typedef GetDetailedNavigationInfoResponse_<ContainerAllocator> Type;

  GetDetailedNavigationInfoResponse_()
    : current_map_uuid()
    , current_floor_id()
    , target_map_uuid()
    , target_floor_uuid()
    , target_loc_uuid()
    , enter_elevator_loc_uuid()
    , elevator_interior_loc_uuid()
    , elevator_wait_loc_uuid()
    , exit_elevator_loc_uuid()
    , result(false)  {
    }
  GetDetailedNavigationInfoResponse_(const ContainerAllocator& _alloc)
    : current_map_uuid(_alloc)
    , current_floor_id(_alloc)
    , target_map_uuid(_alloc)
    , target_floor_uuid(_alloc)
    , target_loc_uuid(_alloc)
    , enter_elevator_loc_uuid(_alloc)
    , elevator_interior_loc_uuid(_alloc)
    , elevator_wait_loc_uuid(_alloc)
    , exit_elevator_loc_uuid(_alloc)
    , result(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _current_map_uuid_type;
  _current_map_uuid_type current_map_uuid;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _current_floor_id_type;
  _current_floor_id_type current_floor_id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _target_map_uuid_type;
  _target_map_uuid_type target_map_uuid;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _target_floor_uuid_type;
  _target_floor_uuid_type target_floor_uuid;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _target_loc_uuid_type;
  _target_loc_uuid_type target_loc_uuid;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _enter_elevator_loc_uuid_type;
  _enter_elevator_loc_uuid_type enter_elevator_loc_uuid;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _elevator_interior_loc_uuid_type;
  _elevator_interior_loc_uuid_type elevator_interior_loc_uuid;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _elevator_wait_loc_uuid_type;
  _elevator_wait_loc_uuid_type elevator_wait_loc_uuid;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _exit_elevator_loc_uuid_type;
  _exit_elevator_loc_uuid_type exit_elevator_loc_uuid;

   typedef uint8_t _result_type;
  _result_type result;





  typedef boost::shared_ptr< ::robint_msgs::GetDetailedNavigationInfoResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robint_msgs::GetDetailedNavigationInfoResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetDetailedNavigationInfoResponse_

typedef ::robint_msgs::GetDetailedNavigationInfoResponse_<std::allocator<void> > GetDetailedNavigationInfoResponse;

typedef boost::shared_ptr< ::robint_msgs::GetDetailedNavigationInfoResponse > GetDetailedNavigationInfoResponsePtr;
typedef boost::shared_ptr< ::robint_msgs::GetDetailedNavigationInfoResponse const> GetDetailedNavigationInfoResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robint_msgs::GetDetailedNavigationInfoResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robint_msgs::GetDetailedNavigationInfoResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robint_msgs::GetDetailedNavigationInfoResponse_<ContainerAllocator1> & lhs, const ::robint_msgs::GetDetailedNavigationInfoResponse_<ContainerAllocator2> & rhs)
{
  return lhs.current_map_uuid == rhs.current_map_uuid &&
    lhs.current_floor_id == rhs.current_floor_id &&
    lhs.target_map_uuid == rhs.target_map_uuid &&
    lhs.target_floor_uuid == rhs.target_floor_uuid &&
    lhs.target_loc_uuid == rhs.target_loc_uuid &&
    lhs.enter_elevator_loc_uuid == rhs.enter_elevator_loc_uuid &&
    lhs.elevator_interior_loc_uuid == rhs.elevator_interior_loc_uuid &&
    lhs.elevator_wait_loc_uuid == rhs.elevator_wait_loc_uuid &&
    lhs.exit_elevator_loc_uuid == rhs.exit_elevator_loc_uuid &&
    lhs.result == rhs.result;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robint_msgs::GetDetailedNavigationInfoResponse_<ContainerAllocator1> & lhs, const ::robint_msgs::GetDetailedNavigationInfoResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robint_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::GetDetailedNavigationInfoResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::GetDetailedNavigationInfoResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::GetDetailedNavigationInfoResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::GetDetailedNavigationInfoResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::GetDetailedNavigationInfoResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::GetDetailedNavigationInfoResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robint_msgs::GetDetailedNavigationInfoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f9ad951a76360aeae23cc7d1b7faec4c";
  }

  static const char* value(const ::robint_msgs::GetDetailedNavigationInfoResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf9ad951a76360aeaULL;
  static const uint64_t static_value2 = 0xe23cc7d1b7faec4cULL;
};

template<class ContainerAllocator>
struct DataType< ::robint_msgs::GetDetailedNavigationInfoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robint_msgs/GetDetailedNavigationInfoResponse";
  }

  static const char* value(const ::robint_msgs::GetDetailedNavigationInfoResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robint_msgs::GetDetailedNavigationInfoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string current_map_uuid\n"
"string current_floor_id\n"
"string target_map_uuid\n"
"string target_floor_uuid\n"
"string target_loc_uuid\n"
"string enter_elevator_loc_uuid\n"
"string elevator_interior_loc_uuid\n"
"string elevator_wait_loc_uuid\n"
"string exit_elevator_loc_uuid\n"
"\n"
"bool result\n"
;
  }

  static const char* value(const ::robint_msgs::GetDetailedNavigationInfoResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robint_msgs::GetDetailedNavigationInfoResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.current_map_uuid);
      stream.next(m.current_floor_id);
      stream.next(m.target_map_uuid);
      stream.next(m.target_floor_uuid);
      stream.next(m.target_loc_uuid);
      stream.next(m.enter_elevator_loc_uuid);
      stream.next(m.elevator_interior_loc_uuid);
      stream.next(m.elevator_wait_loc_uuid);
      stream.next(m.exit_elevator_loc_uuid);
      stream.next(m.result);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetDetailedNavigationInfoResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robint_msgs::GetDetailedNavigationInfoResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robint_msgs::GetDetailedNavigationInfoResponse_<ContainerAllocator>& v)
  {
    s << indent << "current_map_uuid: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.current_map_uuid);
    s << indent << "current_floor_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.current_floor_id);
    s << indent << "target_map_uuid: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.target_map_uuid);
    s << indent << "target_floor_uuid: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.target_floor_uuid);
    s << indent << "target_loc_uuid: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.target_loc_uuid);
    s << indent << "enter_elevator_loc_uuid: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.enter_elevator_loc_uuid);
    s << indent << "elevator_interior_loc_uuid: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.elevator_interior_loc_uuid);
    s << indent << "elevator_wait_loc_uuid: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.elevator_wait_loc_uuid);
    s << indent << "exit_elevator_loc_uuid: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.exit_elevator_loc_uuid);
    s << indent << "result: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.result);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBINT_MSGS_MESSAGE_GETDETAILEDNAVIGATIONINFORESPONSE_H
