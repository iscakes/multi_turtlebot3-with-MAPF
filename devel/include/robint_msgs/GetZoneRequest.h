// Generated by gencpp from file robint_msgs/GetZoneRequest.msg
// DO NOT EDIT!


#ifndef ROBINT_MSGS_MESSAGE_GETZONEREQUEST_H
#define ROBINT_MSGS_MESSAGE_GETZONEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robint_msgs
{
template <class ContainerAllocator>
struct GetZoneRequest_
{
  typedef GetZoneRequest_<ContainerAllocator> Type;

  GetZoneRequest_()
    : zone_uuid()
    , zone_mode(0)  {
    }
  GetZoneRequest_(const ContainerAllocator& _alloc)
    : zone_uuid(_alloc)
    , zone_mode(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _zone_uuid_type;
  _zone_uuid_type zone_uuid;

   typedef uint8_t _zone_mode_type;
  _zone_mode_type zone_mode;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(IMAGE)
  #undef IMAGE
#endif
#if defined(_WIN32) && defined(WORLD)
  #undef WORLD
#endif

  enum {
    IMAGE = 0u,
    WORLD = 1u,
  };


  typedef boost::shared_ptr< ::robint_msgs::GetZoneRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robint_msgs::GetZoneRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetZoneRequest_

typedef ::robint_msgs::GetZoneRequest_<std::allocator<void> > GetZoneRequest;

typedef boost::shared_ptr< ::robint_msgs::GetZoneRequest > GetZoneRequestPtr;
typedef boost::shared_ptr< ::robint_msgs::GetZoneRequest const> GetZoneRequestConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robint_msgs::GetZoneRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robint_msgs::GetZoneRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robint_msgs::GetZoneRequest_<ContainerAllocator1> & lhs, const ::robint_msgs::GetZoneRequest_<ContainerAllocator2> & rhs)
{
  return lhs.zone_uuid == rhs.zone_uuid &&
    lhs.zone_mode == rhs.zone_mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robint_msgs::GetZoneRequest_<ContainerAllocator1> & lhs, const ::robint_msgs::GetZoneRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robint_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::GetZoneRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::GetZoneRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::GetZoneRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::GetZoneRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::GetZoneRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::GetZoneRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robint_msgs::GetZoneRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5572bd0ef723a40cb33e88c19df09273";
  }

  static const char* value(const ::robint_msgs::GetZoneRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5572bd0ef723a40cULL;
  static const uint64_t static_value2 = 0xb33e88c19df09273ULL;
};

template<class ContainerAllocator>
struct DataType< ::robint_msgs::GetZoneRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robint_msgs/GetZoneRequest";
  }

  static const char* value(const ::robint_msgs::GetZoneRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robint_msgs::GetZoneRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string zone_uuid\n"
"uint8 zone_mode\n"
"uint8 IMAGE=0\n"
"uint8 WORLD=1\n"
;
  }

  static const char* value(const ::robint_msgs::GetZoneRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robint_msgs::GetZoneRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.zone_uuid);
      stream.next(m.zone_mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetZoneRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robint_msgs::GetZoneRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robint_msgs::GetZoneRequest_<ContainerAllocator>& v)
  {
    s << indent << "zone_uuid: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.zone_uuid);
    s << indent << "zone_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.zone_mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBINT_MSGS_MESSAGE_GETZONEREQUEST_H
