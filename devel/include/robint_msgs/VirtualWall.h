// Generated by gencpp from file robint_msgs/VirtualWall.msg
// DO NOT EDIT!


#ifndef ROBINT_MSGS_MESSAGE_VIRTUALWALL_H
#define ROBINT_MSGS_MESSAGE_VIRTUALWALL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace robint_msgs
{
template <class ContainerAllocator>
struct VirtualWall_
{
  typedef VirtualWall_<ContainerAllocator> Type;

  VirtualWall_()
    : id()
    , type(0)
    , vw_uuid()
    , vw_name()
    , map_uuid()
    , group_uuid()
    , points()  {
    }
  VirtualWall_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , type(0)
    , vw_uuid(_alloc)
    , vw_name(_alloc)
    , map_uuid(_alloc)
    , group_uuid(_alloc)
    , points(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _id_type;
  _id_type id;

   typedef uint8_t _type_type;
  _type_type type;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _vw_uuid_type;
  _vw_uuid_type vw_uuid;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _vw_name_type;
  _vw_name_type vw_name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _map_uuid_type;
  _map_uuid_type map_uuid;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _group_uuid_type;
  _group_uuid_type group_uuid;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _points_type;
  _points_type points;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(Line)
  #undef Line
#endif
#if defined(_WIN32) && defined(Rectangle)
  #undef Rectangle
#endif
#if defined(_WIN32) && defined(Polygon)
  #undef Polygon
#endif

  enum {
    Line = 0u,
    Rectangle = 1u,
    Polygon = 2u,
  };


  typedef boost::shared_ptr< ::robint_msgs::VirtualWall_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robint_msgs::VirtualWall_<ContainerAllocator> const> ConstPtr;

}; // struct VirtualWall_

typedef ::robint_msgs::VirtualWall_<std::allocator<void> > VirtualWall;

typedef boost::shared_ptr< ::robint_msgs::VirtualWall > VirtualWallPtr;
typedef boost::shared_ptr< ::robint_msgs::VirtualWall const> VirtualWallConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robint_msgs::VirtualWall_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robint_msgs::VirtualWall_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robint_msgs::VirtualWall_<ContainerAllocator1> & lhs, const ::robint_msgs::VirtualWall_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.type == rhs.type &&
    lhs.vw_uuid == rhs.vw_uuid &&
    lhs.vw_name == rhs.vw_name &&
    lhs.map_uuid == rhs.map_uuid &&
    lhs.group_uuid == rhs.group_uuid &&
    lhs.points == rhs.points;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robint_msgs::VirtualWall_<ContainerAllocator1> & lhs, const ::robint_msgs::VirtualWall_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robint_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::VirtualWall_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::VirtualWall_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::VirtualWall_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::VirtualWall_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::VirtualWall_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::VirtualWall_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robint_msgs::VirtualWall_<ContainerAllocator> >
{
  static const char* value()
  {
    return "24e716918fa2c6fa0da0e5ec3950f548";
  }

  static const char* value(const ::robint_msgs::VirtualWall_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x24e716918fa2c6faULL;
  static const uint64_t static_value2 = 0x0da0e5ec3950f548ULL;
};

template<class ContainerAllocator>
struct DataType< ::robint_msgs::VirtualWall_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robint_msgs/VirtualWall";
  }

  static const char* value(const ::robint_msgs::VirtualWall_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robint_msgs::VirtualWall_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string id\n"
"uint8 type\n"
"uint8 Line = 0\n"
"uint8 Rectangle = 1\n"
"uint8 Polygon = 2\n"
"string vw_uuid\n"
"string vw_name\n"
"string map_uuid\n"
"string group_uuid\n"
"geometry_msgs/Point[] points \n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::robint_msgs::VirtualWall_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robint_msgs::VirtualWall_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.type);
      stream.next(m.vw_uuid);
      stream.next(m.vw_name);
      stream.next(m.map_uuid);
      stream.next(m.group_uuid);
      stream.next(m.points);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VirtualWall_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robint_msgs::VirtualWall_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robint_msgs::VirtualWall_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.id);
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "vw_uuid: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.vw_uuid);
    s << indent << "vw_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.vw_name);
    s << indent << "map_uuid: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.map_uuid);
    s << indent << "group_uuid: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.group_uuid);
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.points[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBINT_MSGS_MESSAGE_VIRTUALWALL_H
