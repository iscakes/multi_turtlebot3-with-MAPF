// Generated by gencpp from file robint_msgs/ChargeBaseInfo.msg
// DO NOT EDIT!


#ifndef ROBINT_MSGS_MESSAGE_CHARGEBASEINFO_H
#define ROBINT_MSGS_MESSAGE_CHARGEBASEINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/PoseStamped.h>

namespace robint_msgs
{
template <class ContainerAllocator>
struct ChargeBaseInfo_
{
  typedef ChargeBaseInfo_<ContainerAllocator> Type;

  ChargeBaseInfo_()
    : location_uuid()
    , location_name()
    , group_uuid()
    , map_uuid()
    , floor_id()
    , building_id()
    , pose()
    , anchor_pose()  {
    }
  ChargeBaseInfo_(const ContainerAllocator& _alloc)
    : location_uuid(_alloc)
    , location_name(_alloc)
    , group_uuid(_alloc)
    , map_uuid(_alloc)
    , floor_id(_alloc)
    , building_id(_alloc)
    , pose(_alloc)
    , anchor_pose(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _location_uuid_type;
  _location_uuid_type location_uuid;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _location_name_type;
  _location_name_type location_name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _group_uuid_type;
  _group_uuid_type group_uuid;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _map_uuid_type;
  _map_uuid_type map_uuid;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _floor_id_type;
  _floor_id_type floor_id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _building_id_type;
  _building_id_type building_id;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _anchor_pose_type;
  _anchor_pose_type anchor_pose;





  typedef boost::shared_ptr< ::robint_msgs::ChargeBaseInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robint_msgs::ChargeBaseInfo_<ContainerAllocator> const> ConstPtr;

}; // struct ChargeBaseInfo_

typedef ::robint_msgs::ChargeBaseInfo_<std::allocator<void> > ChargeBaseInfo;

typedef boost::shared_ptr< ::robint_msgs::ChargeBaseInfo > ChargeBaseInfoPtr;
typedef boost::shared_ptr< ::robint_msgs::ChargeBaseInfo const> ChargeBaseInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robint_msgs::ChargeBaseInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robint_msgs::ChargeBaseInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robint_msgs::ChargeBaseInfo_<ContainerAllocator1> & lhs, const ::robint_msgs::ChargeBaseInfo_<ContainerAllocator2> & rhs)
{
  return lhs.location_uuid == rhs.location_uuid &&
    lhs.location_name == rhs.location_name &&
    lhs.group_uuid == rhs.group_uuid &&
    lhs.map_uuid == rhs.map_uuid &&
    lhs.floor_id == rhs.floor_id &&
    lhs.building_id == rhs.building_id &&
    lhs.pose == rhs.pose &&
    lhs.anchor_pose == rhs.anchor_pose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robint_msgs::ChargeBaseInfo_<ContainerAllocator1> & lhs, const ::robint_msgs::ChargeBaseInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robint_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::ChargeBaseInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::ChargeBaseInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::ChargeBaseInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::ChargeBaseInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::ChargeBaseInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::ChargeBaseInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robint_msgs::ChargeBaseInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f0d4cbfd1ab263fc96b403946bd97599";
  }

  static const char* value(const ::robint_msgs::ChargeBaseInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf0d4cbfd1ab263fcULL;
  static const uint64_t static_value2 = 0x96b403946bd97599ULL;
};

template<class ContainerAllocator>
struct DataType< ::robint_msgs::ChargeBaseInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robint_msgs/ChargeBaseInfo";
  }

  static const char* value(const ::robint_msgs::ChargeBaseInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robint_msgs::ChargeBaseInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string location_uuid\n"
"string location_name\n"
"string group_uuid\n"
"string map_uuid\n"
"string floor_id\n"
"string building_id\n"
"geometry_msgs/PoseStamped pose\n"
"geometry_msgs/PoseStamped anchor_pose\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::robint_msgs::ChargeBaseInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robint_msgs::ChargeBaseInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.location_uuid);
      stream.next(m.location_name);
      stream.next(m.group_uuid);
      stream.next(m.map_uuid);
      stream.next(m.floor_id);
      stream.next(m.building_id);
      stream.next(m.pose);
      stream.next(m.anchor_pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ChargeBaseInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robint_msgs::ChargeBaseInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robint_msgs::ChargeBaseInfo_<ContainerAllocator>& v)
  {
    s << indent << "location_uuid: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.location_uuid);
    s << indent << "location_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.location_name);
    s << indent << "group_uuid: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.group_uuid);
    s << indent << "map_uuid: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.map_uuid);
    s << indent << "floor_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.floor_id);
    s << indent << "building_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.building_id);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "anchor_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.anchor_pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBINT_MSGS_MESSAGE_CHARGEBASEINFO_H
