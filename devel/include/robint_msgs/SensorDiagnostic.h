// Generated by gencpp from file robint_msgs/SensorDiagnostic.msg
// DO NOT EDIT!


#ifndef ROBINT_MSGS_MESSAGE_SENSORDIAGNOSTIC_H
#define ROBINT_MSGS_MESSAGE_SENSORDIAGNOSTIC_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robint_msgs
{
template <class ContainerAllocator>
struct SensorDiagnostic_
{
  typedef SensorDiagnostic_<ContainerAllocator> Type;

  SensorDiagnostic_()
    : time()
    , hardware_name()
    , is_received(false)
    , is_normal(false)  {
    }
  SensorDiagnostic_(const ContainerAllocator& _alloc)
    : time()
    , hardware_name(_alloc)
    , is_received(false)
    , is_normal(false)  {
  (void)_alloc;
    }



   typedef ros::Time _time_type;
  _time_type time;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _hardware_name_type;
  _hardware_name_type hardware_name;

   typedef uint8_t _is_received_type;
  _is_received_type is_received;

   typedef uint8_t _is_normal_type;
  _is_normal_type is_normal;





  typedef boost::shared_ptr< ::robint_msgs::SensorDiagnostic_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robint_msgs::SensorDiagnostic_<ContainerAllocator> const> ConstPtr;

}; // struct SensorDiagnostic_

typedef ::robint_msgs::SensorDiagnostic_<std::allocator<void> > SensorDiagnostic;

typedef boost::shared_ptr< ::robint_msgs::SensorDiagnostic > SensorDiagnosticPtr;
typedef boost::shared_ptr< ::robint_msgs::SensorDiagnostic const> SensorDiagnosticConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robint_msgs::SensorDiagnostic_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robint_msgs::SensorDiagnostic_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robint_msgs::SensorDiagnostic_<ContainerAllocator1> & lhs, const ::robint_msgs::SensorDiagnostic_<ContainerAllocator2> & rhs)
{
  return lhs.time == rhs.time &&
    lhs.hardware_name == rhs.hardware_name &&
    lhs.is_received == rhs.is_received &&
    lhs.is_normal == rhs.is_normal;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robint_msgs::SensorDiagnostic_<ContainerAllocator1> & lhs, const ::robint_msgs::SensorDiagnostic_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robint_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::SensorDiagnostic_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::SensorDiagnostic_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::SensorDiagnostic_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::SensorDiagnostic_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::SensorDiagnostic_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::SensorDiagnostic_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robint_msgs::SensorDiagnostic_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ddfb3402f75cafa157926253e3f9dfef";
  }

  static const char* value(const ::robint_msgs::SensorDiagnostic_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xddfb3402f75cafa1ULL;
  static const uint64_t static_value2 = 0x57926253e3f9dfefULL;
};

template<class ContainerAllocator>
struct DataType< ::robint_msgs::SensorDiagnostic_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robint_msgs/SensorDiagnostic";
  }

  static const char* value(const ::robint_msgs::SensorDiagnostic_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robint_msgs::SensorDiagnostic_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time time\n"
"string hardware_name\n"
"bool is_received\n"
"bool is_normal\n"
;
  }

  static const char* value(const ::robint_msgs::SensorDiagnostic_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robint_msgs::SensorDiagnostic_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time);
      stream.next(m.hardware_name);
      stream.next(m.is_received);
      stream.next(m.is_normal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SensorDiagnostic_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robint_msgs::SensorDiagnostic_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robint_msgs::SensorDiagnostic_<ContainerAllocator>& v)
  {
    s << indent << "time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.time);
    s << indent << "hardware_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.hardware_name);
    s << indent << "is_received: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_received);
    s << indent << "is_normal: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_normal);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBINT_MSGS_MESSAGE_SENSORDIAGNOSTIC_H
