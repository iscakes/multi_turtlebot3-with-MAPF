// Generated by gencpp from file robint_msgs/IsolatedZone.msg
// DO NOT EDIT!


#ifndef ROBINT_MSGS_MESSAGE_ISOLATEDZONE_H
#define ROBINT_MSGS_MESSAGE_ISOLATEDZONE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robint_msgs/Zone.h>
#include <robint_msgs/IsolatedWait.h>

namespace robint_msgs
{
template <class ContainerAllocator>
struct IsolatedZone_
{
  typedef IsolatedZone_<ContainerAllocator> Type;

  IsolatedZone_()
    : zone()
    , wait_points()
    , next_task()  {
    }
  IsolatedZone_(const ContainerAllocator& _alloc)
    : zone(_alloc)
    , wait_points(_alloc)
    , next_task(_alloc)  {
  (void)_alloc;
    }



   typedef  ::robint_msgs::Zone_<ContainerAllocator>  _zone_type;
  _zone_type zone;

   typedef std::vector< ::robint_msgs::IsolatedWait_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::robint_msgs::IsolatedWait_<ContainerAllocator> >> _wait_points_type;
  _wait_points_type wait_points;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _next_task_type;
  _next_task_type next_task;





  typedef boost::shared_ptr< ::robint_msgs::IsolatedZone_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robint_msgs::IsolatedZone_<ContainerAllocator> const> ConstPtr;

}; // struct IsolatedZone_

typedef ::robint_msgs::IsolatedZone_<std::allocator<void> > IsolatedZone;

typedef boost::shared_ptr< ::robint_msgs::IsolatedZone > IsolatedZonePtr;
typedef boost::shared_ptr< ::robint_msgs::IsolatedZone const> IsolatedZoneConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robint_msgs::IsolatedZone_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robint_msgs::IsolatedZone_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robint_msgs::IsolatedZone_<ContainerAllocator1> & lhs, const ::robint_msgs::IsolatedZone_<ContainerAllocator2> & rhs)
{
  return lhs.zone == rhs.zone &&
    lhs.wait_points == rhs.wait_points &&
    lhs.next_task == rhs.next_task;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robint_msgs::IsolatedZone_<ContainerAllocator1> & lhs, const ::robint_msgs::IsolatedZone_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robint_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::IsolatedZone_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::IsolatedZone_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::IsolatedZone_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::IsolatedZone_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::IsolatedZone_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::IsolatedZone_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robint_msgs::IsolatedZone_<ContainerAllocator> >
{
  static const char* value()
  {
    return "42047e004f43f0c737c09962b5dbeda6";
  }

  static const char* value(const ::robint_msgs::IsolatedZone_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x42047e004f43f0c7ULL;
  static const uint64_t static_value2 = 0x37c09962b5dbeda6ULL;
};

template<class ContainerAllocator>
struct DataType< ::robint_msgs::IsolatedZone_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robint_msgs/IsolatedZone";
  }

  static const char* value(const ::robint_msgs::IsolatedZone_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robint_msgs::IsolatedZone_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Zone zone\n"
"IsolatedWait[] wait_points\n"
"string next_task\n"
"================================================================================\n"
"MSG: robint_msgs/Zone\n"
"string uuid\n"
"string name\n"
"string map_uuid\n"
"string group_uuid\n"
"string type\n"
"geometry_msgs/Point[] points\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: robint_msgs/IsolatedWait\n"
"geometry_msgs/Pose pose\n"
"string uuid\n"
"bool direct\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::robint_msgs::IsolatedZone_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robint_msgs::IsolatedZone_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.zone);
      stream.next(m.wait_points);
      stream.next(m.next_task);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IsolatedZone_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robint_msgs::IsolatedZone_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robint_msgs::IsolatedZone_<ContainerAllocator>& v)
  {
    s << indent << "zone: ";
    s << std::endl;
    Printer< ::robint_msgs::Zone_<ContainerAllocator> >::stream(s, indent + "  ", v.zone);
    s << indent << "wait_points[]" << std::endl;
    for (size_t i = 0; i < v.wait_points.size(); ++i)
    {
      s << indent << "  wait_points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::robint_msgs::IsolatedWait_<ContainerAllocator> >::stream(s, indent + "    ", v.wait_points[i]);
    }
    s << indent << "next_task: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.next_task);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBINT_MSGS_MESSAGE_ISOLATEDZONE_H
