// Generated by gencpp from file robint_msgs/ElevatorState.msg
// DO NOT EDIT!


#ifndef ROBINT_MSGS_MESSAGE_ELEVATORSTATE_H
#define ROBINT_MSGS_MESSAGE_ELEVATORSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robint_msgs/TaskStateHeader.h>

namespace robint_msgs
{
template <class ContainerAllocator>
struct ElevatorState_
{
  typedef ElevatorState_<ContainerAllocator> Type;

  ElevatorState_()
    : header()
    , r_state(0)
    , r_feedback(0)
    , building_name()
    , floor_index(0)
    , door_status()
    , lift_status()
    , finished(false)  {
    }
  ElevatorState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , r_state(0)
    , r_feedback(0)
    , building_name(_alloc)
    , floor_index(0)
    , door_status(_alloc)
    , lift_status(_alloc)
    , finished(false)  {
  (void)_alloc;
    }



   typedef  ::robint_msgs::TaskStateHeader_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _r_state_type;
  _r_state_type r_state;

   typedef uint8_t _r_feedback_type;
  _r_feedback_type r_feedback;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _building_name_type;
  _building_name_type building_name;

   typedef int32_t _floor_index_type;
  _floor_index_type floor_index;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _door_status_type;
  _door_status_type door_status;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _lift_status_type;
  _lift_status_type lift_status;

   typedef uint8_t _finished_type;
  _finished_type finished;





  typedef boost::shared_ptr< ::robint_msgs::ElevatorState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robint_msgs::ElevatorState_<ContainerAllocator> const> ConstPtr;

}; // struct ElevatorState_

typedef ::robint_msgs::ElevatorState_<std::allocator<void> > ElevatorState;

typedef boost::shared_ptr< ::robint_msgs::ElevatorState > ElevatorStatePtr;
typedef boost::shared_ptr< ::robint_msgs::ElevatorState const> ElevatorStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robint_msgs::ElevatorState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robint_msgs::ElevatorState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robint_msgs::ElevatorState_<ContainerAllocator1> & lhs, const ::robint_msgs::ElevatorState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.r_state == rhs.r_state &&
    lhs.r_feedback == rhs.r_feedback &&
    lhs.building_name == rhs.building_name &&
    lhs.floor_index == rhs.floor_index &&
    lhs.door_status == rhs.door_status &&
    lhs.lift_status == rhs.lift_status &&
    lhs.finished == rhs.finished;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robint_msgs::ElevatorState_<ContainerAllocator1> & lhs, const ::robint_msgs::ElevatorState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robint_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::ElevatorState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::ElevatorState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::ElevatorState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::ElevatorState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::ElevatorState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::ElevatorState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robint_msgs::ElevatorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d23507e8469034e7acb9f80b617e8be4";
  }

  static const char* value(const ::robint_msgs::ElevatorState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd23507e8469034e7ULL;
  static const uint64_t static_value2 = 0xacb9f80b617e8be4ULL;
};

template<class ContainerAllocator>
struct DataType< ::robint_msgs::ElevatorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robint_msgs/ElevatorState";
  }

  static const char* value(const ::robint_msgs::ElevatorState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robint_msgs::ElevatorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# elevator_status\n"
"TaskStateHeader header\n"
"uint8 r_state\n"
"uint8 r_feedback\n"
"string building_name\n"
"int32 floor_index\n"
"# 电梯开门状态：opened,opening,closed,closing\n"
"string door_status\n"
"# upgoing, downgoing, keeping\n"
"string lift_status\n"
"bool finished\n"
"================================================================================\n"
"MSG: robint_msgs/TaskStateHeader\n"
"bool activate  # 该任务是否处于激活状态\n"
"time start_time\n"
"time stop_time\n"
;
  }

  static const char* value(const ::robint_msgs::ElevatorState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robint_msgs::ElevatorState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.r_state);
      stream.next(m.r_feedback);
      stream.next(m.building_name);
      stream.next(m.floor_index);
      stream.next(m.door_status);
      stream.next(m.lift_status);
      stream.next(m.finished);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ElevatorState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robint_msgs::ElevatorState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robint_msgs::ElevatorState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::robint_msgs::TaskStateHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "r_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.r_state);
    s << indent << "r_feedback: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.r_feedback);
    s << indent << "building_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.building_name);
    s << indent << "floor_index: ";
    Printer<int32_t>::stream(s, indent + "  ", v.floor_index);
    s << indent << "door_status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.door_status);
    s << indent << "lift_status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.lift_status);
    s << indent << "finished: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.finished);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBINT_MSGS_MESSAGE_ELEVATORSTATE_H
