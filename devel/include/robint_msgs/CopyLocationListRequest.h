// Generated by gencpp from file robint_msgs/CopyLocationListRequest.msg
// DO NOT EDIT!


#ifndef ROBINT_MSGS_MESSAGE_COPYLOCATIONLISTREQUEST_H
#define ROBINT_MSGS_MESSAGE_COPYLOCATIONLISTREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robint_msgs
{
template <class ContainerAllocator>
struct CopyLocationListRequest_
{
  typedef CopyLocationListRequest_<ContainerAllocator> Type;

  CopyLocationListRequest_()
    : source_map_uuid()
    , target_map_uuid()
    , floor_index(0)  {
    }
  CopyLocationListRequest_(const ContainerAllocator& _alloc)
    : source_map_uuid(_alloc)
    , target_map_uuid(_alloc)
    , floor_index(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _source_map_uuid_type;
  _source_map_uuid_type source_map_uuid;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _target_map_uuid_type;
  _target_map_uuid_type target_map_uuid;

   typedef int32_t _floor_index_type;
  _floor_index_type floor_index;





  typedef boost::shared_ptr< ::robint_msgs::CopyLocationListRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robint_msgs::CopyLocationListRequest_<ContainerAllocator> const> ConstPtr;

}; // struct CopyLocationListRequest_

typedef ::robint_msgs::CopyLocationListRequest_<std::allocator<void> > CopyLocationListRequest;

typedef boost::shared_ptr< ::robint_msgs::CopyLocationListRequest > CopyLocationListRequestPtr;
typedef boost::shared_ptr< ::robint_msgs::CopyLocationListRequest const> CopyLocationListRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robint_msgs::CopyLocationListRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robint_msgs::CopyLocationListRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robint_msgs::CopyLocationListRequest_<ContainerAllocator1> & lhs, const ::robint_msgs::CopyLocationListRequest_<ContainerAllocator2> & rhs)
{
  return lhs.source_map_uuid == rhs.source_map_uuid &&
    lhs.target_map_uuid == rhs.target_map_uuid &&
    lhs.floor_index == rhs.floor_index;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robint_msgs::CopyLocationListRequest_<ContainerAllocator1> & lhs, const ::robint_msgs::CopyLocationListRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robint_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::CopyLocationListRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::CopyLocationListRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::CopyLocationListRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::CopyLocationListRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::CopyLocationListRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::CopyLocationListRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robint_msgs::CopyLocationListRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a53f3b91d4028fe972a2a14f7f5cc002";
  }

  static const char* value(const ::robint_msgs::CopyLocationListRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa53f3b91d4028fe9ULL;
  static const uint64_t static_value2 = 0x72a2a14f7f5cc002ULL;
};

template<class ContainerAllocator>
struct DataType< ::robint_msgs::CopyLocationListRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robint_msgs/CopyLocationListRequest";
  }

  static const char* value(const ::robint_msgs::CopyLocationListRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robint_msgs::CopyLocationListRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string source_map_uuid\n"
"string target_map_uuid\n"
"int32 floor_index\n"
;
  }

  static const char* value(const ::robint_msgs::CopyLocationListRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robint_msgs::CopyLocationListRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.source_map_uuid);
      stream.next(m.target_map_uuid);
      stream.next(m.floor_index);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CopyLocationListRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robint_msgs::CopyLocationListRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robint_msgs::CopyLocationListRequest_<ContainerAllocator>& v)
  {
    s << indent << "source_map_uuid: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.source_map_uuid);
    s << indent << "target_map_uuid: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.target_map_uuid);
    s << indent << "floor_index: ";
    Printer<int32_t>::stream(s, indent + "  ", v.floor_index);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBINT_MSGS_MESSAGE_COPYLOCATIONLISTREQUEST_H
