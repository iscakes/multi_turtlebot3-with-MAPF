// Generated by gencpp from file robint_msgs/LedControl.msg
// DO NOT EDIT!


#ifndef ROBINT_MSGS_MESSAGE_LEDCONTROL_H
#define ROBINT_MSGS_MESSAGE_LEDCONTROL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robint_msgs
{
template <class ContainerAllocator>
struct LedControl_
{
  typedef LedControl_<ContainerAllocator> Type;

  LedControl_()
    : red(0)
    , green(0)
    , blue(0)
    , rgb(0)
    , brightness(0)
    , mode(0)
    , speed(0)  {
    }
  LedControl_(const ContainerAllocator& _alloc)
    : red(0)
    , green(0)
    , blue(0)
    , rgb(0)
    , brightness(0)
    , mode(0)
    , speed(0)  {
  (void)_alloc;
    }



   typedef uint8_t _red_type;
  _red_type red;

   typedef uint8_t _green_type;
  _green_type green;

   typedef uint8_t _blue_type;
  _blue_type blue;

   typedef uint32_t _rgb_type;
  _rgb_type rgb;

   typedef uint8_t _brightness_type;
  _brightness_type brightness;

   typedef uint8_t _mode_type;
  _mode_type mode;

   typedef uint16_t _speed_type;
  _speed_type speed;





  typedef boost::shared_ptr< ::robint_msgs::LedControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robint_msgs::LedControl_<ContainerAllocator> const> ConstPtr;

}; // struct LedControl_

typedef ::robint_msgs::LedControl_<std::allocator<void> > LedControl;

typedef boost::shared_ptr< ::robint_msgs::LedControl > LedControlPtr;
typedef boost::shared_ptr< ::robint_msgs::LedControl const> LedControlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robint_msgs::LedControl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robint_msgs::LedControl_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robint_msgs::LedControl_<ContainerAllocator1> & lhs, const ::robint_msgs::LedControl_<ContainerAllocator2> & rhs)
{
  return lhs.red == rhs.red &&
    lhs.green == rhs.green &&
    lhs.blue == rhs.blue &&
    lhs.rgb == rhs.rgb &&
    lhs.brightness == rhs.brightness &&
    lhs.mode == rhs.mode &&
    lhs.speed == rhs.speed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robint_msgs::LedControl_<ContainerAllocator1> & lhs, const ::robint_msgs::LedControl_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robint_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::LedControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::LedControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::LedControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::LedControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::LedControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::LedControl_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robint_msgs::LedControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6af3c075d10c39ecc03ad496b71b72ec";
  }

  static const char* value(const ::robint_msgs::LedControl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6af3c075d10c39ecULL;
  static const uint64_t static_value2 = 0xc03ad496b71b72ecULL;
};

template<class ContainerAllocator>
struct DataType< ::robint_msgs::LedControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robint_msgs/LedControl";
  }

  static const char* value(const ::robint_msgs::LedControl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robint_msgs::LedControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# /*\n"
"#  * # LED控制\n"
"#  * ## b 亮度 [0-255], 不允许设置 10 ('\\n')!!!\n"
"#  * ## s 速度 [11,16959], 越小越快，初始化默认1000\n"
"#  * ## c 颜色 [0x000000,0xFFFFFF], 初始化白色0xFFFFFF\n"
"#  * ## m 模式 [0-55]\n"
"#  * * 0: 静态单色\n"
"#  * * 12: 彩虹全彩转圈Rainbow Cycle\n"
"#  * * 3: 转圈color wipe\n"
"#  * * 44: 彗星尾巴Comet\n"
"#  * */\n"
"\n"
"uint8 red\n"
"uint8 green\n"
"uint8 blue\n"
"uint32 rgb\n"
"uint8 brightness\n"
"uint8 mode\n"
"uint16 speed\n"
;
  }

  static const char* value(const ::robint_msgs::LedControl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robint_msgs::LedControl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.red);
      stream.next(m.green);
      stream.next(m.blue);
      stream.next(m.rgb);
      stream.next(m.brightness);
      stream.next(m.mode);
      stream.next(m.speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LedControl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robint_msgs::LedControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robint_msgs::LedControl_<ContainerAllocator>& v)
  {
    s << indent << "red: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.red);
    s << indent << "green: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.green);
    s << indent << "blue: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.blue);
    s << indent << "rgb: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.rgb);
    s << indent << "brightness: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.brightness);
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
    s << indent << "speed: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBINT_MSGS_MESSAGE_LEDCONTROL_H
