// Generated by gencpp from file robint_msgs/RobotIsolatedZone.msg
// DO NOT EDIT!


#ifndef ROBINT_MSGS_MESSAGE_ROBOTISOLATEDZONE_H
#define ROBINT_MSGS_MESSAGE_ROBOTISOLATEDZONE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robint_msgs
{
template <class ContainerAllocator>
struct RobotIsolatedZone_
{
  typedef RobotIsolatedZone_<ContainerAllocator> Type;

  RobotIsolatedZone_()
    : zone_uuid()
    , robot_list()  {
    }
  RobotIsolatedZone_(const ContainerAllocator& _alloc)
    : zone_uuid(_alloc)
    , robot_list(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _zone_uuid_type;
  _zone_uuid_type zone_uuid;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _robot_list_type;
  _robot_list_type robot_list;





  typedef boost::shared_ptr< ::robint_msgs::RobotIsolatedZone_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robint_msgs::RobotIsolatedZone_<ContainerAllocator> const> ConstPtr;

}; // struct RobotIsolatedZone_

typedef ::robint_msgs::RobotIsolatedZone_<std::allocator<void> > RobotIsolatedZone;

typedef boost::shared_ptr< ::robint_msgs::RobotIsolatedZone > RobotIsolatedZonePtr;
typedef boost::shared_ptr< ::robint_msgs::RobotIsolatedZone const> RobotIsolatedZoneConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robint_msgs::RobotIsolatedZone_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robint_msgs::RobotIsolatedZone_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robint_msgs::RobotIsolatedZone_<ContainerAllocator1> & lhs, const ::robint_msgs::RobotIsolatedZone_<ContainerAllocator2> & rhs)
{
  return lhs.zone_uuid == rhs.zone_uuid &&
    lhs.robot_list == rhs.robot_list;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robint_msgs::RobotIsolatedZone_<ContainerAllocator1> & lhs, const ::robint_msgs::RobotIsolatedZone_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robint_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::RobotIsolatedZone_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::RobotIsolatedZone_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::RobotIsolatedZone_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::RobotIsolatedZone_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::RobotIsolatedZone_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::RobotIsolatedZone_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robint_msgs::RobotIsolatedZone_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ae9554ce58aef29ade4877f7ded80370";
  }

  static const char* value(const ::robint_msgs::RobotIsolatedZone_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xae9554ce58aef29aULL;
  static const uint64_t static_value2 = 0xde4877f7ded80370ULL;
};

template<class ContainerAllocator>
struct DataType< ::robint_msgs::RobotIsolatedZone_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robint_msgs/RobotIsolatedZone";
  }

  static const char* value(const ::robint_msgs::RobotIsolatedZone_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robint_msgs::RobotIsolatedZone_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string zone_uuid\n"
"string[] robot_list\n"
;
  }

  static const char* value(const ::robint_msgs::RobotIsolatedZone_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robint_msgs::RobotIsolatedZone_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.zone_uuid);
      stream.next(m.robot_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotIsolatedZone_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robint_msgs::RobotIsolatedZone_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robint_msgs::RobotIsolatedZone_<ContainerAllocator>& v)
  {
    s << indent << "zone_uuid: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.zone_uuid);
    s << indent << "robot_list[]" << std::endl;
    for (size_t i = 0; i < v.robot_list.size(); ++i)
    {
      s << indent << "  robot_list[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.robot_list[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBINT_MSGS_MESSAGE_ROBOTISOLATEDZONE_H
