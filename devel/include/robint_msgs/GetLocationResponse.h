// Generated by gencpp from file robint_msgs/GetLocationResponse.msg
// DO NOT EDIT!


#ifndef ROBINT_MSGS_MESSAGE_GETLOCATIONRESPONSE_H
#define ROBINT_MSGS_MESSAGE_GETLOCATIONRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robint_msgs/Location.h>

namespace robint_msgs
{
template <class ContainerAllocator>
struct GetLocationResponse_
{
  typedef GetLocationResponse_<ContainerAllocator> Type;

  GetLocationResponse_()
    : location()
    , success(false)
    , error_code(0)  {
    }
  GetLocationResponse_(const ContainerAllocator& _alloc)
    : location(_alloc)
    , success(false)
    , error_code(0)  {
  (void)_alloc;
    }



   typedef  ::robint_msgs::Location_<ContainerAllocator>  _location_type;
  _location_type location;

   typedef uint8_t _success_type;
  _success_type success;

   typedef uint8_t _error_code_type;
  _error_code_type error_code;





  typedef boost::shared_ptr< ::robint_msgs::GetLocationResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robint_msgs::GetLocationResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetLocationResponse_

typedef ::robint_msgs::GetLocationResponse_<std::allocator<void> > GetLocationResponse;

typedef boost::shared_ptr< ::robint_msgs::GetLocationResponse > GetLocationResponsePtr;
typedef boost::shared_ptr< ::robint_msgs::GetLocationResponse const> GetLocationResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robint_msgs::GetLocationResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robint_msgs::GetLocationResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robint_msgs::GetLocationResponse_<ContainerAllocator1> & lhs, const ::robint_msgs::GetLocationResponse_<ContainerAllocator2> & rhs)
{
  return lhs.location == rhs.location &&
    lhs.success == rhs.success &&
    lhs.error_code == rhs.error_code;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robint_msgs::GetLocationResponse_<ContainerAllocator1> & lhs, const ::robint_msgs::GetLocationResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robint_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::GetLocationResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::GetLocationResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::GetLocationResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::GetLocationResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::GetLocationResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::GetLocationResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robint_msgs::GetLocationResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "136cbb2d8f476326dd8ff0090c3d75d3";
  }

  static const char* value(const ::robint_msgs::GetLocationResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x136cbb2d8f476326ULL;
  static const uint64_t static_value2 = 0xdd8ff0090c3d75d3ULL;
};

template<class ContainerAllocator>
struct DataType< ::robint_msgs::GetLocationResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robint_msgs/GetLocationResponse";
  }

  static const char* value(const ::robint_msgs::GetLocationResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robint_msgs::GetLocationResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Location location\n"
"bool success\n"
"uint8 error_code\n"
"\n"
"================================================================================\n"
"MSG: robint_msgs/Location\n"
"time timestamp\n"
"string map_name\n"
"string map_uuid\n"
"string location_uuid\n"
"string type_name\n"
"string group_uuid\n"
"string location_name\n"
"geometry_msgs/Pose2D image_pose\n"
"geometry_msgs/PoseStamped pose\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose2D\n"
"# Deprecated\n"
"# Please use the full 3D pose.\n"
"\n"
"# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.\n"
"\n"
"# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.\n"
"\n"
"\n"
"# This expresses a position and orientation on a 2D manifold.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 theta\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::robint_msgs::GetLocationResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robint_msgs::GetLocationResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.location);
      stream.next(m.success);
      stream.next(m.error_code);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetLocationResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robint_msgs::GetLocationResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robint_msgs::GetLocationResponse_<ContainerAllocator>& v)
  {
    s << indent << "location: ";
    s << std::endl;
    Printer< ::robint_msgs::Location_<ContainerAllocator> >::stream(s, indent + "  ", v.location);
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "error_code: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.error_code);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBINT_MSGS_MESSAGE_GETLOCATIONRESPONSE_H
