// Generated by gencpp from file robint_msgs/AddVirtualWallRequest.msg
// DO NOT EDIT!


#ifndef ROBINT_MSGS_MESSAGE_ADDVIRTUALWALLREQUEST_H
#define ROBINT_MSGS_MESSAGE_ADDVIRTUALWALLREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robint_msgs/VirtualWall.h>

namespace robint_msgs
{
template <class ContainerAllocator>
struct AddVirtualWallRequest_
{
  typedef AddVirtualWallRequest_<ContainerAllocator> Type;

  AddVirtualWallRequest_()
    : map_name()
    , wall_mode(0)
    , wall()  {
    }
  AddVirtualWallRequest_(const ContainerAllocator& _alloc)
    : map_name(_alloc)
    , wall_mode(0)
    , wall(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _map_name_type;
  _map_name_type map_name;

   typedef uint8_t _wall_mode_type;
  _wall_mode_type wall_mode;

   typedef  ::robint_msgs::VirtualWall_<ContainerAllocator>  _wall_type;
  _wall_type wall;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(WORLD)
  #undef WORLD
#endif
#if defined(_WIN32) && defined(IMAGE)
  #undef IMAGE
#endif

  enum {
    WORLD = 0u,
    IMAGE = 1u,
  };


  typedef boost::shared_ptr< ::robint_msgs::AddVirtualWallRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robint_msgs::AddVirtualWallRequest_<ContainerAllocator> const> ConstPtr;

}; // struct AddVirtualWallRequest_

typedef ::robint_msgs::AddVirtualWallRequest_<std::allocator<void> > AddVirtualWallRequest;

typedef boost::shared_ptr< ::robint_msgs::AddVirtualWallRequest > AddVirtualWallRequestPtr;
typedef boost::shared_ptr< ::robint_msgs::AddVirtualWallRequest const> AddVirtualWallRequestConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robint_msgs::AddVirtualWallRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robint_msgs::AddVirtualWallRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robint_msgs::AddVirtualWallRequest_<ContainerAllocator1> & lhs, const ::robint_msgs::AddVirtualWallRequest_<ContainerAllocator2> & rhs)
{
  return lhs.map_name == rhs.map_name &&
    lhs.wall_mode == rhs.wall_mode &&
    lhs.wall == rhs.wall;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robint_msgs::AddVirtualWallRequest_<ContainerAllocator1> & lhs, const ::robint_msgs::AddVirtualWallRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robint_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::AddVirtualWallRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::AddVirtualWallRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::AddVirtualWallRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::AddVirtualWallRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::AddVirtualWallRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::AddVirtualWallRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robint_msgs::AddVirtualWallRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c7a0e78602c856c41f91f27d272eb6d5";
  }

  static const char* value(const ::robint_msgs::AddVirtualWallRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc7a0e78602c856c4ULL;
  static const uint64_t static_value2 = 0x1f91f27d272eb6d5ULL;
};

template<class ContainerAllocator>
struct DataType< ::robint_msgs::AddVirtualWallRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robint_msgs/AddVirtualWallRequest";
  }

  static const char* value(const ::robint_msgs::AddVirtualWallRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robint_msgs::AddVirtualWallRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string map_name\n"
"uint8 wall_mode\n"
"uint8 WORLD=0\n"
"uint8 IMAGE=1\n"
"VirtualWall wall\n"
"\n"
"================================================================================\n"
"MSG: robint_msgs/VirtualWall\n"
"string id\n"
"uint8 type\n"
"uint8 Line = 0\n"
"uint8 Rectangle = 1\n"
"uint8 Polygon = 2\n"
"string vw_uuid\n"
"string vw_name\n"
"string map_uuid\n"
"string group_uuid\n"
"geometry_msgs/Point[] points \n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::robint_msgs::AddVirtualWallRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robint_msgs::AddVirtualWallRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.map_name);
      stream.next(m.wall_mode);
      stream.next(m.wall);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AddVirtualWallRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robint_msgs::AddVirtualWallRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robint_msgs::AddVirtualWallRequest_<ContainerAllocator>& v)
  {
    s << indent << "map_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.map_name);
    s << indent << "wall_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wall_mode);
    s << indent << "wall: ";
    s << std::endl;
    Printer< ::robint_msgs::VirtualWall_<ContainerAllocator> >::stream(s, indent + "  ", v.wall);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBINT_MSGS_MESSAGE_ADDVIRTUALWALLREQUEST_H
