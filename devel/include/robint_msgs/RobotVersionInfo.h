// Generated by gencpp from file robint_msgs/RobotVersionInfo.msg
// DO NOT EDIT!


#ifndef ROBINT_MSGS_MESSAGE_ROBOTVERSIONINFO_H
#define ROBINT_MSGS_MESSAGE_ROBOTVERSIONINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robint_msgs
{
template <class ContainerAllocator>
struct RobotVersionInfo_
{
  typedef RobotVersionInfo_<ContainerAllocator> Type;

  RobotVersionInfo_()
    : robot_id()
    , firmware_version()  {
    }
  RobotVersionInfo_(const ContainerAllocator& _alloc)
    : robot_id(_alloc)
    , firmware_version(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _robot_id_type;
  _robot_id_type robot_id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _firmware_version_type;
  _firmware_version_type firmware_version;





  typedef boost::shared_ptr< ::robint_msgs::RobotVersionInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robint_msgs::RobotVersionInfo_<ContainerAllocator> const> ConstPtr;

}; // struct RobotVersionInfo_

typedef ::robint_msgs::RobotVersionInfo_<std::allocator<void> > RobotVersionInfo;

typedef boost::shared_ptr< ::robint_msgs::RobotVersionInfo > RobotVersionInfoPtr;
typedef boost::shared_ptr< ::robint_msgs::RobotVersionInfo const> RobotVersionInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robint_msgs::RobotVersionInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robint_msgs::RobotVersionInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robint_msgs::RobotVersionInfo_<ContainerAllocator1> & lhs, const ::robint_msgs::RobotVersionInfo_<ContainerAllocator2> & rhs)
{
  return lhs.robot_id == rhs.robot_id &&
    lhs.firmware_version == rhs.firmware_version;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robint_msgs::RobotVersionInfo_<ContainerAllocator1> & lhs, const ::robint_msgs::RobotVersionInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robint_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::RobotVersionInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::RobotVersionInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::RobotVersionInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::RobotVersionInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::RobotVersionInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::RobotVersionInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robint_msgs::RobotVersionInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3dc3f7c1863c6b92ab7be18be30122c2";
  }

  static const char* value(const ::robint_msgs::RobotVersionInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3dc3f7c1863c6b92ULL;
  static const uint64_t static_value2 = 0xab7be18be30122c2ULL;
};

template<class ContainerAllocator>
struct DataType< ::robint_msgs::RobotVersionInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robint_msgs/RobotVersionInfo";
  }

  static const char* value(const ::robint_msgs::RobotVersionInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robint_msgs::RobotVersionInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string robot_id\n"
"string firmware_version\n"
;
  }

  static const char* value(const ::robint_msgs::RobotVersionInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robint_msgs::RobotVersionInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robot_id);
      stream.next(m.firmware_version);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotVersionInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robint_msgs::RobotVersionInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robint_msgs::RobotVersionInfo_<ContainerAllocator>& v)
  {
    s << indent << "robot_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.robot_id);
    s << indent << "firmware_version: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.firmware_version);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBINT_MSGS_MESSAGE_ROBOTVERSIONINFO_H
