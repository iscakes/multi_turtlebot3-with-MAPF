// Generated by gencpp from file robint_msgs/UndockCommandRequest.msg
// DO NOT EDIT!


#ifndef ROBINT_MSGS_MESSAGE_UNDOCKCOMMANDREQUEST_H
#define ROBINT_MSGS_MESSAGE_UNDOCKCOMMANDREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robint_msgs
{
template <class ContainerAllocator>
struct UndockCommandRequest_
{
  typedef UndockCommandRequest_<ContainerAllocator> Type;

  UndockCommandRequest_()
    : command(0)  {
    }
  UndockCommandRequest_(const ContainerAllocator& _alloc)
    : command(0)  {
  (void)_alloc;
    }



   typedef uint8_t _command_type;
  _command_type command;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(START)
  #undef START
#endif
#if defined(_WIN32) && defined(PAUSE)
  #undef PAUSE
#endif
#if defined(_WIN32) && defined(CONTINUE)
  #undef CONTINUE
#endif
#if defined(_WIN32) && defined(STOP)
  #undef STOP
#endif

  enum {
    START = 0u,
    PAUSE = 1u,
    CONTINUE = 2u,
    STOP = 3u,
  };


  typedef boost::shared_ptr< ::robint_msgs::UndockCommandRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robint_msgs::UndockCommandRequest_<ContainerAllocator> const> ConstPtr;

}; // struct UndockCommandRequest_

typedef ::robint_msgs::UndockCommandRequest_<std::allocator<void> > UndockCommandRequest;

typedef boost::shared_ptr< ::robint_msgs::UndockCommandRequest > UndockCommandRequestPtr;
typedef boost::shared_ptr< ::robint_msgs::UndockCommandRequest const> UndockCommandRequestConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robint_msgs::UndockCommandRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robint_msgs::UndockCommandRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robint_msgs::UndockCommandRequest_<ContainerAllocator1> & lhs, const ::robint_msgs::UndockCommandRequest_<ContainerAllocator2> & rhs)
{
  return lhs.command == rhs.command;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robint_msgs::UndockCommandRequest_<ContainerAllocator1> & lhs, const ::robint_msgs::UndockCommandRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robint_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::UndockCommandRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::UndockCommandRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::UndockCommandRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::UndockCommandRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::UndockCommandRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::UndockCommandRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robint_msgs::UndockCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bf86d789b755102b81434fec6da25cbc";
  }

  static const char* value(const ::robint_msgs::UndockCommandRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbf86d789b755102bULL;
  static const uint64_t static_value2 = 0x81434fec6da25cbcULL;
};

template<class ContainerAllocator>
struct DataType< ::robint_msgs::UndockCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robint_msgs/UndockCommandRequest";
  }

  static const char* value(const ::robint_msgs::UndockCommandRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robint_msgs::UndockCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 command       # 'Start', 'Pause', 'Continue', 'Stop'\n"
"uint8 START=0\n"
"uint8 PAUSE=1\n"
"uint8 CONTINUE=2\n"
"uint8 STOP=3\n"
;
  }

  static const char* value(const ::robint_msgs::UndockCommandRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robint_msgs::UndockCommandRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.command);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UndockCommandRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robint_msgs::UndockCommandRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robint_msgs::UndockCommandRequest_<ContainerAllocator>& v)
  {
    s << indent << "command: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.command);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBINT_MSGS_MESSAGE_UNDOCKCOMMANDREQUEST_H
