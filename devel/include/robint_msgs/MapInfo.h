// Generated by gencpp from file robint_msgs/MapInfo.msg
// DO NOT EDIT!


#ifndef ROBINT_MSGS_MESSAGE_MAPINFO_H
#define ROBINT_MSGS_MESSAGE_MAPINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robint_msgs
{
template <class ContainerAllocator>
struct MapInfo_
{
  typedef MapInfo_<ContainerAllocator> Type;

  MapInfo_()
    : uuid()
    , name()
    , floor_id()
    , building_id()
    , time()
    , origin()
    , width(0)
    , height(0)  {
    }
  MapInfo_(const ContainerAllocator& _alloc)
    : uuid(_alloc)
    , name(_alloc)
    , floor_id(_alloc)
    , building_id(_alloc)
    , time(_alloc)
    , origin(_alloc)
    , width(0)
    , height(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _uuid_type;
  _uuid_type uuid;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _floor_id_type;
  _floor_id_type floor_id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _building_id_type;
  _building_id_type building_id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _time_type;
  _time_type time;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _origin_type;
  _origin_type origin;

   typedef uint32_t _width_type;
  _width_type width;

   typedef uint32_t _height_type;
  _height_type height;





  typedef boost::shared_ptr< ::robint_msgs::MapInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robint_msgs::MapInfo_<ContainerAllocator> const> ConstPtr;

}; // struct MapInfo_

typedef ::robint_msgs::MapInfo_<std::allocator<void> > MapInfo;

typedef boost::shared_ptr< ::robint_msgs::MapInfo > MapInfoPtr;
typedef boost::shared_ptr< ::robint_msgs::MapInfo const> MapInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robint_msgs::MapInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robint_msgs::MapInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robint_msgs::MapInfo_<ContainerAllocator1> & lhs, const ::robint_msgs::MapInfo_<ContainerAllocator2> & rhs)
{
  return lhs.uuid == rhs.uuid &&
    lhs.name == rhs.name &&
    lhs.floor_id == rhs.floor_id &&
    lhs.building_id == rhs.building_id &&
    lhs.time == rhs.time &&
    lhs.origin == rhs.origin &&
    lhs.width == rhs.width &&
    lhs.height == rhs.height;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robint_msgs::MapInfo_<ContainerAllocator1> & lhs, const ::robint_msgs::MapInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robint_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::MapInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::MapInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::MapInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::MapInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::MapInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::MapInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robint_msgs::MapInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "25eff9fc3c56759ad869d6ff263f07dc";
  }

  static const char* value(const ::robint_msgs::MapInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x25eff9fc3c56759aULL;
  static const uint64_t static_value2 = 0xd869d6ff263f07dcULL;
};

template<class ContainerAllocator>
struct DataType< ::robint_msgs::MapInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robint_msgs/MapInfo";
  }

  static const char* value(const ::robint_msgs::MapInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robint_msgs::MapInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string uuid\n"
"string name\n"
"string floor_id\n"
"string building_id\n"
"string time\n"
"float32[] origin\n"
"uint32 width\n"
"uint32 height\n"
;
  }

  static const char* value(const ::robint_msgs::MapInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robint_msgs::MapInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.uuid);
      stream.next(m.name);
      stream.next(m.floor_id);
      stream.next(m.building_id);
      stream.next(m.time);
      stream.next(m.origin);
      stream.next(m.width);
      stream.next(m.height);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MapInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robint_msgs::MapInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robint_msgs::MapInfo_<ContainerAllocator>& v)
  {
    s << indent << "uuid: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.uuid);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "floor_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.floor_id);
    s << indent << "building_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.building_id);
    s << indent << "time: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.time);
    s << indent << "origin[]" << std::endl;
    for (size_t i = 0; i < v.origin.size(); ++i)
    {
      s << indent << "  origin[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.origin[i]);
    }
    s << indent << "width: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.height);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBINT_MSGS_MESSAGE_MAPINFO_H
