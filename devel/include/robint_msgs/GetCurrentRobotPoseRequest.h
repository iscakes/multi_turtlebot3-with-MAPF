// Generated by gencpp from file robint_msgs/GetCurrentRobotPoseRequest.msg
// DO NOT EDIT!


#ifndef ROBINT_MSGS_MESSAGE_GETCURRENTROBOTPOSEREQUEST_H
#define ROBINT_MSGS_MESSAGE_GETCURRENTROBOTPOSEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robint_msgs
{
template <class ContainerAllocator>
struct GetCurrentRobotPoseRequest_
{
  typedef GetCurrentRobotPoseRequest_<ContainerAllocator> Type;

  GetCurrentRobotPoseRequest_()
    : target_frame()
    , robot_frame()  {
    }
  GetCurrentRobotPoseRequest_(const ContainerAllocator& _alloc)
    : target_frame(_alloc)
    , robot_frame(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _target_frame_type;
  _target_frame_type target_frame;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _robot_frame_type;
  _robot_frame_type robot_frame;





  typedef boost::shared_ptr< ::robint_msgs::GetCurrentRobotPoseRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robint_msgs::GetCurrentRobotPoseRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetCurrentRobotPoseRequest_

typedef ::robint_msgs::GetCurrentRobotPoseRequest_<std::allocator<void> > GetCurrentRobotPoseRequest;

typedef boost::shared_ptr< ::robint_msgs::GetCurrentRobotPoseRequest > GetCurrentRobotPoseRequestPtr;
typedef boost::shared_ptr< ::robint_msgs::GetCurrentRobotPoseRequest const> GetCurrentRobotPoseRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robint_msgs::GetCurrentRobotPoseRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robint_msgs::GetCurrentRobotPoseRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robint_msgs::GetCurrentRobotPoseRequest_<ContainerAllocator1> & lhs, const ::robint_msgs::GetCurrentRobotPoseRequest_<ContainerAllocator2> & rhs)
{
  return lhs.target_frame == rhs.target_frame &&
    lhs.robot_frame == rhs.robot_frame;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robint_msgs::GetCurrentRobotPoseRequest_<ContainerAllocator1> & lhs, const ::robint_msgs::GetCurrentRobotPoseRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robint_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::GetCurrentRobotPoseRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::GetCurrentRobotPoseRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::GetCurrentRobotPoseRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::GetCurrentRobotPoseRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::GetCurrentRobotPoseRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::GetCurrentRobotPoseRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robint_msgs::GetCurrentRobotPoseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "53c82584d55af7ec3d8df98300068c02";
  }

  static const char* value(const ::robint_msgs::GetCurrentRobotPoseRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x53c82584d55af7ecULL;
  static const uint64_t static_value2 = 0x3d8df98300068c02ULL;
};

template<class ContainerAllocator>
struct DataType< ::robint_msgs::GetCurrentRobotPoseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robint_msgs/GetCurrentRobotPoseRequest";
  }

  static const char* value(const ::robint_msgs::GetCurrentRobotPoseRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robint_msgs::GetCurrentRobotPoseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string target_frame\n"
"string robot_frame\n"
;
  }

  static const char* value(const ::robint_msgs::GetCurrentRobotPoseRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robint_msgs::GetCurrentRobotPoseRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.target_frame);
      stream.next(m.robot_frame);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetCurrentRobotPoseRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robint_msgs::GetCurrentRobotPoseRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robint_msgs::GetCurrentRobotPoseRequest_<ContainerAllocator>& v)
  {
    s << indent << "target_frame: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.target_frame);
    s << indent << "robot_frame: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.robot_frame);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBINT_MSGS_MESSAGE_GETCURRENTROBOTPOSEREQUEST_H
