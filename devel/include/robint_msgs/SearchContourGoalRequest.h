// Generated by gencpp from file robint_msgs/SearchContourGoalRequest.msg
// DO NOT EDIT!


#ifndef ROBINT_MSGS_MESSAGE_SEARCHCONTOURGOALREQUEST_H
#define ROBINT_MSGS_MESSAGE_SEARCHCONTOURGOALREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robint_msgs/PathWithPoint.h>

namespace robint_msgs
{
template <class ContainerAllocator>
struct SearchContourGoalRequest_
{
  typedef SearchContourGoalRequest_<ContainerAllocator> Type;

  SearchContourGoalRequest_()
    : contour()  {
    }
  SearchContourGoalRequest_(const ContainerAllocator& _alloc)
    : contour(_alloc)  {
  (void)_alloc;
    }



   typedef  ::robint_msgs::PathWithPoint_<ContainerAllocator>  _contour_type;
  _contour_type contour;





  typedef boost::shared_ptr< ::robint_msgs::SearchContourGoalRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robint_msgs::SearchContourGoalRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SearchContourGoalRequest_

typedef ::robint_msgs::SearchContourGoalRequest_<std::allocator<void> > SearchContourGoalRequest;

typedef boost::shared_ptr< ::robint_msgs::SearchContourGoalRequest > SearchContourGoalRequestPtr;
typedef boost::shared_ptr< ::robint_msgs::SearchContourGoalRequest const> SearchContourGoalRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robint_msgs::SearchContourGoalRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robint_msgs::SearchContourGoalRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robint_msgs::SearchContourGoalRequest_<ContainerAllocator1> & lhs, const ::robint_msgs::SearchContourGoalRequest_<ContainerAllocator2> & rhs)
{
  return lhs.contour == rhs.contour;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robint_msgs::SearchContourGoalRequest_<ContainerAllocator1> & lhs, const ::robint_msgs::SearchContourGoalRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robint_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::SearchContourGoalRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::SearchContourGoalRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::SearchContourGoalRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::SearchContourGoalRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::SearchContourGoalRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::SearchContourGoalRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robint_msgs::SearchContourGoalRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4222eabda1f0ef51c003c52a3744b624";
  }

  static const char* value(const ::robint_msgs::SearchContourGoalRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4222eabda1f0ef51ULL;
  static const uint64_t static_value2 = 0xc003c52a3744b624ULL;
};

template<class ContainerAllocator>
struct DataType< ::robint_msgs::SearchContourGoalRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robint_msgs/SearchContourGoalRequest";
  }

  static const char* value(const ::robint_msgs::SearchContourGoalRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robint_msgs::SearchContourGoalRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "PathWithPoint contour\n"
"\n"
"================================================================================\n"
"MSG: robint_msgs/PathWithPoint\n"
"uint32 id\n"
"string type\n"
"geometry_msgs/Point[] points\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::robint_msgs::SearchContourGoalRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robint_msgs::SearchContourGoalRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.contour);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SearchContourGoalRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robint_msgs::SearchContourGoalRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robint_msgs::SearchContourGoalRequest_<ContainerAllocator>& v)
  {
    s << indent << "contour: ";
    s << std::endl;
    Printer< ::robint_msgs::PathWithPoint_<ContainerAllocator> >::stream(s, indent + "  ", v.contour);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBINT_MSGS_MESSAGE_SEARCHCONTOURGOALREQUEST_H
