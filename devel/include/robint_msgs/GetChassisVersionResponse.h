// Generated by gencpp from file robint_msgs/GetChassisVersionResponse.msg
// DO NOT EDIT!


#ifndef ROBINT_MSGS_MESSAGE_GETCHASSISVERSIONRESPONSE_H
#define ROBINT_MSGS_MESSAGE_GETCHASSISVERSIONRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robint_msgs
{
template <class ContainerAllocator>
struct GetChassisVersionResponse_
{
  typedef GetChassisVersionResponse_<ContainerAllocator> Type;

  GetChassisVersionResponse_()
    : chassis_hardware_version()
    , driver_hardware_version()
    , chassis_software_version()
    , driver_software_version()
    , success(false)
    , error_code(0)  {
    }
  GetChassisVersionResponse_(const ContainerAllocator& _alloc)
    : chassis_hardware_version(_alloc)
    , driver_hardware_version(_alloc)
    , chassis_software_version(_alloc)
    , driver_software_version(_alloc)
    , success(false)
    , error_code(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _chassis_hardware_version_type;
  _chassis_hardware_version_type chassis_hardware_version;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _driver_hardware_version_type;
  _driver_hardware_version_type driver_hardware_version;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _chassis_software_version_type;
  _chassis_software_version_type chassis_software_version;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _driver_software_version_type;
  _driver_software_version_type driver_software_version;

   typedef uint8_t _success_type;
  _success_type success;

   typedef uint8_t _error_code_type;
  _error_code_type error_code;





  typedef boost::shared_ptr< ::robint_msgs::GetChassisVersionResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robint_msgs::GetChassisVersionResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetChassisVersionResponse_

typedef ::robint_msgs::GetChassisVersionResponse_<std::allocator<void> > GetChassisVersionResponse;

typedef boost::shared_ptr< ::robint_msgs::GetChassisVersionResponse > GetChassisVersionResponsePtr;
typedef boost::shared_ptr< ::robint_msgs::GetChassisVersionResponse const> GetChassisVersionResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robint_msgs::GetChassisVersionResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robint_msgs::GetChassisVersionResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robint_msgs::GetChassisVersionResponse_<ContainerAllocator1> & lhs, const ::robint_msgs::GetChassisVersionResponse_<ContainerAllocator2> & rhs)
{
  return lhs.chassis_hardware_version == rhs.chassis_hardware_version &&
    lhs.driver_hardware_version == rhs.driver_hardware_version &&
    lhs.chassis_software_version == rhs.chassis_software_version &&
    lhs.driver_software_version == rhs.driver_software_version &&
    lhs.success == rhs.success &&
    lhs.error_code == rhs.error_code;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robint_msgs::GetChassisVersionResponse_<ContainerAllocator1> & lhs, const ::robint_msgs::GetChassisVersionResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robint_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::GetChassisVersionResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::GetChassisVersionResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::GetChassisVersionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::GetChassisVersionResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::GetChassisVersionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::GetChassisVersionResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robint_msgs::GetChassisVersionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3451500d4b57390d32336828695f590f";
  }

  static const char* value(const ::robint_msgs::GetChassisVersionResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3451500d4b57390dULL;
  static const uint64_t static_value2 = 0x32336828695f590fULL;
};

template<class ContainerAllocator>
struct DataType< ::robint_msgs::GetChassisVersionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robint_msgs/GetChassisVersionResponse";
  }

  static const char* value(const ::robint_msgs::GetChassisVersionResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robint_msgs::GetChassisVersionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string chassis_hardware_version\n"
"string driver_hardware_version\n"
"string chassis_software_version\n"
"string driver_software_version\n"
"bool success\n"
"uint8 error_code\n"
;
  }

  static const char* value(const ::robint_msgs::GetChassisVersionResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robint_msgs::GetChassisVersionResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.chassis_hardware_version);
      stream.next(m.driver_hardware_version);
      stream.next(m.chassis_software_version);
      stream.next(m.driver_software_version);
      stream.next(m.success);
      stream.next(m.error_code);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetChassisVersionResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robint_msgs::GetChassisVersionResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robint_msgs::GetChassisVersionResponse_<ContainerAllocator>& v)
  {
    s << indent << "chassis_hardware_version: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.chassis_hardware_version);
    s << indent << "driver_hardware_version: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.driver_hardware_version);
    s << indent << "chassis_software_version: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.chassis_software_version);
    s << indent << "driver_software_version: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.driver_software_version);
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "error_code: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.error_code);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBINT_MSGS_MESSAGE_GETCHASSISVERSIONRESPONSE_H
