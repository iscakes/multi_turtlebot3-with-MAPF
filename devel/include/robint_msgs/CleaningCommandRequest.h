// Generated by gencpp from file robint_msgs/CleaningCommandRequest.msg
// DO NOT EDIT!


#ifndef ROBINT_MSGS_MESSAGE_CLEANINGCOMMANDREQUEST_H
#define ROBINT_MSGS_MESSAGE_CLEANINGCOMMANDREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseStamped.h>

namespace robint_msgs
{
template <class ContainerAllocator>
struct CleaningCommandRequest_
{
  typedef CleaningCommandRequest_<ContainerAllocator> Type;

  CleaningCommandRequest_()
    : command(0)
    , cleaning_area_uuid()
    , resume_unfinished_task(false)
    , save_cleaning_process(false)
    , enable_track_contour(false)
    , loop_count(0)
    , track_back_dist(0.0)
    , enable_break_point(false)
    , break_robot_pose()
    , break_subtask()
    , break_loop_index(0)  {
    }
  CleaningCommandRequest_(const ContainerAllocator& _alloc)
    : command(0)
    , cleaning_area_uuid(_alloc)
    , resume_unfinished_task(false)
    , save_cleaning_process(false)
    , enable_track_contour(false)
    , loop_count(0)
    , track_back_dist(0.0)
    , enable_break_point(false)
    , break_robot_pose(_alloc)
    , break_subtask(_alloc)
    , break_loop_index(0)  {
  (void)_alloc;
    }



   typedef uint8_t _command_type;
  _command_type command;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _cleaning_area_uuid_type;
  _cleaning_area_uuid_type cleaning_area_uuid;

   typedef uint8_t _resume_unfinished_task_type;
  _resume_unfinished_task_type resume_unfinished_task;

   typedef uint8_t _save_cleaning_process_type;
  _save_cleaning_process_type save_cleaning_process;

   typedef uint8_t _enable_track_contour_type;
  _enable_track_contour_type enable_track_contour;

   typedef int32_t _loop_count_type;
  _loop_count_type loop_count;

   typedef double _track_back_dist_type;
  _track_back_dist_type track_back_dist;

   typedef uint8_t _enable_break_point_type;
  _enable_break_point_type enable_break_point;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _break_robot_pose_type;
  _break_robot_pose_type break_robot_pose;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _break_subtask_type;
  _break_subtask_type break_subtask;

   typedef int32_t _break_loop_index_type;
  _break_loop_index_type break_loop_index;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(START)
  #undef START
#endif
#if defined(_WIN32) && defined(PAUSE)
  #undef PAUSE
#endif
#if defined(_WIN32) && defined(RESUME)
  #undef RESUME
#endif
#if defined(_WIN32) && defined(STOP)
  #undef STOP
#endif

  enum {
    START = 0u,
    PAUSE = 1u,
    RESUME = 2u,
    STOP = 3u,
  };


  typedef boost::shared_ptr< ::robint_msgs::CleaningCommandRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robint_msgs::CleaningCommandRequest_<ContainerAllocator> const> ConstPtr;

}; // struct CleaningCommandRequest_

typedef ::robint_msgs::CleaningCommandRequest_<std::allocator<void> > CleaningCommandRequest;

typedef boost::shared_ptr< ::robint_msgs::CleaningCommandRequest > CleaningCommandRequestPtr;
typedef boost::shared_ptr< ::robint_msgs::CleaningCommandRequest const> CleaningCommandRequestConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robint_msgs::CleaningCommandRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robint_msgs::CleaningCommandRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robint_msgs::CleaningCommandRequest_<ContainerAllocator1> & lhs, const ::robint_msgs::CleaningCommandRequest_<ContainerAllocator2> & rhs)
{
  return lhs.command == rhs.command &&
    lhs.cleaning_area_uuid == rhs.cleaning_area_uuid &&
    lhs.resume_unfinished_task == rhs.resume_unfinished_task &&
    lhs.save_cleaning_process == rhs.save_cleaning_process &&
    lhs.enable_track_contour == rhs.enable_track_contour &&
    lhs.loop_count == rhs.loop_count &&
    lhs.track_back_dist == rhs.track_back_dist &&
    lhs.enable_break_point == rhs.enable_break_point &&
    lhs.break_robot_pose == rhs.break_robot_pose &&
    lhs.break_subtask == rhs.break_subtask &&
    lhs.break_loop_index == rhs.break_loop_index;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robint_msgs::CleaningCommandRequest_<ContainerAllocator1> & lhs, const ::robint_msgs::CleaningCommandRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robint_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::CleaningCommandRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::CleaningCommandRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::CleaningCommandRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::CleaningCommandRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::CleaningCommandRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::CleaningCommandRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robint_msgs::CleaningCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e374fa9e40a69c7a806539d57179d209";
  }

  static const char* value(const ::robint_msgs::CleaningCommandRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe374fa9e40a69c7aULL;
  static const uint64_t static_value2 = 0x806539d57179d209ULL;
};

template<class ContainerAllocator>
struct DataType< ::robint_msgs::CleaningCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robint_msgs/CleaningCommandRequest";
  }

  static const char* value(const ::robint_msgs::CleaningCommandRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robint_msgs::CleaningCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 command       # 'Start', 'Pause', 'Resume', 'Stop'\n"
"uint8 START=0\n"
"uint8 PAUSE=1\n"
"uint8 RESUME=2\n"
"uint8 STOP=3\n"
"string cleaning_area_uuid\n"
"bool resume_unfinished_task\n"
"bool save_cleaning_process\n"
"bool enable_track_contour\n"
"int32 loop_count\n"
"float64 track_back_dist\n"
"bool enable_break_point\n"
"geometry_msgs/PoseStamped break_robot_pose\n"
"string break_subtask\n"
"int32 break_loop_index\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::robint_msgs::CleaningCommandRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robint_msgs::CleaningCommandRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.command);
      stream.next(m.cleaning_area_uuid);
      stream.next(m.resume_unfinished_task);
      stream.next(m.save_cleaning_process);
      stream.next(m.enable_track_contour);
      stream.next(m.loop_count);
      stream.next(m.track_back_dist);
      stream.next(m.enable_break_point);
      stream.next(m.break_robot_pose);
      stream.next(m.break_subtask);
      stream.next(m.break_loop_index);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CleaningCommandRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robint_msgs::CleaningCommandRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robint_msgs::CleaningCommandRequest_<ContainerAllocator>& v)
  {
    s << indent << "command: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.command);
    s << indent << "cleaning_area_uuid: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.cleaning_area_uuid);
    s << indent << "resume_unfinished_task: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.resume_unfinished_task);
    s << indent << "save_cleaning_process: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.save_cleaning_process);
    s << indent << "enable_track_contour: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enable_track_contour);
    s << indent << "loop_count: ";
    Printer<int32_t>::stream(s, indent + "  ", v.loop_count);
    s << indent << "track_back_dist: ";
    Printer<double>::stream(s, indent + "  ", v.track_back_dist);
    s << indent << "enable_break_point: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enable_break_point);
    s << indent << "break_robot_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.break_robot_pose);
    s << indent << "break_subtask: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.break_subtask);
    s << indent << "break_loop_index: ";
    Printer<int32_t>::stream(s, indent + "  ", v.break_loop_index);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBINT_MSGS_MESSAGE_CLEANINGCOMMANDREQUEST_H
