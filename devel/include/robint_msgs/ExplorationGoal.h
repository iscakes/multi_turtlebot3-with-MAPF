// Generated by gencpp from file robint_msgs/ExplorationGoal.msg
// DO NOT EDIT!


#ifndef ROBINT_MSGS_MESSAGE_EXPLORATIONGOAL_H
#define ROBINT_MSGS_MESSAGE_EXPLORATIONGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace robint_msgs
{
template <class ContainerAllocator>
struct ExplorationGoal_
{
  typedef ExplorationGoal_<ContainerAllocator> Type;

  ExplorationGoal_()
    : map_originX(0.0)
    , map_originY(0.0)
    , map_width(0)
    , map_height(0)
    , map_resolution(0.0)
    , points()  {
    }
  ExplorationGoal_(const ContainerAllocator& _alloc)
    : map_originX(0.0)
    , map_originY(0.0)
    , map_width(0)
    , map_height(0)
    , map_resolution(0.0)
    , points(_alloc)  {
  (void)_alloc;
    }



   typedef float _map_originX_type;
  _map_originX_type map_originX;

   typedef float _map_originY_type;
  _map_originY_type map_originY;

   typedef uint32_t _map_width_type;
  _map_width_type map_width;

   typedef uint32_t _map_height_type;
  _map_height_type map_height;

   typedef float _map_resolution_type;
  _map_resolution_type map_resolution;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _points_type;
  _points_type points;





  typedef boost::shared_ptr< ::robint_msgs::ExplorationGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robint_msgs::ExplorationGoal_<ContainerAllocator> const> ConstPtr;

}; // struct ExplorationGoal_

typedef ::robint_msgs::ExplorationGoal_<std::allocator<void> > ExplorationGoal;

typedef boost::shared_ptr< ::robint_msgs::ExplorationGoal > ExplorationGoalPtr;
typedef boost::shared_ptr< ::robint_msgs::ExplorationGoal const> ExplorationGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robint_msgs::ExplorationGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robint_msgs::ExplorationGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robint_msgs::ExplorationGoal_<ContainerAllocator1> & lhs, const ::robint_msgs::ExplorationGoal_<ContainerAllocator2> & rhs)
{
  return lhs.map_originX == rhs.map_originX &&
    lhs.map_originY == rhs.map_originY &&
    lhs.map_width == rhs.map_width &&
    lhs.map_height == rhs.map_height &&
    lhs.map_resolution == rhs.map_resolution &&
    lhs.points == rhs.points;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robint_msgs::ExplorationGoal_<ContainerAllocator1> & lhs, const ::robint_msgs::ExplorationGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robint_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::ExplorationGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::ExplorationGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::ExplorationGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::ExplorationGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::ExplorationGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::ExplorationGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robint_msgs::ExplorationGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e071b18ba3db984910845497c9be477d";
  }

  static const char* value(const ::robint_msgs::ExplorationGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe071b18ba3db9849ULL;
  static const uint64_t static_value2 = 0x10845497c9be477dULL;
};

template<class ContainerAllocator>
struct DataType< ::robint_msgs::ExplorationGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robint_msgs/ExplorationGoal";
  }

  static const char* value(const ::robint_msgs::ExplorationGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robint_msgs::ExplorationGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 map_originX\n"
"float32 map_originY\n"
"uint32 map_width\n"
"uint32 map_height\n"
"float32 map_resolution\n"
"geometry_msgs/Point[] points\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::robint_msgs::ExplorationGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robint_msgs::ExplorationGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.map_originX);
      stream.next(m.map_originY);
      stream.next(m.map_width);
      stream.next(m.map_height);
      stream.next(m.map_resolution);
      stream.next(m.points);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ExplorationGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robint_msgs::ExplorationGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robint_msgs::ExplorationGoal_<ContainerAllocator>& v)
  {
    s << indent << "map_originX: ";
    Printer<float>::stream(s, indent + "  ", v.map_originX);
    s << indent << "map_originY: ";
    Printer<float>::stream(s, indent + "  ", v.map_originY);
    s << indent << "map_width: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.map_width);
    s << indent << "map_height: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.map_height);
    s << indent << "map_resolution: ";
    Printer<float>::stream(s, indent + "  ", v.map_resolution);
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.points[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBINT_MSGS_MESSAGE_EXPLORATIONGOAL_H
