// Generated by gencpp from file robint_msgs/TrackPathGoal.msg
// DO NOT EDIT!


#ifndef ROBINT_MSGS_MESSAGE_TRACKPATHGOAL_H
#define ROBINT_MSGS_MESSAGE_TRACKPATHGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robint_msgs/PathWithPose.h>
#include <robint_msgs/PathWithPoint.h>
#include <geometry_msgs/PoseStamped.h>

namespace robint_msgs
{
template <class ContainerAllocator>
struct TrackPathGoal_
{
  typedef TrackPathGoal_<ContainerAllocator> Type;

  TrackPathGoal_()
    : paths()
    , boundary()
    , mode(0)
    , loop_count(0)
    , track_back_dist(0.0)
    , enable_path_interpolation(false)
    , path_group_uuid()
    , coverage_method()
    , enable_break_point(false)
    , break_robot_pose()
    , break_subtask()
    , break_loop_index(0)  {
    }
  TrackPathGoal_(const ContainerAllocator& _alloc)
    : paths(_alloc)
    , boundary(_alloc)
    , mode(0)
    , loop_count(0)
    , track_back_dist(0.0)
    , enable_path_interpolation(false)
    , path_group_uuid(_alloc)
    , coverage_method(_alloc)
    , enable_break_point(false)
    , break_robot_pose(_alloc)
    , break_subtask(_alloc)
    , break_loop_index(0)  {
  (void)_alloc;
    }



   typedef std::vector< ::robint_msgs::PathWithPose_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::robint_msgs::PathWithPose_<ContainerAllocator> >> _paths_type;
  _paths_type paths;

   typedef  ::robint_msgs::PathWithPoint_<ContainerAllocator>  _boundary_type;
  _boundary_type boundary;

   typedef uint8_t _mode_type;
  _mode_type mode;

   typedef int32_t _loop_count_type;
  _loop_count_type loop_count;

   typedef double _track_back_dist_type;
  _track_back_dist_type track_back_dist;

   typedef uint8_t _enable_path_interpolation_type;
  _enable_path_interpolation_type enable_path_interpolation;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _path_group_uuid_type;
  _path_group_uuid_type path_group_uuid;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _coverage_method_type;
  _coverage_method_type coverage_method;

   typedef uint8_t _enable_break_point_type;
  _enable_break_point_type enable_break_point;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _break_robot_pose_type;
  _break_robot_pose_type break_robot_pose;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _break_subtask_type;
  _break_subtask_type break_subtask;

   typedef int32_t _break_loop_index_type;
  _break_loop_index_type break_loop_index;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(BackAndForth)
  #undef BackAndForth
#endif
#if defined(_WIN32) && defined(Loop)
  #undef Loop
#endif

  enum {
    BackAndForth = 0u,
    Loop = 1u,
  };


  typedef boost::shared_ptr< ::robint_msgs::TrackPathGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robint_msgs::TrackPathGoal_<ContainerAllocator> const> ConstPtr;

}; // struct TrackPathGoal_

typedef ::robint_msgs::TrackPathGoal_<std::allocator<void> > TrackPathGoal;

typedef boost::shared_ptr< ::robint_msgs::TrackPathGoal > TrackPathGoalPtr;
typedef boost::shared_ptr< ::robint_msgs::TrackPathGoal const> TrackPathGoalConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robint_msgs::TrackPathGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robint_msgs::TrackPathGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robint_msgs::TrackPathGoal_<ContainerAllocator1> & lhs, const ::robint_msgs::TrackPathGoal_<ContainerAllocator2> & rhs)
{
  return lhs.paths == rhs.paths &&
    lhs.boundary == rhs.boundary &&
    lhs.mode == rhs.mode &&
    lhs.loop_count == rhs.loop_count &&
    lhs.track_back_dist == rhs.track_back_dist &&
    lhs.enable_path_interpolation == rhs.enable_path_interpolation &&
    lhs.path_group_uuid == rhs.path_group_uuid &&
    lhs.coverage_method == rhs.coverage_method &&
    lhs.enable_break_point == rhs.enable_break_point &&
    lhs.break_robot_pose == rhs.break_robot_pose &&
    lhs.break_subtask == rhs.break_subtask &&
    lhs.break_loop_index == rhs.break_loop_index;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robint_msgs::TrackPathGoal_<ContainerAllocator1> & lhs, const ::robint_msgs::TrackPathGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robint_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::TrackPathGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::TrackPathGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::TrackPathGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::TrackPathGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::TrackPathGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::TrackPathGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robint_msgs::TrackPathGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "61ffb591b1c795b53886c88a6d22f5c4";
  }

  static const char* value(const ::robint_msgs::TrackPathGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x61ffb591b1c795b5ULL;
  static const uint64_t static_value2 = 0x3886c88a6d22f5c4ULL;
};

template<class ContainerAllocator>
struct DataType< ::robint_msgs::TrackPathGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robint_msgs/TrackPathGoal";
  }

  static const char* value(const ::robint_msgs::TrackPathGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robint_msgs::TrackPathGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"PathWithPose[] paths\n"
"PathWithPoint boundary\n"
"uint8 mode\n"
"uint8 BackAndForth=0\n"
"uint8 Loop=1\n"
"int32 loop_count\n"
"float64 track_back_dist\n"
"bool enable_path_interpolation\n"
"string path_group_uuid\n"
"string coverage_method\n"
"bool enable_break_point\n"
"geometry_msgs/PoseStamped break_robot_pose\n"
"string break_subtask\n"
"int32 break_loop_index\n"
"\n"
"================================================================================\n"
"MSG: robint_msgs/PathWithPose\n"
"uint32 id\n"
"string type\n"
"geometry_msgs/PoseStamped[] poses\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: robint_msgs/PathWithPoint\n"
"uint32 id\n"
"string type\n"
"geometry_msgs/Point[] points\n"
;
  }

  static const char* value(const ::robint_msgs::TrackPathGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robint_msgs::TrackPathGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.paths);
      stream.next(m.boundary);
      stream.next(m.mode);
      stream.next(m.loop_count);
      stream.next(m.track_back_dist);
      stream.next(m.enable_path_interpolation);
      stream.next(m.path_group_uuid);
      stream.next(m.coverage_method);
      stream.next(m.enable_break_point);
      stream.next(m.break_robot_pose);
      stream.next(m.break_subtask);
      stream.next(m.break_loop_index);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrackPathGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robint_msgs::TrackPathGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robint_msgs::TrackPathGoal_<ContainerAllocator>& v)
  {
    s << indent << "paths[]" << std::endl;
    for (size_t i = 0; i < v.paths.size(); ++i)
    {
      s << indent << "  paths[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::robint_msgs::PathWithPose_<ContainerAllocator> >::stream(s, indent + "    ", v.paths[i]);
    }
    s << indent << "boundary: ";
    s << std::endl;
    Printer< ::robint_msgs::PathWithPoint_<ContainerAllocator> >::stream(s, indent + "  ", v.boundary);
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
    s << indent << "loop_count: ";
    Printer<int32_t>::stream(s, indent + "  ", v.loop_count);
    s << indent << "track_back_dist: ";
    Printer<double>::stream(s, indent + "  ", v.track_back_dist);
    s << indent << "enable_path_interpolation: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enable_path_interpolation);
    s << indent << "path_group_uuid: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.path_group_uuid);
    s << indent << "coverage_method: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.coverage_method);
    s << indent << "enable_break_point: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enable_break_point);
    s << indent << "break_robot_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.break_robot_pose);
    s << indent << "break_subtask: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.break_subtask);
    s << indent << "break_loop_index: ";
    Printer<int32_t>::stream(s, indent + "  ", v.break_loop_index);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBINT_MSGS_MESSAGE_TRACKPATHGOAL_H
