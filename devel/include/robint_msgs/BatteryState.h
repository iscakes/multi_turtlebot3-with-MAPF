// Generated by gencpp from file robint_msgs/BatteryState.msg
// DO NOT EDIT!


#ifndef ROBINT_MSGS_MESSAGE_BATTERYSTATE_H
#define ROBINT_MSGS_MESSAGE_BATTERYSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robint_msgs
{
template <class ContainerAllocator>
struct BatteryState_
{
  typedef BatteryState_<ContainerAllocator> Type;

  BatteryState_()
    : soc_percent(0.0)
    , voltage_v(0.0)
    , current_a(0.0)
    , temperature_c(0.0)
    , cycle_times(0)
    , error_code(0)
    , is_charging(false)
    , charging_state(false)  {
    }
  BatteryState_(const ContainerAllocator& _alloc)
    : soc_percent(0.0)
    , voltage_v(0.0)
    , current_a(0.0)
    , temperature_c(0.0)
    , cycle_times(0)
    , error_code(0)
    , is_charging(false)
    , charging_state(false)  {
  (void)_alloc;
    }



   typedef float _soc_percent_type;
  _soc_percent_type soc_percent;

   typedef float _voltage_v_type;
  _voltage_v_type voltage_v;

   typedef float _current_a_type;
  _current_a_type current_a;

   typedef float _temperature_c_type;
  _temperature_c_type temperature_c;

   typedef uint32_t _cycle_times_type;
  _cycle_times_type cycle_times;

   typedef uint8_t _error_code_type;
  _error_code_type error_code;

   typedef uint8_t _is_charging_type;
  _is_charging_type is_charging;

   typedef uint8_t _charging_state_type;
  _charging_state_type charging_state;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(UBAT_ERR_NULL)
  #undef UBAT_ERR_NULL
#endif
#if defined(_WIN32) && defined(UBAT_ERR_CHARGER_OVRE_CURRENT)
  #undef UBAT_ERR_CHARGER_OVRE_CURRENT
#endif
#if defined(_WIN32) && defined(UBAT_ERR_DISCHARGE_OVRE_CURRENT)
  #undef UBAT_ERR_DISCHARGE_OVRE_CURRENT
#endif
#if defined(_WIN32) && defined(UBAT_ERR_SHORT_CIRCUIT)
  #undef UBAT_ERR_SHORT_CIRCUIT
#endif
#if defined(_WIN32) && defined(UBAT_ERR_CELL_OPEN_CIRCUIT)
  #undef UBAT_ERR_CELL_OPEN_CIRCUIT
#endif
#if defined(_WIN32) && defined(UBAT_ERR_TEMP_NTC_OPEN_CIRCUIT)
  #undef UBAT_ERR_TEMP_NTC_OPEN_CIRCUIT
#endif
#if defined(_WIN32) && defined(UBAT_ERR_CELL_OVER_VOLTAGEM)
  #undef UBAT_ERR_CELL_OVER_VOLTAGEM
#endif
#if defined(_WIN32) && defined(UBAT_ERR_CELL_UNDER_VOLTAGE)
  #undef UBAT_ERR_CELL_UNDER_VOLTAGE
#endif
#if defined(_WIN32) && defined(UBAT_ERR_ALL_OVER_VOLTAGE)
  #undef UBAT_ERR_ALL_OVER_VOLTAGE
#endif
#if defined(_WIN32) && defined(UBAT_ERR_ALL_UNDER_VOLTAGE)
  #undef UBAT_ERR_ALL_UNDER_VOLTAGE
#endif
#if defined(_WIN32) && defined(UBAT_ERR_CELL_TEMP_OVER_CHARGE_TEMP_UPPER_LIMIT)
  #undef UBAT_ERR_CELL_TEMP_OVER_CHARGE_TEMP_UPPER_LIMIT
#endif
#if defined(_WIN32) && defined(UBAT_ERR_CELL_TEMP_OVER_DISCHARGE_TEMP_UPPER_LIMIT)
  #undef UBAT_ERR_CELL_TEMP_OVER_DISCHARGE_TEMP_UPPER_LIMIT
#endif
#if defined(_WIN32) && defined(UBAT_ERR_CELL_TEMP_UNDER_CHARGE_TEMP_LOWER_LIMIT)
  #undef UBAT_ERR_CELL_TEMP_UNDER_CHARGE_TEMP_LOWER_LIMIT
#endif
#if defined(_WIN32) && defined(UBAT_ERR_CELL_TEMP_UNDER_DISCHARGE_TEMP_lOWER_LIMIT)
  #undef UBAT_ERR_CELL_TEMP_UNDER_DISCHARGE_TEMP_lOWER_LIMIT
#endif
#if defined(_WIN32) && defined(UBAT_ERR_CELL_TEMP_DIFF_OVER_CHARGE_TEMP_UPPER_LIMIT)
  #undef UBAT_ERR_CELL_TEMP_DIFF_OVER_CHARGE_TEMP_UPPER_LIMIT
#endif
#if defined(_WIN32) && defined(UBAT_ERR_CELL_TEMP_DIFF_OVER_DISCHARGE_TEMP_UPPER_LIMIT)
  #undef UBAT_ERR_CELL_TEMP_DIFF_OVER_DISCHARGE_TEMP_UPPER_LIMIT
#endif

  enum {
    UBAT_ERR_NULL = 0u,
    UBAT_ERR_CHARGER_OVRE_CURRENT = 1u,
    UBAT_ERR_DISCHARGE_OVRE_CURRENT = 2u,
    UBAT_ERR_SHORT_CIRCUIT = 3u,
    UBAT_ERR_CELL_OPEN_CIRCUIT = 4u,
    UBAT_ERR_TEMP_NTC_OPEN_CIRCUIT = 5u,
    UBAT_ERR_CELL_OVER_VOLTAGEM = 6u,
    UBAT_ERR_CELL_UNDER_VOLTAGE = 7u,
    UBAT_ERR_ALL_OVER_VOLTAGE = 8u,
    UBAT_ERR_ALL_UNDER_VOLTAGE = 9u,
    UBAT_ERR_CELL_TEMP_OVER_CHARGE_TEMP_UPPER_LIMIT = 10u,
    UBAT_ERR_CELL_TEMP_OVER_DISCHARGE_TEMP_UPPER_LIMIT = 11u,
    UBAT_ERR_CELL_TEMP_UNDER_CHARGE_TEMP_LOWER_LIMIT = 12u,
    UBAT_ERR_CELL_TEMP_UNDER_DISCHARGE_TEMP_lOWER_LIMIT = 13u,
    UBAT_ERR_CELL_TEMP_DIFF_OVER_CHARGE_TEMP_UPPER_LIMIT = 14u,
    UBAT_ERR_CELL_TEMP_DIFF_OVER_DISCHARGE_TEMP_UPPER_LIMIT = 15u,
  };


  typedef boost::shared_ptr< ::robint_msgs::BatteryState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robint_msgs::BatteryState_<ContainerAllocator> const> ConstPtr;

}; // struct BatteryState_

typedef ::robint_msgs::BatteryState_<std::allocator<void> > BatteryState;

typedef boost::shared_ptr< ::robint_msgs::BatteryState > BatteryStatePtr;
typedef boost::shared_ptr< ::robint_msgs::BatteryState const> BatteryStateConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robint_msgs::BatteryState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robint_msgs::BatteryState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robint_msgs::BatteryState_<ContainerAllocator1> & lhs, const ::robint_msgs::BatteryState_<ContainerAllocator2> & rhs)
{
  return lhs.soc_percent == rhs.soc_percent &&
    lhs.voltage_v == rhs.voltage_v &&
    lhs.current_a == rhs.current_a &&
    lhs.temperature_c == rhs.temperature_c &&
    lhs.cycle_times == rhs.cycle_times &&
    lhs.error_code == rhs.error_code &&
    lhs.is_charging == rhs.is_charging &&
    lhs.charging_state == rhs.charging_state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robint_msgs::BatteryState_<ContainerAllocator1> & lhs, const ::robint_msgs::BatteryState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robint_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::BatteryState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robint_msgs::BatteryState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::BatteryState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robint_msgs::BatteryState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::BatteryState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robint_msgs::BatteryState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robint_msgs::BatteryState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cabd16a824b1a6ff2b4a4038d822019f";
  }

  static const char* value(const ::robint_msgs::BatteryState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcabd16a824b1a6ffULL;
  static const uint64_t static_value2 = 0x2b4a4038d822019fULL;
};

template<class ContainerAllocator>
struct DataType< ::robint_msgs::BatteryState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robint_msgs/BatteryState";
  }

  static const char* value(const ::robint_msgs::BatteryState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robint_msgs::BatteryState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#battery error code\n"
"uint8 UBAT_ERR_NULL = 0\n"
"uint8 UBAT_ERR_CHARGER_OVRE_CURRENT = 1\n"
"uint8 UBAT_ERR_DISCHARGE_OVRE_CURRENT = 2\n"
"uint8 UBAT_ERR_SHORT_CIRCUIT = 3\n"
"uint8 UBAT_ERR_CELL_OPEN_CIRCUIT = 4\n"
"uint8 UBAT_ERR_TEMP_NTC_OPEN_CIRCUIT = 5\n"
"uint8 UBAT_ERR_CELL_OVER_VOLTAGEM = 6\n"
"uint8 UBAT_ERR_CELL_UNDER_VOLTAGE = 7\n"
"uint8 UBAT_ERR_ALL_OVER_VOLTAGE = 8\n"
"uint8 UBAT_ERR_ALL_UNDER_VOLTAGE = 9\n"
"uint8 UBAT_ERR_CELL_TEMP_OVER_CHARGE_TEMP_UPPER_LIMIT = 10\n"
"uint8 UBAT_ERR_CELL_TEMP_OVER_DISCHARGE_TEMP_UPPER_LIMIT = 11\n"
"uint8 UBAT_ERR_CELL_TEMP_UNDER_CHARGE_TEMP_LOWER_LIMIT = 12\n"
"uint8 UBAT_ERR_CELL_TEMP_UNDER_DISCHARGE_TEMP_lOWER_LIMIT = 13\n"
"uint8 UBAT_ERR_CELL_TEMP_DIFF_OVER_CHARGE_TEMP_UPPER_LIMIT = 14\n"
"uint8 UBAT_ERR_CELL_TEMP_DIFF_OVER_DISCHARGE_TEMP_UPPER_LIMIT = 15\n"
"\n"
"float32 soc_percent       #/* 电量, [0-100],小于20%提示充电,小于10%报警, 小于5%提示即将自动关机 */\n"
"float32 voltage_v         #/* 电压, 伏特 */\n"
"float32 current_a         #/* 电流, 安培: 负数表示电池向外供电, 正数表示电池被充电 */\n"
"float32 temperature_c     #/* 温度, 摄氏度 */\n"
"uint32 cycle_times    #/* 充电循环次数 */\n"
"uint8 error_code        #/* 错误编码 */\n"
"bool is_charging        #/* 是否充电中 */\n"
"bool charging_state     #/*新的充电参数：用来判断是否入桩成功*/\n"
;
  }

  static const char* value(const ::robint_msgs::BatteryState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robint_msgs::BatteryState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.soc_percent);
      stream.next(m.voltage_v);
      stream.next(m.current_a);
      stream.next(m.temperature_c);
      stream.next(m.cycle_times);
      stream.next(m.error_code);
      stream.next(m.is_charging);
      stream.next(m.charging_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BatteryState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robint_msgs::BatteryState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robint_msgs::BatteryState_<ContainerAllocator>& v)
  {
    s << indent << "soc_percent: ";
    Printer<float>::stream(s, indent + "  ", v.soc_percent);
    s << indent << "voltage_v: ";
    Printer<float>::stream(s, indent + "  ", v.voltage_v);
    s << indent << "current_a: ";
    Printer<float>::stream(s, indent + "  ", v.current_a);
    s << indent << "temperature_c: ";
    Printer<float>::stream(s, indent + "  ", v.temperature_c);
    s << indent << "cycle_times: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.cycle_times);
    s << indent << "error_code: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.error_code);
    s << indent << "is_charging: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_charging);
    s << indent << "charging_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.charging_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBINT_MSGS_MESSAGE_BATTERYSTATE_H
