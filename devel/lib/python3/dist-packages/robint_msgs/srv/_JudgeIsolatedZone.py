# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robint_msgs/JudgeIsolatedZoneRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import geometry_msgs.msg
import robint_msgs.msg
import std_msgs.msg

class JudgeIsolatedZoneRequest(genpy.Message):
  _md5sum = "7145f76982895edcf851efb5567d6035"
  _type = "robint_msgs/JudgeIsolatedZoneRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """NavigationTaskInfo task_info
uint8 command       # 'Start', 'Pause', 'Continue', 'Stop'
uint8 START=0
uint8 PAUSE=1
uint8 CONTINUE=2
uint8 STOP=3

================================================================================
MSG: robint_msgs/NavigationTaskInfo
string current_map_uuid
string elevator_building_uuid
string current_floor_id
string target_map_uuid
string target_floor_id
string target_loc_uuid
string target_loc_group_uuid
string enter_elevator_loc_uuid
string current_elevator_interior_loc_uuid
string target_elevator_interior_loc_uuid
string elevator_wait_loc_uuid
string current_exit_elevator_loc_uuid
string target_exit_elevator_loc_uuid
geometry_msgs/PoseStamped dock_anchor_pose
GateInfo[] current_floor_gates
GateInfo[] target_floor_gates
IsolatedZone[] current_floor_isolated_zones
IsolatedZone[] target_floor_isolated_zones
================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: robint_msgs/GateInfo
string gate_uuid
string gate_name
Location enter_loc
Location exit_loc
================================================================================
MSG: robint_msgs/Location
time timestamp
string map_name
string map_uuid
string location_uuid
string type_name
string group_uuid
string location_name
geometry_msgs/Pose2D image_pose
geometry_msgs/PoseStamped pose

================================================================================
MSG: geometry_msgs/Pose2D
# Deprecated
# Please use the full 3D pose.

# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.

# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.


# This expresses a position and orientation on a 2D manifold.

float64 x
float64 y
float64 theta

================================================================================
MSG: robint_msgs/IsolatedZone
Zone zone
IsolatedWait[] wait_points
string next_task
================================================================================
MSG: robint_msgs/Zone
string uuid
string name
string map_uuid
string group_uuid
string type
geometry_msgs/Point[] points
================================================================================
MSG: robint_msgs/IsolatedWait
geometry_msgs/Pose pose
string uuid
bool direct"""
  # Pseudo-constants
  START = 0
  PAUSE = 1
  CONTINUE = 2
  STOP = 3

  __slots__ = ['task_info','command']
  _slot_types = ['robint_msgs/NavigationTaskInfo','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       task_info,command

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(JudgeIsolatedZoneRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.task_info is None:
        self.task_info = robint_msgs.msg.NavigationTaskInfo()
      if self.command is None:
        self.command = 0
    else:
      self.task_info = robint_msgs.msg.NavigationTaskInfo()
      self.command = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.task_info.current_map_uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.task_info.elevator_building_uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.task_info.current_floor_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.task_info.target_map_uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.task_info.target_floor_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.task_info.target_loc_uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.task_info.target_loc_group_uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.task_info.enter_elevator_loc_uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.task_info.current_elevator_interior_loc_uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.task_info.target_elevator_interior_loc_uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.task_info.elevator_wait_loc_uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.task_info.current_exit_elevator_loc_uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.task_info.target_exit_elevator_loc_uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.task_info.dock_anchor_pose.header.seq, _x.task_info.dock_anchor_pose.header.stamp.secs, _x.task_info.dock_anchor_pose.header.stamp.nsecs))
      _x = self.task_info.dock_anchor_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.task_info.dock_anchor_pose.pose.position.x, _x.task_info.dock_anchor_pose.pose.position.y, _x.task_info.dock_anchor_pose.pose.position.z, _x.task_info.dock_anchor_pose.pose.orientation.x, _x.task_info.dock_anchor_pose.pose.orientation.y, _x.task_info.dock_anchor_pose.pose.orientation.z, _x.task_info.dock_anchor_pose.pose.orientation.w))
      length = len(self.task_info.current_floor_gates)
      buff.write(_struct_I.pack(length))
      for val1 in self.task_info.current_floor_gates:
        _x = val1.gate_uuid
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.gate_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v1 = val1.enter_loc
        _v2 = _v1.timestamp
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1.map_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v1.map_uuid
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v1.location_uuid
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v1.type_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v1.group_uuid
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v1.location_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v3 = _v1.image_pose
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
        _v4 = _v1.pose
        _v5 = _v4.header
        _x = _v5.seq
        buff.write(_get_struct_I().pack(_x))
        _v6 = _v5.stamp
        _x = _v6
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v5.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v7 = _v4.pose
        _v8 = _v7.position
        _x = _v8
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v9 = _v7.orientation
        _x = _v9
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v10 = val1.exit_loc
        _v11 = _v10.timestamp
        _x = _v11
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v10.map_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v10.map_uuid
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v10.location_uuid
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v10.type_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v10.group_uuid
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v10.location_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v12 = _v10.image_pose
        _x = _v12
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
        _v13 = _v10.pose
        _v14 = _v13.header
        _x = _v14.seq
        buff.write(_get_struct_I().pack(_x))
        _v15 = _v14.stamp
        _x = _v15
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v14.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v16 = _v13.pose
        _v17 = _v16.position
        _x = _v17
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v18 = _v16.orientation
        _x = _v18
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.task_info.target_floor_gates)
      buff.write(_struct_I.pack(length))
      for val1 in self.task_info.target_floor_gates:
        _x = val1.gate_uuid
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.gate_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v19 = val1.enter_loc
        _v20 = _v19.timestamp
        _x = _v20
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v19.map_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v19.map_uuid
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v19.location_uuid
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v19.type_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v19.group_uuid
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v19.location_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v21 = _v19.image_pose
        _x = _v21
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
        _v22 = _v19.pose
        _v23 = _v22.header
        _x = _v23.seq
        buff.write(_get_struct_I().pack(_x))
        _v24 = _v23.stamp
        _x = _v24
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v23.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v25 = _v22.pose
        _v26 = _v25.position
        _x = _v26
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v27 = _v25.orientation
        _x = _v27
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v28 = val1.exit_loc
        _v29 = _v28.timestamp
        _x = _v29
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v28.map_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v28.map_uuid
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v28.location_uuid
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v28.type_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v28.group_uuid
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v28.location_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v30 = _v28.image_pose
        _x = _v30
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
        _v31 = _v28.pose
        _v32 = _v31.header
        _x = _v32.seq
        buff.write(_get_struct_I().pack(_x))
        _v33 = _v32.stamp
        _x = _v33
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v32.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v34 = _v31.pose
        _v35 = _v34.position
        _x = _v35
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v36 = _v34.orientation
        _x = _v36
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.task_info.current_floor_isolated_zones)
      buff.write(_struct_I.pack(length))
      for val1 in self.task_info.current_floor_isolated_zones:
        _v37 = val1.zone
        _x = _v37.uuid
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v37.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v37.map_uuid
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v37.group_uuid
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v37.type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v37.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v37.points:
          _x = val3
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(val1.wait_points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.wait_points:
          _v38 = val2.pose
          _v39 = _v38.position
          _x = _v39
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v40 = _v38.orientation
          _x = _v40
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val2.uuid
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.direct
          buff.write(_get_struct_B().pack(_x))
        _x = val1.next_task
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.task_info.target_floor_isolated_zones)
      buff.write(_struct_I.pack(length))
      for val1 in self.task_info.target_floor_isolated_zones:
        _v41 = val1.zone
        _x = _v41.uuid
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v41.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v41.map_uuid
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v41.group_uuid
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v41.type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v41.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v41.points:
          _x = val3
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(val1.wait_points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.wait_points:
          _v42 = val2.pose
          _v43 = _v42.position
          _x = _v43
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v44 = _v42.orientation
          _x = _v44
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val2.uuid
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.direct
          buff.write(_get_struct_B().pack(_x))
        _x = val1.next_task
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.command
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.task_info is None:
        self.task_info = robint_msgs.msg.NavigationTaskInfo()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.task_info.current_map_uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.task_info.current_map_uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.task_info.elevator_building_uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.task_info.elevator_building_uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.task_info.current_floor_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.task_info.current_floor_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.task_info.target_map_uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.task_info.target_map_uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.task_info.target_floor_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.task_info.target_floor_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.task_info.target_loc_uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.task_info.target_loc_uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.task_info.target_loc_group_uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.task_info.target_loc_group_uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.task_info.enter_elevator_loc_uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.task_info.enter_elevator_loc_uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.task_info.current_elevator_interior_loc_uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.task_info.current_elevator_interior_loc_uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.task_info.target_elevator_interior_loc_uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.task_info.target_elevator_interior_loc_uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.task_info.elevator_wait_loc_uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.task_info.elevator_wait_loc_uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.task_info.current_exit_elevator_loc_uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.task_info.current_exit_elevator_loc_uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.task_info.target_exit_elevator_loc_uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.task_info.target_exit_elevator_loc_uuid = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.task_info.dock_anchor_pose.header.seq, _x.task_info.dock_anchor_pose.header.stamp.secs, _x.task_info.dock_anchor_pose.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.task_info.dock_anchor_pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.task_info.dock_anchor_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.task_info.dock_anchor_pose.pose.position.x, _x.task_info.dock_anchor_pose.pose.position.y, _x.task_info.dock_anchor_pose.pose.position.z, _x.task_info.dock_anchor_pose.pose.orientation.x, _x.task_info.dock_anchor_pose.pose.orientation.y, _x.task_info.dock_anchor_pose.pose.orientation.z, _x.task_info.dock_anchor_pose.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.task_info.current_floor_gates = []
      for i in range(0, length):
        val1 = robint_msgs.msg.GateInfo()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.gate_uuid = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.gate_uuid = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.gate_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.gate_name = str[start:end]
        _v45 = val1.enter_loc
        _v46 = _v45.timestamp
        _x = _v46
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v45.map_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v45.map_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v45.map_uuid = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v45.map_uuid = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v45.location_uuid = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v45.location_uuid = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v45.type_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v45.type_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v45.group_uuid = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v45.group_uuid = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v45.location_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v45.location_name = str[start:end]
        _v47 = _v45.image_pose
        _x = _v47
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
        _v48 = _v45.pose
        _v49 = _v48.header
        start = end
        end += 4
        (_v49.seq,) = _get_struct_I().unpack(str[start:end])
        _v50 = _v49.stamp
        _x = _v50
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v49.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v49.frame_id = str[start:end]
        _v51 = _v48.pose
        _v52 = _v51.position
        _x = _v52
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v53 = _v51.orientation
        _x = _v53
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v54 = val1.exit_loc
        _v55 = _v54.timestamp
        _x = _v55
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v54.map_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v54.map_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v54.map_uuid = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v54.map_uuid = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v54.location_uuid = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v54.location_uuid = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v54.type_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v54.type_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v54.group_uuid = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v54.group_uuid = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v54.location_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v54.location_name = str[start:end]
        _v56 = _v54.image_pose
        _x = _v56
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
        _v57 = _v54.pose
        _v58 = _v57.header
        start = end
        end += 4
        (_v58.seq,) = _get_struct_I().unpack(str[start:end])
        _v59 = _v58.stamp
        _x = _v59
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v58.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v58.frame_id = str[start:end]
        _v60 = _v57.pose
        _v61 = _v60.position
        _x = _v61
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v62 = _v60.orientation
        _x = _v62
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.task_info.current_floor_gates.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.task_info.target_floor_gates = []
      for i in range(0, length):
        val1 = robint_msgs.msg.GateInfo()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.gate_uuid = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.gate_uuid = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.gate_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.gate_name = str[start:end]
        _v63 = val1.enter_loc
        _v64 = _v63.timestamp
        _x = _v64
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v63.map_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v63.map_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v63.map_uuid = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v63.map_uuid = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v63.location_uuid = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v63.location_uuid = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v63.type_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v63.type_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v63.group_uuid = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v63.group_uuid = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v63.location_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v63.location_name = str[start:end]
        _v65 = _v63.image_pose
        _x = _v65
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
        _v66 = _v63.pose
        _v67 = _v66.header
        start = end
        end += 4
        (_v67.seq,) = _get_struct_I().unpack(str[start:end])
        _v68 = _v67.stamp
        _x = _v68
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v67.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v67.frame_id = str[start:end]
        _v69 = _v66.pose
        _v70 = _v69.position
        _x = _v70
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v71 = _v69.orientation
        _x = _v71
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v72 = val1.exit_loc
        _v73 = _v72.timestamp
        _x = _v73
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v72.map_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v72.map_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v72.map_uuid = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v72.map_uuid = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v72.location_uuid = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v72.location_uuid = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v72.type_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v72.type_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v72.group_uuid = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v72.group_uuid = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v72.location_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v72.location_name = str[start:end]
        _v74 = _v72.image_pose
        _x = _v74
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
        _v75 = _v72.pose
        _v76 = _v75.header
        start = end
        end += 4
        (_v76.seq,) = _get_struct_I().unpack(str[start:end])
        _v77 = _v76.stamp
        _x = _v77
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v76.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v76.frame_id = str[start:end]
        _v78 = _v75.pose
        _v79 = _v78.position
        _x = _v79
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v80 = _v78.orientation
        _x = _v80
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.task_info.target_floor_gates.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.task_info.current_floor_isolated_zones = []
      for i in range(0, length):
        val1 = robint_msgs.msg.IsolatedZone()
        _v81 = val1.zone
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v81.uuid = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v81.uuid = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v81.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v81.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v81.map_uuid = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v81.map_uuid = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v81.group_uuid = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v81.group_uuid = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v81.type = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v81.type = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v81.points = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Point()
          _x = val3
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v81.points.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.wait_points = []
        for i in range(0, length):
          val2 = robint_msgs.msg.IsolatedWait()
          _v82 = val2.pose
          _v83 = _v82.position
          _x = _v83
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v84 = _v82.orientation
          _x = _v84
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.uuid = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.uuid = str[start:end]
          start = end
          end += 1
          (val2.direct,) = _get_struct_B().unpack(str[start:end])
          val2.direct = bool(val2.direct)
          val1.wait_points.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.next_task = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.next_task = str[start:end]
        self.task_info.current_floor_isolated_zones.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.task_info.target_floor_isolated_zones = []
      for i in range(0, length):
        val1 = robint_msgs.msg.IsolatedZone()
        _v85 = val1.zone
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v85.uuid = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v85.uuid = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v85.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v85.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v85.map_uuid = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v85.map_uuid = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v85.group_uuid = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v85.group_uuid = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v85.type = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v85.type = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v85.points = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Point()
          _x = val3
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v85.points.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.wait_points = []
        for i in range(0, length):
          val2 = robint_msgs.msg.IsolatedWait()
          _v86 = val2.pose
          _v87 = _v86.position
          _x = _v87
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v88 = _v86.orientation
          _x = _v88
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.uuid = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.uuid = str[start:end]
          start = end
          end += 1
          (val2.direct,) = _get_struct_B().unpack(str[start:end])
          val2.direct = bool(val2.direct)
          val1.wait_points.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.next_task = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.next_task = str[start:end]
        self.task_info.target_floor_isolated_zones.append(val1)
      start = end
      end += 1
      (self.command,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.task_info.current_map_uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.task_info.elevator_building_uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.task_info.current_floor_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.task_info.target_map_uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.task_info.target_floor_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.task_info.target_loc_uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.task_info.target_loc_group_uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.task_info.enter_elevator_loc_uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.task_info.current_elevator_interior_loc_uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.task_info.target_elevator_interior_loc_uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.task_info.elevator_wait_loc_uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.task_info.current_exit_elevator_loc_uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.task_info.target_exit_elevator_loc_uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.task_info.dock_anchor_pose.header.seq, _x.task_info.dock_anchor_pose.header.stamp.secs, _x.task_info.dock_anchor_pose.header.stamp.nsecs))
      _x = self.task_info.dock_anchor_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.task_info.dock_anchor_pose.pose.position.x, _x.task_info.dock_anchor_pose.pose.position.y, _x.task_info.dock_anchor_pose.pose.position.z, _x.task_info.dock_anchor_pose.pose.orientation.x, _x.task_info.dock_anchor_pose.pose.orientation.y, _x.task_info.dock_anchor_pose.pose.orientation.z, _x.task_info.dock_anchor_pose.pose.orientation.w))
      length = len(self.task_info.current_floor_gates)
      buff.write(_struct_I.pack(length))
      for val1 in self.task_info.current_floor_gates:
        _x = val1.gate_uuid
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.gate_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v89 = val1.enter_loc
        _v90 = _v89.timestamp
        _x = _v90
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v89.map_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v89.map_uuid
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v89.location_uuid
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v89.type_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v89.group_uuid
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v89.location_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v91 = _v89.image_pose
        _x = _v91
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
        _v92 = _v89.pose
        _v93 = _v92.header
        _x = _v93.seq
        buff.write(_get_struct_I().pack(_x))
        _v94 = _v93.stamp
        _x = _v94
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v93.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v95 = _v92.pose
        _v96 = _v95.position
        _x = _v96
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v97 = _v95.orientation
        _x = _v97
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v98 = val1.exit_loc
        _v99 = _v98.timestamp
        _x = _v99
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v98.map_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v98.map_uuid
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v98.location_uuid
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v98.type_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v98.group_uuid
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v98.location_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v100 = _v98.image_pose
        _x = _v100
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
        _v101 = _v98.pose
        _v102 = _v101.header
        _x = _v102.seq
        buff.write(_get_struct_I().pack(_x))
        _v103 = _v102.stamp
        _x = _v103
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v102.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v104 = _v101.pose
        _v105 = _v104.position
        _x = _v105
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v106 = _v104.orientation
        _x = _v106
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.task_info.target_floor_gates)
      buff.write(_struct_I.pack(length))
      for val1 in self.task_info.target_floor_gates:
        _x = val1.gate_uuid
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.gate_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v107 = val1.enter_loc
        _v108 = _v107.timestamp
        _x = _v108
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v107.map_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v107.map_uuid
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v107.location_uuid
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v107.type_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v107.group_uuid
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v107.location_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v109 = _v107.image_pose
        _x = _v109
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
        _v110 = _v107.pose
        _v111 = _v110.header
        _x = _v111.seq
        buff.write(_get_struct_I().pack(_x))
        _v112 = _v111.stamp
        _x = _v112
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v111.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v113 = _v110.pose
        _v114 = _v113.position
        _x = _v114
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v115 = _v113.orientation
        _x = _v115
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v116 = val1.exit_loc
        _v117 = _v116.timestamp
        _x = _v117
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v116.map_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v116.map_uuid
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v116.location_uuid
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v116.type_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v116.group_uuid
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v116.location_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v118 = _v116.image_pose
        _x = _v118
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
        _v119 = _v116.pose
        _v120 = _v119.header
        _x = _v120.seq
        buff.write(_get_struct_I().pack(_x))
        _v121 = _v120.stamp
        _x = _v121
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v120.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v122 = _v119.pose
        _v123 = _v122.position
        _x = _v123
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v124 = _v122.orientation
        _x = _v124
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.task_info.current_floor_isolated_zones)
      buff.write(_struct_I.pack(length))
      for val1 in self.task_info.current_floor_isolated_zones:
        _v125 = val1.zone
        _x = _v125.uuid
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v125.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v125.map_uuid
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v125.group_uuid
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v125.type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v125.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v125.points:
          _x = val3
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(val1.wait_points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.wait_points:
          _v126 = val2.pose
          _v127 = _v126.position
          _x = _v127
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v128 = _v126.orientation
          _x = _v128
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val2.uuid
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.direct
          buff.write(_get_struct_B().pack(_x))
        _x = val1.next_task
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.task_info.target_floor_isolated_zones)
      buff.write(_struct_I.pack(length))
      for val1 in self.task_info.target_floor_isolated_zones:
        _v129 = val1.zone
        _x = _v129.uuid
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v129.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v129.map_uuid
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v129.group_uuid
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v129.type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v129.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v129.points:
          _x = val3
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(val1.wait_points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.wait_points:
          _v130 = val2.pose
          _v131 = _v130.position
          _x = _v131
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v132 = _v130.orientation
          _x = _v132
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val2.uuid
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.direct
          buff.write(_get_struct_B().pack(_x))
        _x = val1.next_task
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.command
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.task_info is None:
        self.task_info = robint_msgs.msg.NavigationTaskInfo()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.task_info.current_map_uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.task_info.current_map_uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.task_info.elevator_building_uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.task_info.elevator_building_uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.task_info.current_floor_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.task_info.current_floor_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.task_info.target_map_uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.task_info.target_map_uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.task_info.target_floor_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.task_info.target_floor_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.task_info.target_loc_uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.task_info.target_loc_uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.task_info.target_loc_group_uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.task_info.target_loc_group_uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.task_info.enter_elevator_loc_uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.task_info.enter_elevator_loc_uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.task_info.current_elevator_interior_loc_uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.task_info.current_elevator_interior_loc_uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.task_info.target_elevator_interior_loc_uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.task_info.target_elevator_interior_loc_uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.task_info.elevator_wait_loc_uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.task_info.elevator_wait_loc_uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.task_info.current_exit_elevator_loc_uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.task_info.current_exit_elevator_loc_uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.task_info.target_exit_elevator_loc_uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.task_info.target_exit_elevator_loc_uuid = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.task_info.dock_anchor_pose.header.seq, _x.task_info.dock_anchor_pose.header.stamp.secs, _x.task_info.dock_anchor_pose.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.task_info.dock_anchor_pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.task_info.dock_anchor_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.task_info.dock_anchor_pose.pose.position.x, _x.task_info.dock_anchor_pose.pose.position.y, _x.task_info.dock_anchor_pose.pose.position.z, _x.task_info.dock_anchor_pose.pose.orientation.x, _x.task_info.dock_anchor_pose.pose.orientation.y, _x.task_info.dock_anchor_pose.pose.orientation.z, _x.task_info.dock_anchor_pose.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.task_info.current_floor_gates = []
      for i in range(0, length):
        val1 = robint_msgs.msg.GateInfo()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.gate_uuid = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.gate_uuid = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.gate_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.gate_name = str[start:end]
        _v133 = val1.enter_loc
        _v134 = _v133.timestamp
        _x = _v134
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v133.map_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v133.map_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v133.map_uuid = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v133.map_uuid = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v133.location_uuid = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v133.location_uuid = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v133.type_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v133.type_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v133.group_uuid = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v133.group_uuid = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v133.location_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v133.location_name = str[start:end]
        _v135 = _v133.image_pose
        _x = _v135
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
        _v136 = _v133.pose
        _v137 = _v136.header
        start = end
        end += 4
        (_v137.seq,) = _get_struct_I().unpack(str[start:end])
        _v138 = _v137.stamp
        _x = _v138
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v137.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v137.frame_id = str[start:end]
        _v139 = _v136.pose
        _v140 = _v139.position
        _x = _v140
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v141 = _v139.orientation
        _x = _v141
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v142 = val1.exit_loc
        _v143 = _v142.timestamp
        _x = _v143
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v142.map_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v142.map_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v142.map_uuid = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v142.map_uuid = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v142.location_uuid = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v142.location_uuid = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v142.type_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v142.type_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v142.group_uuid = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v142.group_uuid = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v142.location_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v142.location_name = str[start:end]
        _v144 = _v142.image_pose
        _x = _v144
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
        _v145 = _v142.pose
        _v146 = _v145.header
        start = end
        end += 4
        (_v146.seq,) = _get_struct_I().unpack(str[start:end])
        _v147 = _v146.stamp
        _x = _v147
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v146.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v146.frame_id = str[start:end]
        _v148 = _v145.pose
        _v149 = _v148.position
        _x = _v149
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v150 = _v148.orientation
        _x = _v150
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.task_info.current_floor_gates.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.task_info.target_floor_gates = []
      for i in range(0, length):
        val1 = robint_msgs.msg.GateInfo()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.gate_uuid = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.gate_uuid = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.gate_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.gate_name = str[start:end]
        _v151 = val1.enter_loc
        _v152 = _v151.timestamp
        _x = _v152
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v151.map_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v151.map_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v151.map_uuid = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v151.map_uuid = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v151.location_uuid = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v151.location_uuid = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v151.type_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v151.type_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v151.group_uuid = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v151.group_uuid = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v151.location_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v151.location_name = str[start:end]
        _v153 = _v151.image_pose
        _x = _v153
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
        _v154 = _v151.pose
        _v155 = _v154.header
        start = end
        end += 4
        (_v155.seq,) = _get_struct_I().unpack(str[start:end])
        _v156 = _v155.stamp
        _x = _v156
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v155.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v155.frame_id = str[start:end]
        _v157 = _v154.pose
        _v158 = _v157.position
        _x = _v158
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v159 = _v157.orientation
        _x = _v159
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v160 = val1.exit_loc
        _v161 = _v160.timestamp
        _x = _v161
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v160.map_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v160.map_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v160.map_uuid = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v160.map_uuid = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v160.location_uuid = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v160.location_uuid = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v160.type_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v160.type_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v160.group_uuid = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v160.group_uuid = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v160.location_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v160.location_name = str[start:end]
        _v162 = _v160.image_pose
        _x = _v162
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
        _v163 = _v160.pose
        _v164 = _v163.header
        start = end
        end += 4
        (_v164.seq,) = _get_struct_I().unpack(str[start:end])
        _v165 = _v164.stamp
        _x = _v165
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v164.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v164.frame_id = str[start:end]
        _v166 = _v163.pose
        _v167 = _v166.position
        _x = _v167
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v168 = _v166.orientation
        _x = _v168
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.task_info.target_floor_gates.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.task_info.current_floor_isolated_zones = []
      for i in range(0, length):
        val1 = robint_msgs.msg.IsolatedZone()
        _v169 = val1.zone
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v169.uuid = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v169.uuid = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v169.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v169.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v169.map_uuid = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v169.map_uuid = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v169.group_uuid = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v169.group_uuid = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v169.type = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v169.type = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v169.points = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Point()
          _x = val3
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v169.points.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.wait_points = []
        for i in range(0, length):
          val2 = robint_msgs.msg.IsolatedWait()
          _v170 = val2.pose
          _v171 = _v170.position
          _x = _v171
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v172 = _v170.orientation
          _x = _v172
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.uuid = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.uuid = str[start:end]
          start = end
          end += 1
          (val2.direct,) = _get_struct_B().unpack(str[start:end])
          val2.direct = bool(val2.direct)
          val1.wait_points.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.next_task = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.next_task = str[start:end]
        self.task_info.current_floor_isolated_zones.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.task_info.target_floor_isolated_zones = []
      for i in range(0, length):
        val1 = robint_msgs.msg.IsolatedZone()
        _v173 = val1.zone
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v173.uuid = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v173.uuid = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v173.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v173.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v173.map_uuid = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v173.map_uuid = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v173.group_uuid = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v173.group_uuid = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v173.type = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v173.type = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v173.points = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Point()
          _x = val3
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v173.points.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.wait_points = []
        for i in range(0, length):
          val2 = robint_msgs.msg.IsolatedWait()
          _v174 = val2.pose
          _v175 = _v174.position
          _x = _v175
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v176 = _v174.orientation
          _x = _v176
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.uuid = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.uuid = str[start:end]
          start = end
          end += 1
          (val2.direct,) = _get_struct_B().unpack(str[start:end])
          val2.direct = bool(val2.direct)
          val1.wait_points.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.next_task = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.next_task = str[start:end]
        self.task_info.target_floor_isolated_zones.append(val1)
      start = end
      end += 1
      (self.command,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robint_msgs/JudgeIsolatedZoneResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class JudgeIsolatedZoneResponse(genpy.Message):
  _md5sum = "4ad76664b0717ddbf6142456d7398288"
  _type = "robint_msgs/JudgeIsolatedZoneResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool success
uint8 error_code
string message
"""
  __slots__ = ['success','error_code','message']
  _slot_types = ['bool','uint8','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success,error_code,message

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(JudgeIsolatedZoneResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
      if self.error_code is None:
        self.error_code = 0
      if self.message is None:
        self.message = ''
    else:
      self.success = False
      self.error_code = 0
      self.message = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2B().pack(_x.success, _x.error_code))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.success, _x.error_code,) = _get_struct_2B().unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2B().pack(_x.success, _x.error_code))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.success, _x.error_code,) = _get_struct_2B().unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
class JudgeIsolatedZone(object):
  _type          = 'robint_msgs/JudgeIsolatedZone'
  _md5sum = '511ff24d4c9d29b2fb5f70e90296cf3d'
  _request_class  = JudgeIsolatedZoneRequest
  _response_class = JudgeIsolatedZoneResponse
