# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robint_msgs/GetTrajectoryPointRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GetTrajectoryPointRequest(genpy.Message):
  _md5sum = "6791409fa7c8ca779c22dd3ba8b38fc8"
  _type = "robint_msgs/GetTrajectoryPointRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 request_id
uint8 coordinate_mode
uint8 IMAGE=0
uint8 WORLD=1
"""
  # Pseudo-constants
  IMAGE = 0
  WORLD = 1

  __slots__ = ['request_id','coordinate_mode']
  _slot_types = ['uint32','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       request_id,coordinate_mode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetTrajectoryPointRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.request_id is None:
        self.request_id = 0
      if self.coordinate_mode is None:
        self.coordinate_mode = 0
    else:
      self.request_id = 0
      self.coordinate_mode = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_IB().pack(_x.request_id, _x.coordinate_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.request_id, _x.coordinate_mode,) = _get_struct_IB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_IB().pack(_x.request_id, _x.coordinate_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.request_id, _x.coordinate_mode,) = _get_struct_IB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_IB = None
def _get_struct_IB():
    global _struct_IB
    if _struct_IB is None:
        _struct_IB = struct.Struct("<IB")
    return _struct_IB
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robint_msgs/GetTrajectoryPointResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class GetTrajectoryPointResponse(genpy.Message):
  _md5sum = "4ae0ddada152bda8cfe12a13e584f90d"
  _type = "robint_msgs/GetTrajectoryPointResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Point pt
uint32 current_id
uint32 total_points_number
bool success
uint8 error_code
string message

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['pt','current_id','total_points_number','success','error_code','message']
  _slot_types = ['geometry_msgs/Point','uint32','uint32','bool','uint8','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       pt,current_id,total_points_number,success,error_code,message

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetTrajectoryPointResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.pt is None:
        self.pt = geometry_msgs.msg.Point()
      if self.current_id is None:
        self.current_id = 0
      if self.total_points_number is None:
        self.total_points_number = 0
      if self.success is None:
        self.success = False
      if self.error_code is None:
        self.error_code = 0
      if self.message is None:
        self.message = ''
    else:
      self.pt = geometry_msgs.msg.Point()
      self.current_id = 0
      self.total_points_number = 0
      self.success = False
      self.error_code = 0
      self.message = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3d2I2B().pack(_x.pt.x, _x.pt.y, _x.pt.z, _x.current_id, _x.total_points_number, _x.success, _x.error_code))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pt is None:
        self.pt = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 34
      (_x.pt.x, _x.pt.y, _x.pt.z, _x.current_id, _x.total_points_number, _x.success, _x.error_code,) = _get_struct_3d2I2B().unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3d2I2B().pack(_x.pt.x, _x.pt.y, _x.pt.z, _x.current_id, _x.total_points_number, _x.success, _x.error_code))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pt is None:
        self.pt = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 34
      (_x.pt.x, _x.pt.y, _x.pt.z, _x.current_id, _x.total_points_number, _x.success, _x.error_code,) = _get_struct_3d2I2B().unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d2I2B = None
def _get_struct_3d2I2B():
    global _struct_3d2I2B
    if _struct_3d2I2B is None:
        _struct_3d2I2B = struct.Struct("<3d2I2B")
    return _struct_3d2I2B
class GetTrajectoryPoint(object):
  _type          = 'robint_msgs/GetTrajectoryPoint'
  _md5sum = '8fd56019054effcf13a55a60fa14c24c'
  _request_class  = GetTrajectoryPointRequest
  _response_class = GetTrajectoryPointResponse
