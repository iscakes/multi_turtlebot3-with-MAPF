# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robint_msgs/ChangeUndockStateRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import robint_msgs.msg

class ChangeUndockStateRequest(genpy.Message):
  _md5sum = "c43ec380026500163e77abc99d4b36c7"
  _type = "robint_msgs/ChangeUndockStateRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """UndockState state

================================================================================
MSG: robint_msgs/UndockState
TaskStateHeader header
uint8 status
uint8 OBSTACLE_WARN=0
uint8 MOVING=1
uint8 r_state
uint8 r_feedback
bool finished
================================================================================
MSG: robint_msgs/TaskStateHeader
bool activate  # 该任务是否处于激活状态
time start_time
time stop_time
"""
  __slots__ = ['state']
  _slot_types = ['robint_msgs/UndockState']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ChangeUndockStateRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.state is None:
        self.state = robint_msgs.msg.UndockState()
    else:
      self.state = robint_msgs.msg.UndockState()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B4I4B().pack(_x.state.header.activate, _x.state.header.start_time.secs, _x.state.header.start_time.nsecs, _x.state.header.stop_time.secs, _x.state.header.stop_time.nsecs, _x.state.status, _x.state.r_state, _x.state.r_feedback, _x.state.finished))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.state is None:
        self.state = robint_msgs.msg.UndockState()
      end = 0
      _x = self
      start = end
      end += 21
      (_x.state.header.activate, _x.state.header.start_time.secs, _x.state.header.start_time.nsecs, _x.state.header.stop_time.secs, _x.state.header.stop_time.nsecs, _x.state.status, _x.state.r_state, _x.state.r_feedback, _x.state.finished,) = _get_struct_B4I4B().unpack(str[start:end])
      self.state.header.activate = bool(self.state.header.activate)
      self.state.finished = bool(self.state.finished)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B4I4B().pack(_x.state.header.activate, _x.state.header.start_time.secs, _x.state.header.start_time.nsecs, _x.state.header.stop_time.secs, _x.state.header.stop_time.nsecs, _x.state.status, _x.state.r_state, _x.state.r_feedback, _x.state.finished))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.state is None:
        self.state = robint_msgs.msg.UndockState()
      end = 0
      _x = self
      start = end
      end += 21
      (_x.state.header.activate, _x.state.header.start_time.secs, _x.state.header.start_time.nsecs, _x.state.header.stop_time.secs, _x.state.header.stop_time.nsecs, _x.state.status, _x.state.r_state, _x.state.r_feedback, _x.state.finished,) = _get_struct_B4I4B().unpack(str[start:end])
      self.state.header.activate = bool(self.state.header.activate)
      self.state.finished = bool(self.state.finished)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B4I4B = None
def _get_struct_B4I4B():
    global _struct_B4I4B
    if _struct_B4I4B is None:
        _struct_B4I4B = struct.Struct("<B4I4B")
    return _struct_B4I4B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robint_msgs/ChangeUndockStateResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ChangeUndockStateResponse(genpy.Message):
  _md5sum = "eb13ac1f1354ccecb7941ee8fa2192e8"
  _type = "robint_msgs/ChangeUndockStateResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool result
"""
  __slots__ = ['result']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       result

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ChangeUndockStateResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.result is None:
        self.result = False
    else:
      self.result = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.result
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.result,) = _get_struct_B().unpack(str[start:end])
      self.result = bool(self.result)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.result
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.result,) = _get_struct_B().unpack(str[start:end])
      self.result = bool(self.result)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class ChangeUndockState(object):
  _type          = 'robint_msgs/ChangeUndockState'
  _md5sum = '1df2b32e00d9659a7afd807940e0bc0e'
  _request_class  = ChangeUndockStateRequest
  _response_class = ChangeUndockStateResponse
