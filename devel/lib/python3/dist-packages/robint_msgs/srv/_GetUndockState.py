# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robint_msgs/GetUndockStateRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GetUndockStateRequest(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "robint_msgs/GetUndockStateRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetUndockStateRequest, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robint_msgs/GetUndockStateResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import robint_msgs.msg

class GetUndockStateResponse(genpy.Message):
  _md5sum = "d513c9c0fe2fb5b7d74e100f14d71c4d"
  _type = "robint_msgs/GetUndockStateResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """UndockState undock_state
bool result

================================================================================
MSG: robint_msgs/UndockState
TaskStateHeader header
uint8 status
uint8 OBSTACLE_WARN=0
uint8 MOVING=1
uint8 r_state
uint8 r_feedback
bool finished
================================================================================
MSG: robint_msgs/TaskStateHeader
bool activate  # 该任务是否处于激活状态
time start_time
time stop_time
"""
  __slots__ = ['undock_state','result']
  _slot_types = ['robint_msgs/UndockState','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       undock_state,result

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetUndockStateResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.undock_state is None:
        self.undock_state = robint_msgs.msg.UndockState()
      if self.result is None:
        self.result = False
    else:
      self.undock_state = robint_msgs.msg.UndockState()
      self.result = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B4I5B().pack(_x.undock_state.header.activate, _x.undock_state.header.start_time.secs, _x.undock_state.header.start_time.nsecs, _x.undock_state.header.stop_time.secs, _x.undock_state.header.stop_time.nsecs, _x.undock_state.status, _x.undock_state.r_state, _x.undock_state.r_feedback, _x.undock_state.finished, _x.result))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.undock_state is None:
        self.undock_state = robint_msgs.msg.UndockState()
      end = 0
      _x = self
      start = end
      end += 22
      (_x.undock_state.header.activate, _x.undock_state.header.start_time.secs, _x.undock_state.header.start_time.nsecs, _x.undock_state.header.stop_time.secs, _x.undock_state.header.stop_time.nsecs, _x.undock_state.status, _x.undock_state.r_state, _x.undock_state.r_feedback, _x.undock_state.finished, _x.result,) = _get_struct_B4I5B().unpack(str[start:end])
      self.undock_state.header.activate = bool(self.undock_state.header.activate)
      self.undock_state.finished = bool(self.undock_state.finished)
      self.result = bool(self.result)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B4I5B().pack(_x.undock_state.header.activate, _x.undock_state.header.start_time.secs, _x.undock_state.header.start_time.nsecs, _x.undock_state.header.stop_time.secs, _x.undock_state.header.stop_time.nsecs, _x.undock_state.status, _x.undock_state.r_state, _x.undock_state.r_feedback, _x.undock_state.finished, _x.result))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.undock_state is None:
        self.undock_state = robint_msgs.msg.UndockState()
      end = 0
      _x = self
      start = end
      end += 22
      (_x.undock_state.header.activate, _x.undock_state.header.start_time.secs, _x.undock_state.header.start_time.nsecs, _x.undock_state.header.stop_time.secs, _x.undock_state.header.stop_time.nsecs, _x.undock_state.status, _x.undock_state.r_state, _x.undock_state.r_feedback, _x.undock_state.finished, _x.result,) = _get_struct_B4I5B().unpack(str[start:end])
      self.undock_state.header.activate = bool(self.undock_state.header.activate)
      self.undock_state.finished = bool(self.undock_state.finished)
      self.result = bool(self.result)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B4I5B = None
def _get_struct_B4I5B():
    global _struct_B4I5B
    if _struct_B4I5B is None:
        _struct_B4I5B = struct.Struct("<B4I5B")
    return _struct_B4I5B
class GetUndockState(object):
  _type          = 'robint_msgs/GetUndockState'
  _md5sum = 'd513c9c0fe2fb5b7d74e100f14d71c4d'
  _request_class  = GetUndockStateRequest
  _response_class = GetUndockStateResponse
