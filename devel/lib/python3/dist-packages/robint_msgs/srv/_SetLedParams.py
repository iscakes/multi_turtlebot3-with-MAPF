# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robint_msgs/SetLedParamsRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetLedParamsRequest(genpy.Message):
  _md5sum = "b807bb039a82ac4194318c1934317415"
  _type = "robint_msgs/SetLedParamsRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# /*
#  * # LED控制
#  * ## b 亮度 [0-255], 不允许设置 10 ('\n')!!!
#  * ## s 速度 [11,16959], 越小越快，初始化默认1000
#  * ## c 颜色 [0x000000,0xFFFFFF], 初始化白色0xFFFFFF
#  * ## m 模式 [0-55]
#  * * 0: 静态单色
#  * * 12: 彩虹全彩转圈Rainbow Cycle
#  * * 3: 转圈color wipe
#  * * 44: 彗星尾巴Comet
#  * */

uint8 red
uint8 green
uint8 blue
uint32 rgb
uint32 brightness
uint32 mode
uint32 speed
"""
  __slots__ = ['red','green','blue','rgb','brightness','mode','speed']
  _slot_types = ['uint8','uint8','uint8','uint32','uint32','uint32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       red,green,blue,rgb,brightness,mode,speed

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetLedParamsRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.red is None:
        self.red = 0
      if self.green is None:
        self.green = 0
      if self.blue is None:
        self.blue = 0
      if self.rgb is None:
        self.rgb = 0
      if self.brightness is None:
        self.brightness = 0
      if self.mode is None:
        self.mode = 0
      if self.speed is None:
        self.speed = 0
    else:
      self.red = 0
      self.green = 0
      self.blue = 0
      self.rgb = 0
      self.brightness = 0
      self.mode = 0
      self.speed = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3B4I().pack(_x.red, _x.green, _x.blue, _x.rgb, _x.brightness, _x.mode, _x.speed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 19
      (_x.red, _x.green, _x.blue, _x.rgb, _x.brightness, _x.mode, _x.speed,) = _get_struct_3B4I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3B4I().pack(_x.red, _x.green, _x.blue, _x.rgb, _x.brightness, _x.mode, _x.speed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 19
      (_x.red, _x.green, _x.blue, _x.rgb, _x.brightness, _x.mode, _x.speed,) = _get_struct_3B4I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3B4I = None
def _get_struct_3B4I():
    global _struct_3B4I
    if _struct_3B4I is None:
        _struct_3B4I = struct.Struct("<3B4I")
    return _struct_3B4I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robint_msgs/SetLedParamsResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetLedParamsResponse(genpy.Message):
  _md5sum = "358e233cde0c8a8bcfea4ce193f8fc15"
  _type = "robint_msgs/SetLedParamsResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool success
"""
  __slots__ = ['success']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetLedParamsResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
    else:
      self.success = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class SetLedParams(object):
  _type          = 'robint_msgs/SetLedParams'
  _md5sum = '8ee2fcdcc512eade49a305e79b9688d9'
  _request_class  = SetLedParamsRequest
  _response_class = SetLedParamsResponse
