# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robint_msgs/JoystickPanelStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class JoystickPanelStatus(genpy.Message):
  _md5sum = "b7f32ae109c05e77fb5790ce1aa37191"
  _type = "robint_msgs/JoystickPanelStatus"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """time stamp
bool joystick_trigger
bool key_return_home
bool key_speed_increase
bool key_speed_reduction
bool key_park_brake
bool key_whistle
uint8 mode # 0: P档; 1: 手动; 2: 自动
uint8 level
uint8 error_code"""
  __slots__ = ['stamp','joystick_trigger','key_return_home','key_speed_increase','key_speed_reduction','key_park_brake','key_whistle','mode','level','error_code']
  _slot_types = ['time','bool','bool','bool','bool','bool','bool','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       stamp,joystick_trigger,key_return_home,key_speed_increase,key_speed_reduction,key_park_brake,key_whistle,mode,level,error_code

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(JoystickPanelStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.joystick_trigger is None:
        self.joystick_trigger = False
      if self.key_return_home is None:
        self.key_return_home = False
      if self.key_speed_increase is None:
        self.key_speed_increase = False
      if self.key_speed_reduction is None:
        self.key_speed_reduction = False
      if self.key_park_brake is None:
        self.key_park_brake = False
      if self.key_whistle is None:
        self.key_whistle = False
      if self.mode is None:
        self.mode = 0
      if self.level is None:
        self.level = 0
      if self.error_code is None:
        self.error_code = 0
    else:
      self.stamp = genpy.Time()
      self.joystick_trigger = False
      self.key_return_home = False
      self.key_speed_increase = False
      self.key_speed_reduction = False
      self.key_park_brake = False
      self.key_whistle = False
      self.mode = 0
      self.level = 0
      self.error_code = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I9B().pack(_x.stamp.secs, _x.stamp.nsecs, _x.joystick_trigger, _x.key_return_home, _x.key_speed_increase, _x.key_speed_reduction, _x.key_park_brake, _x.key_whistle, _x.mode, _x.level, _x.error_code))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 17
      (_x.stamp.secs, _x.stamp.nsecs, _x.joystick_trigger, _x.key_return_home, _x.key_speed_increase, _x.key_speed_reduction, _x.key_park_brake, _x.key_whistle, _x.mode, _x.level, _x.error_code,) = _get_struct_2I9B().unpack(str[start:end])
      self.joystick_trigger = bool(self.joystick_trigger)
      self.key_return_home = bool(self.key_return_home)
      self.key_speed_increase = bool(self.key_speed_increase)
      self.key_speed_reduction = bool(self.key_speed_reduction)
      self.key_park_brake = bool(self.key_park_brake)
      self.key_whistle = bool(self.key_whistle)
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I9B().pack(_x.stamp.secs, _x.stamp.nsecs, _x.joystick_trigger, _x.key_return_home, _x.key_speed_increase, _x.key_speed_reduction, _x.key_park_brake, _x.key_whistle, _x.mode, _x.level, _x.error_code))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 17
      (_x.stamp.secs, _x.stamp.nsecs, _x.joystick_trigger, _x.key_return_home, _x.key_speed_increase, _x.key_speed_reduction, _x.key_park_brake, _x.key_whistle, _x.mode, _x.level, _x.error_code,) = _get_struct_2I9B().unpack(str[start:end])
      self.joystick_trigger = bool(self.joystick_trigger)
      self.key_return_home = bool(self.key_return_home)
      self.key_speed_increase = bool(self.key_speed_increase)
      self.key_speed_reduction = bool(self.key_speed_reduction)
      self.key_park_brake = bool(self.key_park_brake)
      self.key_whistle = bool(self.key_whistle)
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I9B = None
def _get_struct_2I9B():
    global _struct_2I9B
    if _struct_2I9B is None:
        _struct_2I9B = struct.Struct("<2I9B")
    return _struct_2I9B
