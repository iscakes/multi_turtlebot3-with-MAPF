# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robint_msgs/TrackPathGoal.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import robint_msgs.msg
import std_msgs.msg

class TrackPathGoal(genpy.Message):
  _md5sum = "61ffb591b1c795b53886c88a6d22f5c4"
  _type = "robint_msgs/TrackPathGoal"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
PathWithPose[] paths
PathWithPoint boundary
uint8 mode
uint8 BackAndForth=0
uint8 Loop=1
int32 loop_count
float64 track_back_dist
bool enable_path_interpolation
string path_group_uuid
string coverage_method
bool enable_break_point
geometry_msgs/PoseStamped break_robot_pose
string break_subtask
int32 break_loop_index

================================================================================
MSG: robint_msgs/PathWithPose
uint32 id
string type
geometry_msgs/PoseStamped[] poses
================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: robint_msgs/PathWithPoint
uint32 id
string type
geometry_msgs/Point[] points"""
  # Pseudo-constants
  BackAndForth = 0
  Loop = 1

  __slots__ = ['paths','boundary','mode','loop_count','track_back_dist','enable_path_interpolation','path_group_uuid','coverage_method','enable_break_point','break_robot_pose','break_subtask','break_loop_index']
  _slot_types = ['robint_msgs/PathWithPose[]','robint_msgs/PathWithPoint','uint8','int32','float64','bool','string','string','bool','geometry_msgs/PoseStamped','string','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       paths,boundary,mode,loop_count,track_back_dist,enable_path_interpolation,path_group_uuid,coverage_method,enable_break_point,break_robot_pose,break_subtask,break_loop_index

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrackPathGoal, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.paths is None:
        self.paths = []
      if self.boundary is None:
        self.boundary = robint_msgs.msg.PathWithPoint()
      if self.mode is None:
        self.mode = 0
      if self.loop_count is None:
        self.loop_count = 0
      if self.track_back_dist is None:
        self.track_back_dist = 0.
      if self.enable_path_interpolation is None:
        self.enable_path_interpolation = False
      if self.path_group_uuid is None:
        self.path_group_uuid = ''
      if self.coverage_method is None:
        self.coverage_method = ''
      if self.enable_break_point is None:
        self.enable_break_point = False
      if self.break_robot_pose is None:
        self.break_robot_pose = geometry_msgs.msg.PoseStamped()
      if self.break_subtask is None:
        self.break_subtask = ''
      if self.break_loop_index is None:
        self.break_loop_index = 0
    else:
      self.paths = []
      self.boundary = robint_msgs.msg.PathWithPoint()
      self.mode = 0
      self.loop_count = 0
      self.track_back_dist = 0.
      self.enable_path_interpolation = False
      self.path_group_uuid = ''
      self.coverage_method = ''
      self.enable_break_point = False
      self.break_robot_pose = geometry_msgs.msg.PoseStamped()
      self.break_subtask = ''
      self.break_loop_index = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.paths)
      buff.write(_struct_I.pack(length))
      for val1 in self.paths:
        _x = val1.id
        buff.write(_get_struct_I().pack(_x))
        _x = val1.type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.poses:
          _v1 = val2.header
          _x = _v1.seq
          buff.write(_get_struct_I().pack(_x))
          _v2 = _v1.stamp
          _x = _v2
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v1.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v3 = val2.pose
          _v4 = _v3.position
          _x = _v4
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v5 = _v3.orientation
          _x = _v5
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      _x = self.boundary.id
      buff.write(_get_struct_I().pack(_x))
      _x = self.boundary.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.boundary.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.boundary.points:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_BidB().pack(_x.mode, _x.loop_count, _x.track_back_dist, _x.enable_path_interpolation))
      _x = self.path_group_uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.coverage_method
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B3I().pack(_x.enable_break_point, _x.break_robot_pose.header.seq, _x.break_robot_pose.header.stamp.secs, _x.break_robot_pose.header.stamp.nsecs))
      _x = self.break_robot_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.break_robot_pose.pose.position.x, _x.break_robot_pose.pose.position.y, _x.break_robot_pose.pose.position.z, _x.break_robot_pose.pose.orientation.x, _x.break_robot_pose.pose.orientation.y, _x.break_robot_pose.pose.orientation.z, _x.break_robot_pose.pose.orientation.w))
      _x = self.break_subtask
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.break_loop_index
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.paths is None:
        self.paths = None
      if self.boundary is None:
        self.boundary = robint_msgs.msg.PathWithPoint()
      if self.break_robot_pose is None:
        self.break_robot_pose = geometry_msgs.msg.PoseStamped()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.paths = []
      for i in range(0, length):
        val1 = robint_msgs.msg.PathWithPose()
        start = end
        end += 4
        (val1.id,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.type = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.type = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.PoseStamped()
          _v6 = val2.header
          start = end
          end += 4
          (_v6.seq,) = _get_struct_I().unpack(str[start:end])
          _v7 = _v6.stamp
          _x = _v7
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v6.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v6.frame_id = str[start:end]
          _v8 = val2.pose
          _v9 = _v8.position
          _x = _v9
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v10 = _v8.orientation
          _x = _v10
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.poses.append(val2)
        self.paths.append(val1)
      start = end
      end += 4
      (self.boundary.id,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.boundary.type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.boundary.type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.boundary.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.boundary.points.append(val1)
      _x = self
      start = end
      end += 14
      (_x.mode, _x.loop_count, _x.track_back_dist, _x.enable_path_interpolation,) = _get_struct_BidB().unpack(str[start:end])
      self.enable_path_interpolation = bool(self.enable_path_interpolation)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.path_group_uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.path_group_uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.coverage_method = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.coverage_method = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.enable_break_point, _x.break_robot_pose.header.seq, _x.break_robot_pose.header.stamp.secs, _x.break_robot_pose.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      self.enable_break_point = bool(self.enable_break_point)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.break_robot_pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.break_robot_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.break_robot_pose.pose.position.x, _x.break_robot_pose.pose.position.y, _x.break_robot_pose.pose.position.z, _x.break_robot_pose.pose.orientation.x, _x.break_robot_pose.pose.orientation.y, _x.break_robot_pose.pose.orientation.z, _x.break_robot_pose.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.break_subtask = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.break_subtask = str[start:end]
      start = end
      end += 4
      (self.break_loop_index,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.paths)
      buff.write(_struct_I.pack(length))
      for val1 in self.paths:
        _x = val1.id
        buff.write(_get_struct_I().pack(_x))
        _x = val1.type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.poses:
          _v11 = val2.header
          _x = _v11.seq
          buff.write(_get_struct_I().pack(_x))
          _v12 = _v11.stamp
          _x = _v12
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v11.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v13 = val2.pose
          _v14 = _v13.position
          _x = _v14
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v15 = _v13.orientation
          _x = _v15
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      _x = self.boundary.id
      buff.write(_get_struct_I().pack(_x))
      _x = self.boundary.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.boundary.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.boundary.points:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_BidB().pack(_x.mode, _x.loop_count, _x.track_back_dist, _x.enable_path_interpolation))
      _x = self.path_group_uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.coverage_method
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B3I().pack(_x.enable_break_point, _x.break_robot_pose.header.seq, _x.break_robot_pose.header.stamp.secs, _x.break_robot_pose.header.stamp.nsecs))
      _x = self.break_robot_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.break_robot_pose.pose.position.x, _x.break_robot_pose.pose.position.y, _x.break_robot_pose.pose.position.z, _x.break_robot_pose.pose.orientation.x, _x.break_robot_pose.pose.orientation.y, _x.break_robot_pose.pose.orientation.z, _x.break_robot_pose.pose.orientation.w))
      _x = self.break_subtask
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.break_loop_index
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.paths is None:
        self.paths = None
      if self.boundary is None:
        self.boundary = robint_msgs.msg.PathWithPoint()
      if self.break_robot_pose is None:
        self.break_robot_pose = geometry_msgs.msg.PoseStamped()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.paths = []
      for i in range(0, length):
        val1 = robint_msgs.msg.PathWithPose()
        start = end
        end += 4
        (val1.id,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.type = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.type = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.PoseStamped()
          _v16 = val2.header
          start = end
          end += 4
          (_v16.seq,) = _get_struct_I().unpack(str[start:end])
          _v17 = _v16.stamp
          _x = _v17
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v16.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v16.frame_id = str[start:end]
          _v18 = val2.pose
          _v19 = _v18.position
          _x = _v19
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v20 = _v18.orientation
          _x = _v20
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.poses.append(val2)
        self.paths.append(val1)
      start = end
      end += 4
      (self.boundary.id,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.boundary.type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.boundary.type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.boundary.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.boundary.points.append(val1)
      _x = self
      start = end
      end += 14
      (_x.mode, _x.loop_count, _x.track_back_dist, _x.enable_path_interpolation,) = _get_struct_BidB().unpack(str[start:end])
      self.enable_path_interpolation = bool(self.enable_path_interpolation)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.path_group_uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.path_group_uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.coverage_method = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.coverage_method = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.enable_break_point, _x.break_robot_pose.header.seq, _x.break_robot_pose.header.stamp.secs, _x.break_robot_pose.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      self.enable_break_point = bool(self.enable_break_point)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.break_robot_pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.break_robot_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.break_robot_pose.pose.position.x, _x.break_robot_pose.pose.position.y, _x.break_robot_pose.pose.position.z, _x.break_robot_pose.pose.orientation.x, _x.break_robot_pose.pose.orientation.y, _x.break_robot_pose.pose.orientation.z, _x.break_robot_pose.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.break_subtask = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.break_subtask = str[start:end]
      start = end
      end += 4
      (self.break_loop_index,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_B3I = None
def _get_struct_B3I():
    global _struct_B3I
    if _struct_B3I is None:
        _struct_B3I = struct.Struct("<B3I")
    return _struct_B3I
_struct_BidB = None
def _get_struct_BidB():
    global _struct_BidB
    if _struct_BidB is None:
        _struct_BidB = struct.Struct("<BidB")
    return _struct_BidB
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
