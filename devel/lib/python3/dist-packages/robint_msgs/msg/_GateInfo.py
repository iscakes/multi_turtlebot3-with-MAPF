# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robint_msgs/GateInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import geometry_msgs.msg
import robint_msgs.msg
import std_msgs.msg

class GateInfo(genpy.Message):
  _md5sum = "9f859c70d9c22112208cc2c6f33723b1"
  _type = "robint_msgs/GateInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string gate_uuid
string gate_name
Location enter_loc
Location exit_loc
================================================================================
MSG: robint_msgs/Location
time timestamp
string map_name
string map_uuid
string location_uuid
string type_name
string group_uuid
string location_name
geometry_msgs/Pose2D image_pose
geometry_msgs/PoseStamped pose

================================================================================
MSG: geometry_msgs/Pose2D
# Deprecated
# Please use the full 3D pose.

# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.

# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.


# This expresses a position and orientation on a 2D manifold.

float64 x
float64 y
float64 theta

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['gate_uuid','gate_name','enter_loc','exit_loc']
  _slot_types = ['string','string','robint_msgs/Location','robint_msgs/Location']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       gate_uuid,gate_name,enter_loc,exit_loc

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GateInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.gate_uuid is None:
        self.gate_uuid = ''
      if self.gate_name is None:
        self.gate_name = ''
      if self.enter_loc is None:
        self.enter_loc = robint_msgs.msg.Location()
      if self.exit_loc is None:
        self.exit_loc = robint_msgs.msg.Location()
    else:
      self.gate_uuid = ''
      self.gate_name = ''
      self.enter_loc = robint_msgs.msg.Location()
      self.exit_loc = robint_msgs.msg.Location()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.gate_uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.gate_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.enter_loc.timestamp.secs, _x.enter_loc.timestamp.nsecs))
      _x = self.enter_loc.map_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.enter_loc.map_uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.enter_loc.location_uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.enter_loc.type_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.enter_loc.group_uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.enter_loc.location_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3d3I().pack(_x.enter_loc.image_pose.x, _x.enter_loc.image_pose.y, _x.enter_loc.image_pose.theta, _x.enter_loc.pose.header.seq, _x.enter_loc.pose.header.stamp.secs, _x.enter_loc.pose.header.stamp.nsecs))
      _x = self.enter_loc.pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d2I().pack(_x.enter_loc.pose.pose.position.x, _x.enter_loc.pose.pose.position.y, _x.enter_loc.pose.pose.position.z, _x.enter_loc.pose.pose.orientation.x, _x.enter_loc.pose.pose.orientation.y, _x.enter_loc.pose.pose.orientation.z, _x.enter_loc.pose.pose.orientation.w, _x.exit_loc.timestamp.secs, _x.exit_loc.timestamp.nsecs))
      _x = self.exit_loc.map_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.exit_loc.map_uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.exit_loc.location_uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.exit_loc.type_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.exit_loc.group_uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.exit_loc.location_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3d3I().pack(_x.exit_loc.image_pose.x, _x.exit_loc.image_pose.y, _x.exit_loc.image_pose.theta, _x.exit_loc.pose.header.seq, _x.exit_loc.pose.header.stamp.secs, _x.exit_loc.pose.header.stamp.nsecs))
      _x = self.exit_loc.pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.exit_loc.pose.pose.position.x, _x.exit_loc.pose.pose.position.y, _x.exit_loc.pose.pose.position.z, _x.exit_loc.pose.pose.orientation.x, _x.exit_loc.pose.pose.orientation.y, _x.exit_loc.pose.pose.orientation.z, _x.exit_loc.pose.pose.orientation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.enter_loc is None:
        self.enter_loc = robint_msgs.msg.Location()
      if self.exit_loc is None:
        self.exit_loc = robint_msgs.msg.Location()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.gate_uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.gate_uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.gate_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.gate_name = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.enter_loc.timestamp.secs, _x.enter_loc.timestamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.enter_loc.map_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.enter_loc.map_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.enter_loc.map_uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.enter_loc.map_uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.enter_loc.location_uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.enter_loc.location_uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.enter_loc.type_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.enter_loc.type_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.enter_loc.group_uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.enter_loc.group_uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.enter_loc.location_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.enter_loc.location_name = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.enter_loc.image_pose.x, _x.enter_loc.image_pose.y, _x.enter_loc.image_pose.theta, _x.enter_loc.pose.header.seq, _x.enter_loc.pose.header.stamp.secs, _x.enter_loc.pose.header.stamp.nsecs,) = _get_struct_3d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.enter_loc.pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.enter_loc.pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 64
      (_x.enter_loc.pose.pose.position.x, _x.enter_loc.pose.pose.position.y, _x.enter_loc.pose.pose.position.z, _x.enter_loc.pose.pose.orientation.x, _x.enter_loc.pose.pose.orientation.y, _x.enter_loc.pose.pose.orientation.z, _x.enter_loc.pose.pose.orientation.w, _x.exit_loc.timestamp.secs, _x.exit_loc.timestamp.nsecs,) = _get_struct_7d2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.exit_loc.map_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.exit_loc.map_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.exit_loc.map_uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.exit_loc.map_uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.exit_loc.location_uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.exit_loc.location_uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.exit_loc.type_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.exit_loc.type_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.exit_loc.group_uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.exit_loc.group_uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.exit_loc.location_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.exit_loc.location_name = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.exit_loc.image_pose.x, _x.exit_loc.image_pose.y, _x.exit_loc.image_pose.theta, _x.exit_loc.pose.header.seq, _x.exit_loc.pose.header.stamp.secs, _x.exit_loc.pose.header.stamp.nsecs,) = _get_struct_3d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.exit_loc.pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.exit_loc.pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.exit_loc.pose.pose.position.x, _x.exit_loc.pose.pose.position.y, _x.exit_loc.pose.pose.position.z, _x.exit_loc.pose.pose.orientation.x, _x.exit_loc.pose.pose.orientation.y, _x.exit_loc.pose.pose.orientation.z, _x.exit_loc.pose.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.gate_uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.gate_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.enter_loc.timestamp.secs, _x.enter_loc.timestamp.nsecs))
      _x = self.enter_loc.map_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.enter_loc.map_uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.enter_loc.location_uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.enter_loc.type_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.enter_loc.group_uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.enter_loc.location_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3d3I().pack(_x.enter_loc.image_pose.x, _x.enter_loc.image_pose.y, _x.enter_loc.image_pose.theta, _x.enter_loc.pose.header.seq, _x.enter_loc.pose.header.stamp.secs, _x.enter_loc.pose.header.stamp.nsecs))
      _x = self.enter_loc.pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d2I().pack(_x.enter_loc.pose.pose.position.x, _x.enter_loc.pose.pose.position.y, _x.enter_loc.pose.pose.position.z, _x.enter_loc.pose.pose.orientation.x, _x.enter_loc.pose.pose.orientation.y, _x.enter_loc.pose.pose.orientation.z, _x.enter_loc.pose.pose.orientation.w, _x.exit_loc.timestamp.secs, _x.exit_loc.timestamp.nsecs))
      _x = self.exit_loc.map_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.exit_loc.map_uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.exit_loc.location_uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.exit_loc.type_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.exit_loc.group_uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.exit_loc.location_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3d3I().pack(_x.exit_loc.image_pose.x, _x.exit_loc.image_pose.y, _x.exit_loc.image_pose.theta, _x.exit_loc.pose.header.seq, _x.exit_loc.pose.header.stamp.secs, _x.exit_loc.pose.header.stamp.nsecs))
      _x = self.exit_loc.pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.exit_loc.pose.pose.position.x, _x.exit_loc.pose.pose.position.y, _x.exit_loc.pose.pose.position.z, _x.exit_loc.pose.pose.orientation.x, _x.exit_loc.pose.pose.orientation.y, _x.exit_loc.pose.pose.orientation.z, _x.exit_loc.pose.pose.orientation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.enter_loc is None:
        self.enter_loc = robint_msgs.msg.Location()
      if self.exit_loc is None:
        self.exit_loc = robint_msgs.msg.Location()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.gate_uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.gate_uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.gate_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.gate_name = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.enter_loc.timestamp.secs, _x.enter_loc.timestamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.enter_loc.map_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.enter_loc.map_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.enter_loc.map_uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.enter_loc.map_uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.enter_loc.location_uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.enter_loc.location_uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.enter_loc.type_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.enter_loc.type_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.enter_loc.group_uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.enter_loc.group_uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.enter_loc.location_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.enter_loc.location_name = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.enter_loc.image_pose.x, _x.enter_loc.image_pose.y, _x.enter_loc.image_pose.theta, _x.enter_loc.pose.header.seq, _x.enter_loc.pose.header.stamp.secs, _x.enter_loc.pose.header.stamp.nsecs,) = _get_struct_3d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.enter_loc.pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.enter_loc.pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 64
      (_x.enter_loc.pose.pose.position.x, _x.enter_loc.pose.pose.position.y, _x.enter_loc.pose.pose.position.z, _x.enter_loc.pose.pose.orientation.x, _x.enter_loc.pose.pose.orientation.y, _x.enter_loc.pose.pose.orientation.z, _x.enter_loc.pose.pose.orientation.w, _x.exit_loc.timestamp.secs, _x.exit_loc.timestamp.nsecs,) = _get_struct_7d2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.exit_loc.map_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.exit_loc.map_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.exit_loc.map_uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.exit_loc.map_uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.exit_loc.location_uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.exit_loc.location_uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.exit_loc.type_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.exit_loc.type_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.exit_loc.group_uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.exit_loc.group_uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.exit_loc.location_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.exit_loc.location_name = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.exit_loc.image_pose.x, _x.exit_loc.image_pose.y, _x.exit_loc.image_pose.theta, _x.exit_loc.pose.header.seq, _x.exit_loc.pose.header.stamp.secs, _x.exit_loc.pose.header.stamp.nsecs,) = _get_struct_3d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.exit_loc.pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.exit_loc.pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.exit_loc.pose.pose.position.x, _x.exit_loc.pose.pose.position.y, _x.exit_loc.pose.pose.position.z, _x.exit_loc.pose.pose.orientation.x, _x.exit_loc.pose.pose.orientation.y, _x.exit_loc.pose.pose.orientation.z, _x.exit_loc.pose.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3d3I = None
def _get_struct_3d3I():
    global _struct_3d3I
    if _struct_3d3I is None:
        _struct_3d3I = struct.Struct("<3d3I")
    return _struct_3d3I
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_7d2I = None
def _get_struct_7d2I():
    global _struct_7d2I
    if _struct_7d2I is None:
        _struct_7d2I = struct.Struct("<7d2I")
    return _struct_7d2I
