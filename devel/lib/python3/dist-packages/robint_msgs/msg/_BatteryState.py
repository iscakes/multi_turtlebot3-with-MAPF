# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robint_msgs/BatteryState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class BatteryState(genpy.Message):
  _md5sum = "cabd16a824b1a6ff2b4a4038d822019f"
  _type = "robint_msgs/BatteryState"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#battery error code
uint8 UBAT_ERR_NULL = 0
uint8 UBAT_ERR_CHARGER_OVRE_CURRENT = 1
uint8 UBAT_ERR_DISCHARGE_OVRE_CURRENT = 2
uint8 UBAT_ERR_SHORT_CIRCUIT = 3
uint8 UBAT_ERR_CELL_OPEN_CIRCUIT = 4
uint8 UBAT_ERR_TEMP_NTC_OPEN_CIRCUIT = 5
uint8 UBAT_ERR_CELL_OVER_VOLTAGEM = 6
uint8 UBAT_ERR_CELL_UNDER_VOLTAGE = 7
uint8 UBAT_ERR_ALL_OVER_VOLTAGE = 8
uint8 UBAT_ERR_ALL_UNDER_VOLTAGE = 9
uint8 UBAT_ERR_CELL_TEMP_OVER_CHARGE_TEMP_UPPER_LIMIT = 10
uint8 UBAT_ERR_CELL_TEMP_OVER_DISCHARGE_TEMP_UPPER_LIMIT = 11
uint8 UBAT_ERR_CELL_TEMP_UNDER_CHARGE_TEMP_LOWER_LIMIT = 12
uint8 UBAT_ERR_CELL_TEMP_UNDER_DISCHARGE_TEMP_lOWER_LIMIT = 13
uint8 UBAT_ERR_CELL_TEMP_DIFF_OVER_CHARGE_TEMP_UPPER_LIMIT = 14
uint8 UBAT_ERR_CELL_TEMP_DIFF_OVER_DISCHARGE_TEMP_UPPER_LIMIT = 15

float32 soc_percent       #/* 电量, [0-100],小于20%提示充电,小于10%报警, 小于5%提示即将自动关机 */
float32 voltage_v         #/* 电压, 伏特 */
float32 current_a         #/* 电流, 安培: 负数表示电池向外供电, 正数表示电池被充电 */
float32 temperature_c     #/* 温度, 摄氏度 */
uint32 cycle_times    #/* 充电循环次数 */
uint8 error_code        #/* 错误编码 */
bool is_charging        #/* 是否充电中 */
bool charging_state     #/*新的充电参数：用来判断是否入桩成功*/"""
  # Pseudo-constants
  UBAT_ERR_NULL = 0
  UBAT_ERR_CHARGER_OVRE_CURRENT = 1
  UBAT_ERR_DISCHARGE_OVRE_CURRENT = 2
  UBAT_ERR_SHORT_CIRCUIT = 3
  UBAT_ERR_CELL_OPEN_CIRCUIT = 4
  UBAT_ERR_TEMP_NTC_OPEN_CIRCUIT = 5
  UBAT_ERR_CELL_OVER_VOLTAGEM = 6
  UBAT_ERR_CELL_UNDER_VOLTAGE = 7
  UBAT_ERR_ALL_OVER_VOLTAGE = 8
  UBAT_ERR_ALL_UNDER_VOLTAGE = 9
  UBAT_ERR_CELL_TEMP_OVER_CHARGE_TEMP_UPPER_LIMIT = 10
  UBAT_ERR_CELL_TEMP_OVER_DISCHARGE_TEMP_UPPER_LIMIT = 11
  UBAT_ERR_CELL_TEMP_UNDER_CHARGE_TEMP_LOWER_LIMIT = 12
  UBAT_ERR_CELL_TEMP_UNDER_DISCHARGE_TEMP_lOWER_LIMIT = 13
  UBAT_ERR_CELL_TEMP_DIFF_OVER_CHARGE_TEMP_UPPER_LIMIT = 14
  UBAT_ERR_CELL_TEMP_DIFF_OVER_DISCHARGE_TEMP_UPPER_LIMIT = 15

  __slots__ = ['soc_percent','voltage_v','current_a','temperature_c','cycle_times','error_code','is_charging','charging_state']
  _slot_types = ['float32','float32','float32','float32','uint32','uint8','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       soc_percent,voltage_v,current_a,temperature_c,cycle_times,error_code,is_charging,charging_state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BatteryState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.soc_percent is None:
        self.soc_percent = 0.
      if self.voltage_v is None:
        self.voltage_v = 0.
      if self.current_a is None:
        self.current_a = 0.
      if self.temperature_c is None:
        self.temperature_c = 0.
      if self.cycle_times is None:
        self.cycle_times = 0
      if self.error_code is None:
        self.error_code = 0
      if self.is_charging is None:
        self.is_charging = False
      if self.charging_state is None:
        self.charging_state = False
    else:
      self.soc_percent = 0.
      self.voltage_v = 0.
      self.current_a = 0.
      self.temperature_c = 0.
      self.cycle_times = 0
      self.error_code = 0
      self.is_charging = False
      self.charging_state = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4fI3B().pack(_x.soc_percent, _x.voltage_v, _x.current_a, _x.temperature_c, _x.cycle_times, _x.error_code, _x.is_charging, _x.charging_state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 23
      (_x.soc_percent, _x.voltage_v, _x.current_a, _x.temperature_c, _x.cycle_times, _x.error_code, _x.is_charging, _x.charging_state,) = _get_struct_4fI3B().unpack(str[start:end])
      self.is_charging = bool(self.is_charging)
      self.charging_state = bool(self.charging_state)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4fI3B().pack(_x.soc_percent, _x.voltage_v, _x.current_a, _x.temperature_c, _x.cycle_times, _x.error_code, _x.is_charging, _x.charging_state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 23
      (_x.soc_percent, _x.voltage_v, _x.current_a, _x.temperature_c, _x.cycle_times, _x.error_code, _x.is_charging, _x.charging_state,) = _get_struct_4fI3B().unpack(str[start:end])
      self.is_charging = bool(self.is_charging)
      self.charging_state = bool(self.charging_state)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4fI3B = None
def _get_struct_4fI3B():
    global _struct_4fI3B
    if _struct_4fI3B is None:
        _struct_4fI3B = struct.Struct("<4fI3B")
    return _struct_4fI3B
