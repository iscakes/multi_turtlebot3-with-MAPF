# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robint_msgs/TaskStatusFeedback.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class TaskStatusFeedback(genpy.Message):
  _md5sum = "f4c55101ab12bccd187ce627a0586984"
  _type = "robint_msgs/TaskStatusFeedback"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 NONE = 0
uint8 RUNNING = 1
uint8 PAUSE = 2
uint8 STOP = 3


# Mapping
uint8 GET_ROBOT_POSE_ERROR = 4

# Navigation
uint8 NAV_FAILURE = 21
uint8 GLOBAL_PLAN_FAILURE = 22
uint8 LOCAL_PLAN_FAILURE = 23
uint8 WAIT_AT_GOAL_CANDIDATE = 24
uint8 NAV_CANCEL = 25
uint8 PLAN_EXCEPTION = 26

# OpenGate
uint8 OPEN_GATE_TIMEOUT = 41

# AutoCharge
uint8 FAIL_TO_DETECT_DOCK=51
uint8 DOCK_OBSTACLE_WARN=52
uint8 DOCK_TIMEOUT=53
uint8 RETRY_TIMEOUT=54
uint8 GO_TO_ANCHOR=55
uint8 APPROACH_DOCK=56

# Undock
uint8 UNDOCK_OBSTACLE_WARN=71
uint8 UNDOCK_TIMEOUT=72

# MoveIntoElevator
uint8 MOVE_INTO_ELEVATOR_PLAN_FAILURE=81
uint8 MOVE_INTO_GOAL_IS_OCCUPIED=82
uint8 MOVE_INTO_OBSTACLE_WARN=83
uint8 MOVE_INTO_ELEVATOR_TIMEOUT=84
uint8 MOVE_INTO_ELEVATOR_FAILURE=85

# MoveOffElevator
uint8 MOVE_OFF_ELEVATOR_FAILURE=91
uint8 MOVE_OFF_GOAL_IS_OCCUPIED=92
uint8 MOVE_OFF_OBSTACLE_WARN=93

# Motion
uint8 MOTION_OBSTACLE_WARNING=101

# TrackPath
uint8 TRACK_BACK=102

uint8 ROS_ERROR = 255"""
  # Pseudo-constants
  NONE = 0
  RUNNING = 1
  PAUSE = 2
  STOP = 3
  GET_ROBOT_POSE_ERROR = 4
  NAV_FAILURE = 21
  GLOBAL_PLAN_FAILURE = 22
  LOCAL_PLAN_FAILURE = 23
  WAIT_AT_GOAL_CANDIDATE = 24
  NAV_CANCEL = 25
  PLAN_EXCEPTION = 26
  OPEN_GATE_TIMEOUT = 41
  FAIL_TO_DETECT_DOCK = 51
  DOCK_OBSTACLE_WARN = 52
  DOCK_TIMEOUT = 53
  RETRY_TIMEOUT = 54
  GO_TO_ANCHOR = 55
  APPROACH_DOCK = 56
  UNDOCK_OBSTACLE_WARN = 71
  UNDOCK_TIMEOUT = 72
  MOVE_INTO_ELEVATOR_PLAN_FAILURE = 81
  MOVE_INTO_GOAL_IS_OCCUPIED = 82
  MOVE_INTO_OBSTACLE_WARN = 83
  MOVE_INTO_ELEVATOR_TIMEOUT = 84
  MOVE_INTO_ELEVATOR_FAILURE = 85
  MOVE_OFF_ELEVATOR_FAILURE = 91
  MOVE_OFF_GOAL_IS_OCCUPIED = 92
  MOVE_OFF_OBSTACLE_WARN = 93
  MOTION_OBSTACLE_WARNING = 101
  TRACK_BACK = 102
  ROS_ERROR = 255

  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TaskStatusFeedback, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
