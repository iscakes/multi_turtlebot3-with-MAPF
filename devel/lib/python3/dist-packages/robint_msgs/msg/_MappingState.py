# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robint_msgs/MappingState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import geometry_msgs.msg
import nav_msgs.msg
import robint_msgs.msg
import std_msgs.msg

class MappingState(genpy.Message):
  _md5sum = "eda50e62935bde588e7b2e9550b69559"
  _type = "robint_msgs/MappingState"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """TaskStateHeader header
nav_msgs/OccupancyGrid map_data
geometry_msgs/Pose2D image_pose
geometry_msgs/PoseStamped pose
uint8 r_state
uint8 r_feedback
================================================================================
MSG: robint_msgs/TaskStateHeader
bool activate  # 该任务是否处于激活状态
time start_time
time stop_time

================================================================================
MSG: nav_msgs/OccupancyGrid
# This represents a 2-D grid map, in which each cell represents the probability of
# occupancy.

Header header 

#MetaData for the map
MapMetaData info

# The map data, in row-major order, starting with (0,0).  Occupancy
# probabilities are in the range [0,100].  Unknown is -1.
int8[] data

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: nav_msgs/MapMetaData
# This hold basic information about the characterists of the OccupancyGrid

# The time at which the map was loaded
time map_load_time
# The map resolution [m/cell]
float32 resolution
# Map width [cells]
uint32 width
# Map height [cells]
uint32 height
# The origin of the map [m, m, rad].  This is the real-world pose of the
# cell (0,0) in the map.
geometry_msgs/Pose origin
================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Pose2D
# Deprecated
# Please use the full 3D pose.

# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.

# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.


# This expresses a position and orientation on a 2D manifold.

float64 x
float64 y
float64 theta

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose
"""
  __slots__ = ['header','map_data','image_pose','pose','r_state','r_feedback']
  _slot_types = ['robint_msgs/TaskStateHeader','nav_msgs/OccupancyGrid','geometry_msgs/Pose2D','geometry_msgs/PoseStamped','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,map_data,image_pose,pose,r_state,r_feedback

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MappingState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = robint_msgs.msg.TaskStateHeader()
      if self.map_data is None:
        self.map_data = nav_msgs.msg.OccupancyGrid()
      if self.image_pose is None:
        self.image_pose = geometry_msgs.msg.Pose2D()
      if self.pose is None:
        self.pose = geometry_msgs.msg.PoseStamped()
      if self.r_state is None:
        self.r_state = 0
      if self.r_feedback is None:
        self.r_feedback = 0
    else:
      self.header = robint_msgs.msg.TaskStateHeader()
      self.map_data = nav_msgs.msg.OccupancyGrid()
      self.image_pose = geometry_msgs.msg.Pose2D()
      self.pose = geometry_msgs.msg.PoseStamped()
      self.r_state = 0
      self.r_feedback = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B7I().pack(_x.header.activate, _x.header.start_time.secs, _x.header.start_time.nsecs, _x.header.stop_time.secs, _x.header.stop_time.nsecs, _x.map_data.header.seq, _x.map_data.header.stamp.secs, _x.map_data.header.stamp.nsecs))
      _x = self.map_data.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2If2I7d().pack(_x.map_data.info.map_load_time.secs, _x.map_data.info.map_load_time.nsecs, _x.map_data.info.resolution, _x.map_data.info.width, _x.map_data.info.height, _x.map_data.info.origin.position.x, _x.map_data.info.origin.position.y, _x.map_data.info.origin.position.z, _x.map_data.info.origin.orientation.x, _x.map_data.info.origin.orientation.y, _x.map_data.info.origin.orientation.z, _x.map_data.info.origin.orientation.w))
      length = len(self.map_data.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(struct.Struct(pattern).pack(*self.map_data.data))
      _x = self
      buff.write(_get_struct_3d3I().pack(_x.image_pose.x, _x.image_pose.y, _x.image_pose.theta, _x.pose.header.seq, _x.pose.header.stamp.secs, _x.pose.header.stamp.nsecs))
      _x = self.pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d2B().pack(_x.pose.pose.position.x, _x.pose.pose.position.y, _x.pose.pose.position.z, _x.pose.pose.orientation.x, _x.pose.pose.orientation.y, _x.pose.pose.orientation.z, _x.pose.pose.orientation.w, _x.r_state, _x.r_feedback))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = robint_msgs.msg.TaskStateHeader()
      if self.map_data is None:
        self.map_data = nav_msgs.msg.OccupancyGrid()
      if self.image_pose is None:
        self.image_pose = geometry_msgs.msg.Pose2D()
      if self.pose is None:
        self.pose = geometry_msgs.msg.PoseStamped()
      end = 0
      _x = self
      start = end
      end += 29
      (_x.header.activate, _x.header.start_time.secs, _x.header.start_time.nsecs, _x.header.stop_time.secs, _x.header.stop_time.nsecs, _x.map_data.header.seq, _x.map_data.header.stamp.secs, _x.map_data.header.stamp.nsecs,) = _get_struct_B7I().unpack(str[start:end])
      self.header.activate = bool(self.header.activate)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.map_data.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.map_data.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 76
      (_x.map_data.info.map_load_time.secs, _x.map_data.info.map_load_time.nsecs, _x.map_data.info.resolution, _x.map_data.info.width, _x.map_data.info.height, _x.map_data.info.origin.position.x, _x.map_data.info.origin.position.y, _x.map_data.info.origin.position.z, _x.map_data.info.origin.orientation.x, _x.map_data.info.origin.orientation.y, _x.map_data.info.origin.orientation.z, _x.map_data.info.origin.orientation.w,) = _get_struct_2If2I7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.map_data.data = s.unpack(str[start:end])
      _x = self
      start = end
      end += 36
      (_x.image_pose.x, _x.image_pose.y, _x.image_pose.theta, _x.pose.header.seq, _x.pose.header.stamp.secs, _x.pose.header.stamp.nsecs,) = _get_struct_3d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 58
      (_x.pose.pose.position.x, _x.pose.pose.position.y, _x.pose.pose.position.z, _x.pose.pose.orientation.x, _x.pose.pose.orientation.y, _x.pose.pose.orientation.z, _x.pose.pose.orientation.w, _x.r_state, _x.r_feedback,) = _get_struct_7d2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B7I().pack(_x.header.activate, _x.header.start_time.secs, _x.header.start_time.nsecs, _x.header.stop_time.secs, _x.header.stop_time.nsecs, _x.map_data.header.seq, _x.map_data.header.stamp.secs, _x.map_data.header.stamp.nsecs))
      _x = self.map_data.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2If2I7d().pack(_x.map_data.info.map_load_time.secs, _x.map_data.info.map_load_time.nsecs, _x.map_data.info.resolution, _x.map_data.info.width, _x.map_data.info.height, _x.map_data.info.origin.position.x, _x.map_data.info.origin.position.y, _x.map_data.info.origin.position.z, _x.map_data.info.origin.orientation.x, _x.map_data.info.origin.orientation.y, _x.map_data.info.origin.orientation.z, _x.map_data.info.origin.orientation.w))
      length = len(self.map_data.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(self.map_data.data.tostring())
      _x = self
      buff.write(_get_struct_3d3I().pack(_x.image_pose.x, _x.image_pose.y, _x.image_pose.theta, _x.pose.header.seq, _x.pose.header.stamp.secs, _x.pose.header.stamp.nsecs))
      _x = self.pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d2B().pack(_x.pose.pose.position.x, _x.pose.pose.position.y, _x.pose.pose.position.z, _x.pose.pose.orientation.x, _x.pose.pose.orientation.y, _x.pose.pose.orientation.z, _x.pose.pose.orientation.w, _x.r_state, _x.r_feedback))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = robint_msgs.msg.TaskStateHeader()
      if self.map_data is None:
        self.map_data = nav_msgs.msg.OccupancyGrid()
      if self.image_pose is None:
        self.image_pose = geometry_msgs.msg.Pose2D()
      if self.pose is None:
        self.pose = geometry_msgs.msg.PoseStamped()
      end = 0
      _x = self
      start = end
      end += 29
      (_x.header.activate, _x.header.start_time.secs, _x.header.start_time.nsecs, _x.header.stop_time.secs, _x.header.stop_time.nsecs, _x.map_data.header.seq, _x.map_data.header.stamp.secs, _x.map_data.header.stamp.nsecs,) = _get_struct_B7I().unpack(str[start:end])
      self.header.activate = bool(self.header.activate)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.map_data.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.map_data.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 76
      (_x.map_data.info.map_load_time.secs, _x.map_data.info.map_load_time.nsecs, _x.map_data.info.resolution, _x.map_data.info.width, _x.map_data.info.height, _x.map_data.info.origin.position.x, _x.map_data.info.origin.position.y, _x.map_data.info.origin.position.z, _x.map_data.info.origin.orientation.x, _x.map_data.info.origin.orientation.y, _x.map_data.info.origin.orientation.z, _x.map_data.info.origin.orientation.w,) = _get_struct_2If2I7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.map_data.data = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
      _x = self
      start = end
      end += 36
      (_x.image_pose.x, _x.image_pose.y, _x.image_pose.theta, _x.pose.header.seq, _x.pose.header.stamp.secs, _x.pose.header.stamp.nsecs,) = _get_struct_3d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 58
      (_x.pose.pose.position.x, _x.pose.pose.position.y, _x.pose.pose.position.z, _x.pose.pose.orientation.x, _x.pose.pose.orientation.y, _x.pose.pose.orientation.z, _x.pose.pose.orientation.w, _x.r_state, _x.r_feedback,) = _get_struct_7d2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2If2I7d = None
def _get_struct_2If2I7d():
    global _struct_2If2I7d
    if _struct_2If2I7d is None:
        _struct_2If2I7d = struct.Struct("<2If2I7d")
    return _struct_2If2I7d
_struct_3d3I = None
def _get_struct_3d3I():
    global _struct_3d3I
    if _struct_3d3I is None:
        _struct_3d3I = struct.Struct("<3d3I")
    return _struct_3d3I
_struct_7d2B = None
def _get_struct_7d2B():
    global _struct_7d2B
    if _struct_7d2B is None:
        _struct_7d2B = struct.Struct("<7d2B")
    return _struct_7d2B
_struct_B7I = None
def _get_struct_B7I():
    global _struct_B7I
    if _struct_B7I is None:
        _struct_B7I = struct.Struct("<B7I")
    return _struct_B7I
