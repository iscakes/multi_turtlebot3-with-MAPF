# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robint_msgs/TrackPathFeedback.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class TrackPathFeedback(genpy.Message):
  _md5sum = "eb8e7ca299d8bec46f0c1dba808f611c"
  _type = "robint_msgs/TrackPathFeedback"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
geometry_msgs/PoseStamped base_position
int32 current_loop_index
float32 progress
bool high_speed_status
string subtask # "None", "Follow_Wall", "Track_OuterPath", "Track_InnerPath"
string state
uint8 status

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['base_position','current_loop_index','progress','high_speed_status','subtask','state','status']
  _slot_types = ['geometry_msgs/PoseStamped','int32','float32','bool','string','string','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       base_position,current_loop_index,progress,high_speed_status,subtask,state,status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrackPathFeedback, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.base_position is None:
        self.base_position = geometry_msgs.msg.PoseStamped()
      if self.current_loop_index is None:
        self.current_loop_index = 0
      if self.progress is None:
        self.progress = 0.
      if self.high_speed_status is None:
        self.high_speed_status = False
      if self.subtask is None:
        self.subtask = ''
      if self.state is None:
        self.state = ''
      if self.status is None:
        self.status = 0
    else:
      self.base_position = geometry_msgs.msg.PoseStamped()
      self.current_loop_index = 0
      self.progress = 0.
      self.high_speed_status = False
      self.subtask = ''
      self.state = ''
      self.status = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.base_position.header.seq, _x.base_position.header.stamp.secs, _x.base_position.header.stamp.nsecs))
      _x = self.base_position.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7difB().pack(_x.base_position.pose.position.x, _x.base_position.pose.position.y, _x.base_position.pose.position.z, _x.base_position.pose.orientation.x, _x.base_position.pose.orientation.y, _x.base_position.pose.orientation.z, _x.base_position.pose.orientation.w, _x.current_loop_index, _x.progress, _x.high_speed_status))
      _x = self.subtask
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.status
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.base_position is None:
        self.base_position = geometry_msgs.msg.PoseStamped()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.base_position.header.seq, _x.base_position.header.stamp.secs, _x.base_position.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.base_position.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.base_position.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 65
      (_x.base_position.pose.position.x, _x.base_position.pose.position.y, _x.base_position.pose.position.z, _x.base_position.pose.orientation.x, _x.base_position.pose.orientation.y, _x.base_position.pose.orientation.z, _x.base_position.pose.orientation.w, _x.current_loop_index, _x.progress, _x.high_speed_status,) = _get_struct_7difB().unpack(str[start:end])
      self.high_speed_status = bool(self.high_speed_status)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.subtask = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.subtask = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state = str[start:end]
      start = end
      end += 1
      (self.status,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.base_position.header.seq, _x.base_position.header.stamp.secs, _x.base_position.header.stamp.nsecs))
      _x = self.base_position.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7difB().pack(_x.base_position.pose.position.x, _x.base_position.pose.position.y, _x.base_position.pose.position.z, _x.base_position.pose.orientation.x, _x.base_position.pose.orientation.y, _x.base_position.pose.orientation.z, _x.base_position.pose.orientation.w, _x.current_loop_index, _x.progress, _x.high_speed_status))
      _x = self.subtask
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.status
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.base_position is None:
        self.base_position = geometry_msgs.msg.PoseStamped()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.base_position.header.seq, _x.base_position.header.stamp.secs, _x.base_position.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.base_position.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.base_position.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 65
      (_x.base_position.pose.position.x, _x.base_position.pose.position.y, _x.base_position.pose.position.z, _x.base_position.pose.orientation.x, _x.base_position.pose.orientation.y, _x.base_position.pose.orientation.z, _x.base_position.pose.orientation.w, _x.current_loop_index, _x.progress, _x.high_speed_status,) = _get_struct_7difB().unpack(str[start:end])
      self.high_speed_status = bool(self.high_speed_status)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.subtask = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.subtask = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state = str[start:end]
      start = end
      end += 1
      (self.status,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_7difB = None
def _get_struct_7difB():
    global _struct_7difB
    if _struct_7difB is None:
        _struct_7difB = struct.Struct("<7difB")
    return _struct_7difB
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
