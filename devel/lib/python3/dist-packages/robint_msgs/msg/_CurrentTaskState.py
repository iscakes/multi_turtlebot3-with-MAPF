# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robint_msgs/CurrentTaskState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import robint_msgs.msg

class CurrentTaskState(genpy.Message):
  _md5sum = "9de3599c586d0abeed093da92159956c"
  _type = "robint_msgs/CurrentTaskState"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string activated_task_name
NavigationState navigation_state
FollowingState following_state
PatrolState patrol_state
AutoChargeState auto_charge_state
UndockState undock_state
================================================================================
MSG: robint_msgs/NavigationState
TaskStateHeader header 
string goal_name
string location_name
string goal_group_uuid
string state
string feedback
uint8 r_state
uint8 r_feedback
bool reached
================================================================================
MSG: robint_msgs/TaskStateHeader
bool activate  # 该任务是否处于激活状态
time start_time
time stop_time

================================================================================
MSG: robint_msgs/FollowingState
TaskStateHeader header
uint8 status
uint8 r_state
uint8 r_feedback
bool finished
================================================================================
MSG: robint_msgs/PatrolState
TaskStateHeader header
string state             # "Running", "Stop", "Pause"
string current_route_name
string current_goal_name
bool current_goal_isReached
bool finished
================================================================================
MSG: robint_msgs/AutoChargeState
TaskStateHeader header
string state
uint8 r_state
uint8 r_feedback
bool finished
================================================================================
MSG: robint_msgs/UndockState
TaskStateHeader header
uint8 status
uint8 OBSTACLE_WARN=0
uint8 MOVING=1
uint8 r_state
uint8 r_feedback
bool finished"""
  __slots__ = ['activated_task_name','navigation_state','following_state','patrol_state','auto_charge_state','undock_state']
  _slot_types = ['string','robint_msgs/NavigationState','robint_msgs/FollowingState','robint_msgs/PatrolState','robint_msgs/AutoChargeState','robint_msgs/UndockState']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       activated_task_name,navigation_state,following_state,patrol_state,auto_charge_state,undock_state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CurrentTaskState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.activated_task_name is None:
        self.activated_task_name = ''
      if self.navigation_state is None:
        self.navigation_state = robint_msgs.msg.NavigationState()
      if self.following_state is None:
        self.following_state = robint_msgs.msg.FollowingState()
      if self.patrol_state is None:
        self.patrol_state = robint_msgs.msg.PatrolState()
      if self.auto_charge_state is None:
        self.auto_charge_state = robint_msgs.msg.AutoChargeState()
      if self.undock_state is None:
        self.undock_state = robint_msgs.msg.UndockState()
    else:
      self.activated_task_name = ''
      self.navigation_state = robint_msgs.msg.NavigationState()
      self.following_state = robint_msgs.msg.FollowingState()
      self.patrol_state = robint_msgs.msg.PatrolState()
      self.auto_charge_state = robint_msgs.msg.AutoChargeState()
      self.undock_state = robint_msgs.msg.UndockState()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.activated_task_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B4I().pack(_x.navigation_state.header.activate, _x.navigation_state.header.start_time.secs, _x.navigation_state.header.start_time.nsecs, _x.navigation_state.header.stop_time.secs, _x.navigation_state.header.stop_time.nsecs))
      _x = self.navigation_state.goal_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.navigation_state.location_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.navigation_state.goal_group_uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.navigation_state.state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.navigation_state.feedback
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4B4I5B4I().pack(_x.navigation_state.r_state, _x.navigation_state.r_feedback, _x.navigation_state.reached, _x.following_state.header.activate, _x.following_state.header.start_time.secs, _x.following_state.header.start_time.nsecs, _x.following_state.header.stop_time.secs, _x.following_state.header.stop_time.nsecs, _x.following_state.status, _x.following_state.r_state, _x.following_state.r_feedback, _x.following_state.finished, _x.patrol_state.header.activate, _x.patrol_state.header.start_time.secs, _x.patrol_state.header.start_time.nsecs, _x.patrol_state.header.stop_time.secs, _x.patrol_state.header.stop_time.nsecs))
      _x = self.patrol_state.state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.patrol_state.current_route_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.patrol_state.current_goal_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3B4I().pack(_x.patrol_state.current_goal_isReached, _x.patrol_state.finished, _x.auto_charge_state.header.activate, _x.auto_charge_state.header.start_time.secs, _x.auto_charge_state.header.start_time.nsecs, _x.auto_charge_state.header.stop_time.secs, _x.auto_charge_state.header.stop_time.nsecs))
      _x = self.auto_charge_state.state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4B4I4B().pack(_x.auto_charge_state.r_state, _x.auto_charge_state.r_feedback, _x.auto_charge_state.finished, _x.undock_state.header.activate, _x.undock_state.header.start_time.secs, _x.undock_state.header.start_time.nsecs, _x.undock_state.header.stop_time.secs, _x.undock_state.header.stop_time.nsecs, _x.undock_state.status, _x.undock_state.r_state, _x.undock_state.r_feedback, _x.undock_state.finished))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.navigation_state is None:
        self.navigation_state = robint_msgs.msg.NavigationState()
      if self.following_state is None:
        self.following_state = robint_msgs.msg.FollowingState()
      if self.patrol_state is None:
        self.patrol_state = robint_msgs.msg.PatrolState()
      if self.auto_charge_state is None:
        self.auto_charge_state = robint_msgs.msg.AutoChargeState()
      if self.undock_state is None:
        self.undock_state = robint_msgs.msg.UndockState()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.activated_task_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.activated_task_name = str[start:end]
      _x = self
      start = end
      end += 17
      (_x.navigation_state.header.activate, _x.navigation_state.header.start_time.secs, _x.navigation_state.header.start_time.nsecs, _x.navigation_state.header.stop_time.secs, _x.navigation_state.header.stop_time.nsecs,) = _get_struct_B4I().unpack(str[start:end])
      self.navigation_state.header.activate = bool(self.navigation_state.header.activate)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.navigation_state.goal_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.navigation_state.goal_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.navigation_state.location_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.navigation_state.location_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.navigation_state.goal_group_uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.navigation_state.goal_group_uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.navigation_state.state = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.navigation_state.state = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.navigation_state.feedback = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.navigation_state.feedback = str[start:end]
      _x = self
      start = end
      end += 41
      (_x.navigation_state.r_state, _x.navigation_state.r_feedback, _x.navigation_state.reached, _x.following_state.header.activate, _x.following_state.header.start_time.secs, _x.following_state.header.start_time.nsecs, _x.following_state.header.stop_time.secs, _x.following_state.header.stop_time.nsecs, _x.following_state.status, _x.following_state.r_state, _x.following_state.r_feedback, _x.following_state.finished, _x.patrol_state.header.activate, _x.patrol_state.header.start_time.secs, _x.patrol_state.header.start_time.nsecs, _x.patrol_state.header.stop_time.secs, _x.patrol_state.header.stop_time.nsecs,) = _get_struct_4B4I5B4I().unpack(str[start:end])
      self.navigation_state.reached = bool(self.navigation_state.reached)
      self.following_state.header.activate = bool(self.following_state.header.activate)
      self.following_state.finished = bool(self.following_state.finished)
      self.patrol_state.header.activate = bool(self.patrol_state.header.activate)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.patrol_state.state = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.patrol_state.state = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.patrol_state.current_route_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.patrol_state.current_route_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.patrol_state.current_goal_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.patrol_state.current_goal_name = str[start:end]
      _x = self
      start = end
      end += 19
      (_x.patrol_state.current_goal_isReached, _x.patrol_state.finished, _x.auto_charge_state.header.activate, _x.auto_charge_state.header.start_time.secs, _x.auto_charge_state.header.start_time.nsecs, _x.auto_charge_state.header.stop_time.secs, _x.auto_charge_state.header.stop_time.nsecs,) = _get_struct_3B4I().unpack(str[start:end])
      self.patrol_state.current_goal_isReached = bool(self.patrol_state.current_goal_isReached)
      self.patrol_state.finished = bool(self.patrol_state.finished)
      self.auto_charge_state.header.activate = bool(self.auto_charge_state.header.activate)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.auto_charge_state.state = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.auto_charge_state.state = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.auto_charge_state.r_state, _x.auto_charge_state.r_feedback, _x.auto_charge_state.finished, _x.undock_state.header.activate, _x.undock_state.header.start_time.secs, _x.undock_state.header.start_time.nsecs, _x.undock_state.header.stop_time.secs, _x.undock_state.header.stop_time.nsecs, _x.undock_state.status, _x.undock_state.r_state, _x.undock_state.r_feedback, _x.undock_state.finished,) = _get_struct_4B4I4B().unpack(str[start:end])
      self.auto_charge_state.finished = bool(self.auto_charge_state.finished)
      self.undock_state.header.activate = bool(self.undock_state.header.activate)
      self.undock_state.finished = bool(self.undock_state.finished)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.activated_task_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B4I().pack(_x.navigation_state.header.activate, _x.navigation_state.header.start_time.secs, _x.navigation_state.header.start_time.nsecs, _x.navigation_state.header.stop_time.secs, _x.navigation_state.header.stop_time.nsecs))
      _x = self.navigation_state.goal_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.navigation_state.location_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.navigation_state.goal_group_uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.navigation_state.state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.navigation_state.feedback
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4B4I5B4I().pack(_x.navigation_state.r_state, _x.navigation_state.r_feedback, _x.navigation_state.reached, _x.following_state.header.activate, _x.following_state.header.start_time.secs, _x.following_state.header.start_time.nsecs, _x.following_state.header.stop_time.secs, _x.following_state.header.stop_time.nsecs, _x.following_state.status, _x.following_state.r_state, _x.following_state.r_feedback, _x.following_state.finished, _x.patrol_state.header.activate, _x.patrol_state.header.start_time.secs, _x.patrol_state.header.start_time.nsecs, _x.patrol_state.header.stop_time.secs, _x.patrol_state.header.stop_time.nsecs))
      _x = self.patrol_state.state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.patrol_state.current_route_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.patrol_state.current_goal_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3B4I().pack(_x.patrol_state.current_goal_isReached, _x.patrol_state.finished, _x.auto_charge_state.header.activate, _x.auto_charge_state.header.start_time.secs, _x.auto_charge_state.header.start_time.nsecs, _x.auto_charge_state.header.stop_time.secs, _x.auto_charge_state.header.stop_time.nsecs))
      _x = self.auto_charge_state.state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4B4I4B().pack(_x.auto_charge_state.r_state, _x.auto_charge_state.r_feedback, _x.auto_charge_state.finished, _x.undock_state.header.activate, _x.undock_state.header.start_time.secs, _x.undock_state.header.start_time.nsecs, _x.undock_state.header.stop_time.secs, _x.undock_state.header.stop_time.nsecs, _x.undock_state.status, _x.undock_state.r_state, _x.undock_state.r_feedback, _x.undock_state.finished))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.navigation_state is None:
        self.navigation_state = robint_msgs.msg.NavigationState()
      if self.following_state is None:
        self.following_state = robint_msgs.msg.FollowingState()
      if self.patrol_state is None:
        self.patrol_state = robint_msgs.msg.PatrolState()
      if self.auto_charge_state is None:
        self.auto_charge_state = robint_msgs.msg.AutoChargeState()
      if self.undock_state is None:
        self.undock_state = robint_msgs.msg.UndockState()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.activated_task_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.activated_task_name = str[start:end]
      _x = self
      start = end
      end += 17
      (_x.navigation_state.header.activate, _x.navigation_state.header.start_time.secs, _x.navigation_state.header.start_time.nsecs, _x.navigation_state.header.stop_time.secs, _x.navigation_state.header.stop_time.nsecs,) = _get_struct_B4I().unpack(str[start:end])
      self.navigation_state.header.activate = bool(self.navigation_state.header.activate)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.navigation_state.goal_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.navigation_state.goal_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.navigation_state.location_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.navigation_state.location_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.navigation_state.goal_group_uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.navigation_state.goal_group_uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.navigation_state.state = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.navigation_state.state = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.navigation_state.feedback = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.navigation_state.feedback = str[start:end]
      _x = self
      start = end
      end += 41
      (_x.navigation_state.r_state, _x.navigation_state.r_feedback, _x.navigation_state.reached, _x.following_state.header.activate, _x.following_state.header.start_time.secs, _x.following_state.header.start_time.nsecs, _x.following_state.header.stop_time.secs, _x.following_state.header.stop_time.nsecs, _x.following_state.status, _x.following_state.r_state, _x.following_state.r_feedback, _x.following_state.finished, _x.patrol_state.header.activate, _x.patrol_state.header.start_time.secs, _x.patrol_state.header.start_time.nsecs, _x.patrol_state.header.stop_time.secs, _x.patrol_state.header.stop_time.nsecs,) = _get_struct_4B4I5B4I().unpack(str[start:end])
      self.navigation_state.reached = bool(self.navigation_state.reached)
      self.following_state.header.activate = bool(self.following_state.header.activate)
      self.following_state.finished = bool(self.following_state.finished)
      self.patrol_state.header.activate = bool(self.patrol_state.header.activate)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.patrol_state.state = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.patrol_state.state = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.patrol_state.current_route_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.patrol_state.current_route_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.patrol_state.current_goal_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.patrol_state.current_goal_name = str[start:end]
      _x = self
      start = end
      end += 19
      (_x.patrol_state.current_goal_isReached, _x.patrol_state.finished, _x.auto_charge_state.header.activate, _x.auto_charge_state.header.start_time.secs, _x.auto_charge_state.header.start_time.nsecs, _x.auto_charge_state.header.stop_time.secs, _x.auto_charge_state.header.stop_time.nsecs,) = _get_struct_3B4I().unpack(str[start:end])
      self.patrol_state.current_goal_isReached = bool(self.patrol_state.current_goal_isReached)
      self.patrol_state.finished = bool(self.patrol_state.finished)
      self.auto_charge_state.header.activate = bool(self.auto_charge_state.header.activate)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.auto_charge_state.state = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.auto_charge_state.state = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.auto_charge_state.r_state, _x.auto_charge_state.r_feedback, _x.auto_charge_state.finished, _x.undock_state.header.activate, _x.undock_state.header.start_time.secs, _x.undock_state.header.start_time.nsecs, _x.undock_state.header.stop_time.secs, _x.undock_state.header.stop_time.nsecs, _x.undock_state.status, _x.undock_state.r_state, _x.undock_state.r_feedback, _x.undock_state.finished,) = _get_struct_4B4I4B().unpack(str[start:end])
      self.auto_charge_state.finished = bool(self.auto_charge_state.finished)
      self.undock_state.header.activate = bool(self.undock_state.header.activate)
      self.undock_state.finished = bool(self.undock_state.finished)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3B4I = None
def _get_struct_3B4I():
    global _struct_3B4I
    if _struct_3B4I is None:
        _struct_3B4I = struct.Struct("<3B4I")
    return _struct_3B4I
_struct_4B4I4B = None
def _get_struct_4B4I4B():
    global _struct_4B4I4B
    if _struct_4B4I4B is None:
        _struct_4B4I4B = struct.Struct("<4B4I4B")
    return _struct_4B4I4B
_struct_4B4I5B4I = None
def _get_struct_4B4I5B4I():
    global _struct_4B4I5B4I
    if _struct_4B4I5B4I is None:
        _struct_4B4I5B4I = struct.Struct("<4B4I5B4I")
    return _struct_4B4I5B4I
_struct_B4I = None
def _get_struct_B4I():
    global _struct_B4I
    if _struct_B4I is None:
        _struct_B4I = struct.Struct("<B4I")
    return _struct_B4I
